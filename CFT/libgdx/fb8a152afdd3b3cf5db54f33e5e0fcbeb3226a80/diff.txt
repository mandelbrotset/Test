diff --git a/CHANGES b/CHANGES
index f220d70..8ef1261 100644
--- a/CHANGES
+++ b/CHANGES
@@ -18,7 +18,7 @@
 - PolygonSpriteBatch implements Batch.
 - New scene2d actions: EventAction, CountdownEventAction.
 - Adds cancelHttpRequest() method to Net interface
-- Update GWT/HTML5 Backend to GWT 2.6.0
+- Updated GWT/HTML5 Backend to GWT 2.6.0
 - Minimal Android version is 2.2, see http://www.badlogicgames.com/wordpress/?p=3297
 - Updated to LWJGL 2.9.1
 - Can now embed your libgdx app as a fragment, more info on the wiki
@@ -27,6 +27,9 @@
 - scene2d.ui, added Container which is similar to a Table with one cell, but more lightweight
 - Added texture filters and mip map generation to BitMapFontLoader and FreeTypeFontGenerator
 - scene2d.ui, VerticalGroup and HorizontalGroup got pad, fill and an API similar to Table/Container
+- Removed OpenGL ES 1.0, 1.1 support; see http://www.badlogicgames.com/wordpress/?p=3311
+- Added OpenGL ES 3 support
+- Updated Android backend, demos, tests to 4.4
 
 [0.9.9]
 - added setCursorImage method to Input interface to support custom mouse cursors on the desktop
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
index a0602c0..24783e7 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
@@ -16,9 +16,6 @@
 
 package com.badlogic.gdx.backends.android;
 
-import java.lang.reflect.Method;
-import java.util.Arrays;
-
 import android.app.Activity;
 import android.content.Context;
 import android.content.res.Configuration;
@@ -47,8 +44,14 @@ import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxNativesLoader;
 
+import java.lang.reflect.Method;
+import java.util.Arrays;
+
+import javax.microedition.khronos.opengles.GL10;
+import javax.microedition.khronos.opengles.GL11;
+
 /** An implementation of the {@link Application} interface for Android. Create an {@link Activity} that derives from this class. In
- * the {@link Activity#onCreate(Bundle)} method call the {@link #initialize(ApplicationListener, boolean)} method specifying the
+ * the {@link Activity#onCreate(Bundle)} method call the {@link #initialize(ApplicationListener)} method specifying the
  * configuration for the GLSurfaceView.
  * 
  * @author mzechner */
@@ -75,24 +78,17 @@ public class AndroidApplication extends Activity implements AndroidApplicationBa
 	private boolean isWaitingForAudio = false;
 
 	/** This method has to be called in the {@link Activity#onCreate(Bundle)} method. It sets up all the things necessary to get
-	 * input, render via OpenGL and so on. If useGL20IfAvailable is set the AndroidApplication will try to create an OpenGL ES 2.0
-	 * context which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be
-	 * used when OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the
-	 * {@link Graphics#isGL20Available()} method. Uses a default {@link AndroidApplicationConfiguration}.
+	 * input, render via OpenGL and so on. Uses a default {@link AndroidApplicationConfiguration}.
 	 * 
-	 * @param listener the {@link ApplicationListener} implementing the program logic
-	 **/
+	 * @param listener the {@link ApplicationListener} implementing the program logic **/
 	public void initialize (ApplicationListener listener) {
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		initialize(listener, config);
 	}
 
 	/** This method has to be called in the {@link Activity#onCreate(Bundle)} method. It sets up all the things necessary to get
-	 * input, render via OpenGL and so on. If config.useGL20 is set the AndroidApplication will try to create an OpenGL ES 2.0
-	 * context which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be
-	 * used when OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the
-	 * {@link Graphics#isGL20Available()} method. You can configure other aspects of the application with the rest of the fields in
-	 * the {@link AndroidApplicationConfiguration} instance.
+	 * input, render via OpenGL and so on. You can configure other aspects of the application with the rest of the fields in the
+	 * {@link AndroidApplicationConfiguration} instance.
 	 * 
 	 * @param listener the {@link ApplicationListener} implementing the program logic
 	 * @param config the {@link AndroidApplicationConfiguration}, defining various settings of the application (use accelerometer,
@@ -203,11 +199,8 @@ public class AndroidApplication extends Activity implements AndroidApplicationBa
 	}
 
 	/** This method has to be called in the {@link Activity#onCreate(Bundle)} method. It sets up all the things necessary to get
-	 * input, render via OpenGL and so on. If useGL20IfAvailable is set the AndroidApplication will try to create an OpenGL ES 2.0
-	 * context which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be
-	 * used when OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the
-	 * {@link Graphics#isGL20Available()} method. Uses a default {@link AndroidApplicationConfiguration}.
-	 * <p/>
+	 * input, render via OpenGL and so on. Uses a default {@link AndroidApplicationConfiguration}.
+	 * <p>
 	 * Note: you have to add the returned view to your layout!
 	 * 
 	 * @param listener the {@link ApplicationListener} implementing the program logic
@@ -218,12 +211,9 @@ public class AndroidApplication extends Activity implements AndroidApplicationBa
 	}
 
 	/** This method has to be called in the {@link Activity#onCreate(Bundle)} method. It sets up all the things necessary to get
-	 * input, render via OpenGL and so on. If config.useGL20 is set the AndroidApplication will try to create an OpenGL ES 2.0
-	 * context which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be
-	 * used when OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the
-	 * {@link Graphics#isGL20Available()} method. You can configure other aspects of the application with the rest of the fields in
-	 * the {@link AndroidApplicationConfiguration} instance.
-	 * <p/>
+	 * input, render via OpenGL and so on. You can configure other aspects of the application with the rest of the fields in the
+	 * {@link AndroidApplicationConfiguration} instance.
+	 * <p>
 	 * Note: you have to add the returned view to your layout!
 	 * 
 	 * @param listener the {@link ApplicationListener} implementing the program logic
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationBase.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationBase.java
index 098dd1e..33d95c2 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationBase.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationBase.java
@@ -71,10 +71,8 @@ public interface AndroidApplicationBase extends Application {
 	/** Activates Android 4.4 KitKat's 'Immersive Mode' feature.
 	 * @param b Whether or not to use immersive mode */
 	void useImmersiveMode (boolean b);
-	
-	/**
-	 * Returns the Handler object created by the application
-	 * @return The {@link Handler} object created by the application
-	 */
-	Handler getHandler();
+
+	/** Returns the Handler object created by the application
+	 * @return The {@link Handler} object created by the application */
+	Handler getHandler ();
 }
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationConfiguration.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationConfiguration.java
index a3737a5..2e7a272 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationConfiguration.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationConfiguration.java
@@ -52,7 +52,7 @@ public class AndroidApplicationConfiguration {
 	 * less 14. default: false **/
 	public boolean hideStatusBar = false;
 
-    /** whether to disable Android audio support. default: false */
+	/** whether to disable Android audio support. default: false */
 	public boolean disableAudio = false;
 
 	/** the maximum number of {@link Sound} instances that can be played simultaneously, sets the corresponding {@link SoundPool}
@@ -61,10 +61,10 @@ public class AndroidApplicationConfiguration {
 
 	/** the {@link ResolutionStrategy}. default: {@link FillResolutionStrategy} **/
 	public ResolutionStrategy resolutionStrategy = new FillResolutionStrategy();
-	
+
 	/** if the app is a livewallpaper, whether it should get full touch events **/
-	public boolean getTouchEventsForLiveWallpaper = false; 
-	
+	public boolean getTouchEventsForLiveWallpaper = false;
+
 	/** set this to true to enable Android 4.4 KitKat's 'Immersive mode' **/
 	public boolean useImmersiveMode = false;
 }
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
index 487e947..ce8dcbc 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
@@ -185,4 +185,4 @@ public final class AndroidAudio implements Audio {
 		}
 		soundPool.release();
 	}
-}
\ No newline at end of file
+}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudioDevice.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudioDevice.java
index 21c1813..ff6d4ef 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudioDevice.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudioDevice.java
@@ -93,4 +93,4 @@ class AndroidAudioDevice implements AudioDevice {
 	public void setVolume (float volume) {
 		track.setStereoVolume(volume, volume);
 	}
-}
\ No newline at end of file
+}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidClipboard.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidClipboard.java
index 48247dd..f202ea6 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidClipboard.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidClipboard.java
@@ -25,51 +25,46 @@ import android.content.ClipData;
 import com.badlogic.gdx.utils.Clipboard;
 
 public class AndroidClipboard implements Clipboard {
-	 Context context;
+	Context context;
 
-	 protected AndroidClipboard (Context context) {
-		  this.context = context;
-	 }
+	protected AndroidClipboard (Context context) {
+		this.context = context;
+	}
 
-	 @Override
-	 public String getContents () {
-		  if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
-				android.text.ClipboardManager clipboard =
-					(ClipboardManager)context.getSystemService(context.CLIPBOARD_SERVICE);
-				if (clipboard.getText() == null)
-					 return null;
-				return clipboard.getText().toString();
-		  } else {
-				android.content.ClipboardManager clipboard =
-					(android.content.ClipboardManager)context.getSystemService(context.CLIPBOARD_SERVICE);
-				ClipData clip = clipboard.getPrimaryClip();
-				if (clip == null)
-					 return null;
-				CharSequence text = clip.getItemAt(0).getText();
-				if (text == null)
-					 return null;
-				return text.toString();
-		  }
-	 }
+	@Override
+	public String getContents () {
+		if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
+			android.text.ClipboardManager clipboard = (ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);
+			if (clipboard.getText() == null) return null;
+			return clipboard.getText().toString();
+		} else {
+			android.content.ClipboardManager clipboard = (android.content.ClipboardManager)context
+				.getSystemService(Context.CLIPBOARD_SERVICE);
+			ClipData clip = clipboard.getPrimaryClip();
+			if (clip == null) return null;
+			CharSequence text = clip.getItemAt(0).getText();
+			if (text == null) return null;
+			return text.toString();
+		}
+	}
 
-	 @Override
-	 public void setContents (final String contents) {
-		  try {
-				((Activity)context).runOnUiThread(new Runnable() {
-					 public void run () {
-						  if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
-								android.text.ClipboardManager clipboard =
-									(ClipboardManager)context.getSystemService(context.CLIPBOARD_SERVICE);
-								clipboard.setText(contents);
-						  } else {
-								android.content.ClipboardManager clipboard =
-									(android.content.ClipboardManager)context.getSystemService(context.CLIPBOARD_SERVICE);
-								ClipData data = ClipData.newPlainText(contents, contents);
-								clipboard.setPrimaryClip(data);
-						  }
-					 }
-				});
-		  } catch (final Exception ex) {
-		  }
-	 }
+	@Override
+	public void setContents (final String contents) {
+		try {
+			((Activity)context).runOnUiThread(new Runnable() {
+				public void run () {
+					if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
+						android.text.ClipboardManager clipboard = (ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);
+						clipboard.setText(contents);
+					} else {
+						android.content.ClipboardManager clipboard = (android.content.ClipboardManager)context
+							.getSystemService(Context.CLIPBOARD_SERVICE);
+						ClipData data = ClipData.newPlainText(contents, contents);
+						clipboard.setPrimaryClip(data);
+					}
+				}
+			});
+		} catch (final Exception ex) {
+		}
+	}
 }
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
index 6f922d3..5803f7d 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
@@ -50,8 +50,8 @@ import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxNativesLoader;
 
 /** An implementation of the {@link Application} interface for Android. Create an {@link Activity} that derives from this class. In
- * the Activity#onCreate(Bundle) method call the {@link #initialize(ApplicationListener, boolean)} method specifying the
- * configuration for the GLSurfaceView.
+ * the Activity#onCreate(Bundle) method call the {@link #initialize(ApplicationListener)} method specifying the configuration for
+ * the GLSurfaceView.
  * 
  * @author mzechner */
 public class AndroidDaydream extends DreamService implements Application {
@@ -73,25 +73,16 @@ public class AndroidDaydream extends DreamService implements Application {
 	protected int logLevel = LOG_INFO;
 
 	/** This method has to be called in the Activity#onCreate(Bundle) method. It sets up all the things necessary to get input,
-	 * render via OpenGL and so on. If useGL20IfAvailable is set the AndroidApplication will try to create an OpenGL ES 2.0 context
-	 * which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be used when
-	 * OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the {@link Graphics#isGL20Available()}
-	 * method. Uses a default {@link AndroidApplicationConfiguration}.
-	 * 
-	 * @param listener the {@link ApplicationListener} implementing the program logic
-	 * @param useGL2IfAvailable whether to use OpenGL ES 2.0 if its available. */
+	 * render via OpenGL and so on. Uses a default {@link AndroidApplicationConfiguration}.
+	 * @param listener the {@link ApplicationListener} implementing the program logic */
 	public void initialize (ApplicationListener listener) {
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		initialize(listener, config);
 	}
 
 	/** This method has to be called in the Activity#onCreate(Bundle) method. It sets up all the things necessary to get input,
-	 * render via OpenGL and so on. If config.useGL20 is set the AndroidApplication will try to create an OpenGL ES 2.0 context
-	 * which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be used when
-	 * OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the {@link Graphics#isGL20Available()}
-	 * method. You can configure other aspects of the application with the rest of the fields in the
+	 * render via OpenGL and so on. You can configure other aspects of the application with the rest of the fields in the
 	 * {@link AndroidApplicationConfiguration} instance.
-	 * 
 	 * @param listener the {@link ApplicationListener} implementing the program logic
 	 * @param config the {@link AndroidApplicationConfiguration}, defining various settings of the application (use accelerometer,
 	 *           etc.). */
@@ -148,13 +139,9 @@ public class AndroidDaydream extends DreamService implements Application {
 	}
 
 	/** This method has to be called in the Activity#onCreate(Bundle) method. It sets up all the things necessary to get input,
-	 * render via OpenGL and so on. If useGL20IfAvailable is set the AndroidApplication will try to create an OpenGL ES 2.0 context
-	 * which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be used when
-	 * OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the {@link Graphics#isGL20Available()}
-	 * method. Uses a default {@link AndroidApplicationConfiguration}.
-	 * <p/>
+	 * render via OpenGL and so on. Uses a default {@link AndroidApplicationConfiguration}.
+	 * <p>
 	 * Note: you have to add the returned view to your layout!
-	 * 
 	 * @param listener the {@link ApplicationListener} implementing the program logic
 	 * @return the GLSurfaceView of the application */
 	public View initializeForView (ApplicationListener listener) {
@@ -163,14 +150,10 @@ public class AndroidDaydream extends DreamService implements Application {
 	}
 
 	/** This method has to be called in the Activity#onCreate(Bundle) method. It sets up all the things necessary to get input,
-	 * render via OpenGL and so on. If config.useGL20 is set the AndroidApplication will try to create an OpenGL ES 2.0 context
-	 * which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be used when
-	 * OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the {@link Graphics#isGL20Available()}
-	 * method. You can configure other aspects of the application with the rest of the fields in the
+	 * render via OpenGL and so on. You can configure other aspects of the application with the rest of the fields in the
 	 * {@link AndroidApplicationConfiguration} instance.
-	 * <p/>
+	 * <p>
 	 * Note: you have to add the returned view to your layout!
-	 * 
 	 * @param listener the {@link ApplicationListener} implementing the program logic
 	 * @param config the {@link AndroidApplicationConfiguration}, defining various settings of the application (use accelerometer,
 	 *           etc.).
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
index b54c2b1..2a59a3f 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
@@ -155,7 +155,11 @@ public class AndroidFileHandle extends FileHandle {
 			} catch (IOException ignored) {
 			} finally {
 				if (fileDescriptor != null) {
-					try { fileDescriptor.close(); } catch(IOException e) { };
+					try {
+						fileDescriptor.close();
+					} catch (IOException e) {
+					}
+					;
 				}
 			}
 		}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java
index 18e0bbb..edbf513 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java
@@ -1,10 +1,5 @@
-package com.badlogic.gdx.backends.android;
-
-import java.lang.reflect.Method;
-import java.util.Arrays;
 
-import javax.microedition.khronos.opengles.GL10;
-import javax.microedition.khronos.opengles.GL11;
+package com.badlogic.gdx.backends.android;
 
 import android.app.Activity;
 import android.content.Context;
@@ -33,81 +28,81 @@ import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxNativesLoader;
 
-/**
- * Implementation of the {@link AndroidApplicationBase} that is based on the {@link Fragment} class. This class is similar
- * in use to the {@link AndroidApplication} class, which is based on an {@link Activity}.
+import java.lang.reflect.Method;
+import java.util.Arrays;
+
+/** Implementation of the {@link AndroidApplicationBase} that is based on the {@link Fragment} class. This class is similar in use
+ * to the {@link AndroidApplication} class, which is based on an {@link Activity}.
  * 
- * @author Bartol Karuza (me@bartolkaruza.com)
- *
- */
+ * @author Bartol Karuza (me@bartolkaruza.com) */
 public class AndroidFragmentApplication extends Fragment implements AndroidApplicationBase {
-	
-	/**
-	 * Callbacks interface for letting the fragment interact with the Activitiy, parent fragment or target fragment.
-	 * @author x077186
-	 *
-	 */
+
+	/** Callbacks interface for letting the fragment interact with the Activitiy, parent fragment or target fragment.
+	 * 
+	 * @author Bartol Karuza (me@bartolkaruza.com) */
 	public interface Callbacks {
-		void exit();
+		void exit ();
 	}
-	
+
 	static {
-      GdxNativesLoader.load();
-  }
-
-  protected AndroidGraphics graphics;
-  protected AndroidInput input;
-  protected AndroidAudio audio;
-  protected AndroidFiles files;
-  protected AndroidNet net;
-  protected ApplicationListener listener;
-  public Handler handler;
-  protected boolean firstResume = true;
-  protected final Array<Runnable> runnables = new Array<Runnable>();
-  protected final Array<Runnable> executedRunnables = new Array<Runnable>();
-  protected final Array<LifecycleListener> lifecycleListeners = new Array<LifecycleListener>();
-  protected int logLevel = LOG_INFO;
-  
-  protected Callbacks callbacks;
-  
-  @Override
+		GdxNativesLoader.load();
+	}
+
+	protected AndroidGraphics graphics;
+	protected AndroidInput input;
+	protected AndroidAudio audio;
+	protected AndroidFiles files;
+	protected AndroidNet net;
+	protected ApplicationListener listener;
+	public Handler handler;
+	protected boolean firstResume = true;
+	protected final Array<Runnable> runnables = new Array<Runnable>();
+	protected final Array<Runnable> executedRunnables = new Array<Runnable>();
+	protected final Array<LifecycleListener> lifecycleListeners = new Array<LifecycleListener>();
+	protected int logLevel = LOG_INFO;
+
+	protected Callbacks callbacks;
+
+	@Override
 	public void onAttach (Activity activity) {
-		if(activity instanceof Callbacks) {
+		if (activity instanceof Callbacks) {
 			this.callbacks = (Callbacks)activity;
-		} else if(getParentFragment() instanceof Callbacks) {
+		} else if (getParentFragment() instanceof Callbacks) {
 			this.callbacks = (Callbacks)getParentFragment();
 		} else if (getTargetFragment() instanceof Callbacks) {
 			this.callbacks = (Callbacks)getTargetFragment();
 		} else {
-			throw new RuntimeException("Missing AndroidFragmentApplication.Callbacks. Please implement AndroidFragmentApplication.Callbacks on the parent activity, fragment or target fragment.");
+			throw new RuntimeException(
+				"Missing AndroidFragmentApplication.Callbacks. Please implement AndroidFragmentApplication.Callbacks on the parent activity, fragment or target fragment.");
 		}
 		super.onAttach(activity);
 	}
-  
-  @Override
+
+	@Override
 	public void onDetach () {
 		super.onDetach();
 		this.callbacks = null;
 	}
 
-  protected FrameLayout.LayoutParams createLayoutParams () {
-      FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT, android.view.ViewGroup.LayoutParams.MATCH_PARENT);
-      layoutParams.gravity = Gravity.CENTER;
-      return layoutParams;
-  }
+	protected FrameLayout.LayoutParams createLayoutParams () {
+		FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT,
+			android.view.ViewGroup.LayoutParams.MATCH_PARENT);
+		layoutParams.gravity = Gravity.CENTER;
+		return layoutParams;
+	}
+
+	protected void createWakeLock (boolean use) {
+		if (use) {
+			getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		}
+	}
 
-  protected void createWakeLock (boolean use) {
-      if (use) {
-          getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-      }
-  }
-  
-   @Override
+	@Override
 	public void useImmersiveMode (boolean use) {
 		if (!use || getVersion() < 19) return;
 
 		View view = getApplicationWindow().getDecorView();
-		
+
 		try {
 			Method m = View.class.getMethod("setSystemUiVisibility", int.class);
 			int code = View.SYSTEM_UI_FLAG_LAYOUT_STABLE;
@@ -121,54 +116,52 @@ public class AndroidFragmentApplication extends Fragment implements AndroidAppli
 			log("AndroidApplication", "Can't set immersive mode", e);
 		}
 	}
-	
-  /** This method has to be called in the {@link Fragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)} method. 
-   * It sets up all the things necessary to get input, render via OpenGL and so on. If useGL20IfAvailable is set the AndroidApplication will try to 
-   * create an OpenGL ES 2.0 context which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be
-   * used when OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the
-   * {@link Graphics#isGL20Available()} method. Uses a default {@link AndroidApplicationConfiguration}.
-   * <p/>
-   * Note: you have to return the returned view from the {@link Fragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)}!
-   *
-   * @param listener the {@link ApplicationListener} implementing the program logic
-   * @param useGL2IfAvailable whether to use OpenGL ES 2.0 if its available.
-   * @return the GLSurfaceView of the application */
-  public View initializeForView (ApplicationListener listener) {
-      AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
-      return initializeForView(listener, config);
-  }
-
-  /** This method has to be called in the {@link Fragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)} method. 
-   * It sets up all the things necessary to get input, render via OpenGL and so on. If config.useGL20 is set the AndroidApplication will try to create 
-   * an OpenGL ES 2.0 context which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be
-   * used when OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the
-   * {@link Graphics#isGL20Available()} method. You can configure other aspects of the application with the rest of the fields in
-   * the {@link AndroidApplicationConfiguration} instance.
-   * <p/>
-   * Note: you have to return the returned view from {@link Fragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)}}
-   *
-   * @param listener the {@link ApplicationListener} implementing the program logic
-   * @param config the {@link AndroidApplicationConfiguration}, defining various settings of the application (use accelerometer,
-   *           etc.).
-   * @return the GLSurfaceView of the application */
-  public View initializeForView (ApplicationListener listener, AndroidApplicationConfiguration config) {
-      graphics = new AndroidGraphics(this, config, config.resolutionStrategy == null ? new FillResolutionStrategy(): config.resolutionStrategy);
-      input = AndroidInputFactory.newAndroidInput(this, getActivity(), graphics.view, config);
-      audio = new AndroidAudio(getActivity(), config);
-      files = new AndroidFiles(getResources().getAssets(), getActivity().getFilesDir().getAbsolutePath());
-      net = new AndroidNet(this);
-      this.listener = listener;
-      this.handler = new Handler();
-      
-      Gdx.app = this;
-      Gdx.input = this.getInput();
-      Gdx.audio = this.getAudio();
-      Gdx.files = this.getFiles();
-      Gdx.graphics = this.getGraphics();
-      Gdx.net = this.getNet();
-      createWakeLock(config.useWakelock);
-      useImmersiveMode(config.useImmersiveMode);
-      if (config.useImmersiveMode && getVersion() >= 19) {
+
+	/** This method has to be called in the
+	 * {@link Fragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)} method. It sets up all
+	 * the things necessary to get input, render via OpenGL and so on. Uses a default {@link AndroidApplicationConfiguration}.
+	 * <p/>
+	 * Note: you have to return the returned view from the
+	 * {@link Fragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)}!
+	 * 
+	 * @param listener the {@link ApplicationListener} implementing the program logic
+	 * @return the GLSurfaceView of the application */
+	public View initializeForView (ApplicationListener listener) {
+		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
+		return initializeForView(listener, config);
+	}
+
+	/** This method has to be called in the
+	 * {@link Fragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)} method. It sets up all
+	 * the things necessary to get input, render via OpenGL and so on. You can configure other aspects of the application with the
+	 * rest of the fields in the {@link AndroidApplicationConfiguration} instance.
+	 * <p/>
+	 * Note: you have to return the returned view from
+	 * {@link Fragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)}
+	 * 
+	 * @param listener the {@link ApplicationListener} implementing the program logic
+	 * @param config the {@link AndroidApplicationConfiguration}, defining various settings of the application (use accelerometer,
+	 *           etc.).
+	 * @return the GLSurfaceView of the application */
+	public View initializeForView (ApplicationListener listener, AndroidApplicationConfiguration config) {
+		graphics = new AndroidGraphics(this, config, config.resolutionStrategy == null ? new FillResolutionStrategy()
+			: config.resolutionStrategy);
+		input = AndroidInputFactory.newAndroidInput(this, getActivity(), graphics.view, config);
+		audio = new AndroidAudio(getActivity(), config);
+		files = new AndroidFiles(getResources().getAssets(), getActivity().getFilesDir().getAbsolutePath());
+		net = new AndroidNet(this);
+		this.listener = listener;
+		this.handler = new Handler();
+
+		Gdx.app = this;
+		Gdx.input = this.getInput();
+		Gdx.audio = this.getAudio();
+		Gdx.files = this.getFiles();
+		Gdx.graphics = this.getGraphics();
+		Gdx.net = this.getNet();
+		createWakeLock(config.useWakelock);
+		useImmersiveMode(config.useImmersiveMode);
+		if (config.useImmersiveMode && getVersion() >= 19) {
 			try {
 				Class vlistener = Class.forName("com.badlogic.gdx.backends.android.AndroidVisibilityListener");
 				Object o = vlistener.newInstance();
@@ -178,223 +171,221 @@ public class AndroidFragmentApplication extends Fragment implements AndroidAppli
 				log("AndroidApplication", "Failed to create AndroidVisibilityListener", e);
 			}
 		}
-      return graphics.getView();
-  }
-
-  @Override
-  public void onPause () {
-      boolean isContinuous = graphics.isContinuousRendering();
-      graphics.setContinuousRendering(true);
-      graphics.pause();
-
-      input.unregisterSensorListeners();
-
-      int[] realId = input.realId;
-      // erase pointer ids. this sucks donkeyballs...
-      Arrays.fill(realId, -1);
-      boolean[] touched = input.touched;
-      // erase touched state. this also sucks donkeyballs...
-      Arrays.fill(touched, false);
-
-      if (getActivity().isFinishing()) {
-          graphics.clearManagedCaches();
-          graphics.destroy();
-      }
-      graphics.setContinuousRendering(isContinuous);
-
-      if (graphics != null && graphics.view != null) {
-          if (graphics.view instanceof android.opengl.GLSurfaceView) ((android.opengl.GLSurfaceView)graphics.view).onPause();
-      }
-
-      super.onPause();
-  }
-
-  @Override
-  public void onResume () {
-      Gdx.app = this;
-      Gdx.input = this.getInput();
-      Gdx.audio = this.getAudio();
-      Gdx.files = this.getFiles();
-      Gdx.graphics = this.getGraphics();
-      Gdx.net = this.getNet();
-
-      ((AndroidInput)getInput()).registerSensorListeners();
-
-      if (graphics != null && graphics.view != null) {
-          if (graphics.view instanceof android.opengl.GLSurfaceView) ((android.opengl.GLSurfaceView)graphics.view).onResume();
-      }
-
-      if (!firstResume) {
-          graphics.resume();
-      } else
-          firstResume = false;
-      super.onResume();
-  }
-
-  @Override
-  public void onDestroy () {
-      super.onDestroy();
-  }
-
-  @Override
-  public ApplicationListener getApplicationListener () {
-      return listener;
-  }
-
-  @Override
-  public Audio getAudio () {
-      return audio;
-  }
-
-  @Override
-  public Files getFiles () {
-      return files;
-  }
-
-  @Override
-  public Graphics getGraphics () {
-      return graphics;
-  }
-
-  @Override
-  public Input getInput () {
-      return input;
-  }
-
-  @Override
-  public Net getNet () {
-      return net;
-  }
-
-  @Override
-  public ApplicationType getType () {
-      return ApplicationType.Android;
-  }
-
-  @Override
-  public int getVersion () {
-      return android.os.Build.VERSION.SDK_INT;
-  }
-
-  @Override
-  public long getJavaHeap () {
-      return Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
-  }
-
-  @Override
-  public long getNativeHeap () {
-      return Debug.getNativeHeapAllocatedSize();
-  }
-
-  @Override
-  public Preferences getPreferences (String name) {
-      return new AndroidPreferences(getActivity().getSharedPreferences(name, Context.MODE_PRIVATE));
-  }
-
-  AndroidClipboard clipboard;
-
-  @Override
-  public Clipboard getClipboard () {
-      if (clipboard == null) {
-          clipboard = new AndroidClipboard(getActivity());
-      }
-      return clipboard;
-  }
-
-  @Override
-  public void postRunnable (Runnable runnable) {
-      synchronized (runnables) {
-          runnables.add(runnable);
-          Gdx.graphics.requestRendering();
-      }
-  }
-
-  @Override
-  public void onConfigurationChanged (Configuration config) {
-      super.onConfigurationChanged(config);
-      boolean keyboardAvailable = false;
-      if (config.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) keyboardAvailable = true;
-      input.keyboardAvailable = keyboardAvailable;
-  }
-
-  @Override
-  public void exit () {
-      handler.post(new Runnable() {
-          @Override
-          public void run () {
-              callbacks.exit();
-          }
-      });
-  }
-
-  @Override
-  public void debug (String tag, String message) {
-      if (logLevel >= LOG_DEBUG) {
-          Log.d(tag, message);
-      }
-  }
-
-  @Override
-  public void debug (String tag, String message, Throwable exception) {
-      if (logLevel >= LOG_DEBUG) {
-          Log.d(tag, message, exception);
-      }
-  }
-
-  @Override
-  public void log (String tag, String message) {
-      if (logLevel >= LOG_INFO) Log.i(tag, message);
-  }
-
-  @Override
-  public void log (String tag, String message, Throwable exception) {
-      if (logLevel >= LOG_INFO) Log.i(tag, message, exception);
-  }
-
-  @Override
-  public void error (String tag, String message) {
-      if (logLevel >= LOG_ERROR) Log.e(tag, message);
-  }
-
-  @Override
-  public void error (String tag, String message, Throwable exception) {
-      if (logLevel >= LOG_ERROR) Log.e(tag, message, exception);
-  }
-
-  @Override
-  public void setLogLevel (int logLevel) {
-      this.logLevel = logLevel;
-  }
-
-  @Override
-  public int getLogLevel () {
-      return logLevel;
-  }
-
-  @Override
-  public void addLifecycleListener (LifecycleListener listener) {
-      synchronized (lifecycleListeners) {
-          lifecycleListeners.add(listener);
-      }
-  }
-
-  @Override
-  public void removeLifecycleListener (LifecycleListener listener) {
-      synchronized (lifecycleListeners) {
-          lifecycleListeners.removeValue(listener, true);
-      }
-  }
+		return graphics.getView();
+	}
+
+	@Override
+	public void onPause () {
+		boolean isContinuous = graphics.isContinuousRendering();
+		graphics.setContinuousRendering(true);
+		graphics.pause();
+
+		input.unregisterSensorListeners();
+
+		int[] realId = input.realId;
+		// erase pointer ids. this sucks donkeyballs...
+		Arrays.fill(realId, -1);
+		boolean[] touched = input.touched;
+		// erase touched state. this also sucks donkeyballs...
+		Arrays.fill(touched, false);
+
+		graphics.setContinuousRendering(isContinuous);
+
+		if (graphics != null && graphics.view != null) {
+			if (graphics.view instanceof android.opengl.GLSurfaceView) ((android.opengl.GLSurfaceView)graphics.view).onPause();
+		}
+
+		super.onPause();
+	}
+
+	@Override
+	public void onResume () {
+		Gdx.app = this;
+		Gdx.input = this.getInput();
+		Gdx.audio = this.getAudio();
+		Gdx.files = this.getFiles();
+		Gdx.graphics = this.getGraphics();
+		Gdx.net = this.getNet();
+
+		((AndroidInput)getInput()).registerSensorListeners();
+
+		if (graphics != null && graphics.view != null) {
+			if (graphics.view instanceof android.opengl.GLSurfaceView) ((android.opengl.GLSurfaceView)graphics.view).onResume();
+		}
+
+		if (!firstResume) {
+			graphics.resume();
+		} else
+			firstResume = false;
+		super.onResume();
+	}
+
+	@Override
+	public void onDestroyView () {
+		super.onDestroyView();
+		graphics.clearManagedCaches();
+		graphics.destroy();
+	}
+
+	@Override
+	public ApplicationListener getApplicationListener () {
+		return listener;
+	}
+
+	@Override
+	public Audio getAudio () {
+		return audio;
+	}
+
+	@Override
+	public Files getFiles () {
+		return files;
+	}
+
+	@Override
+	public Graphics getGraphics () {
+		return graphics;
+	}
+
+	@Override
+	public Input getInput () {
+		return input;
+	}
+
+	@Override
+	public Net getNet () {
+		return net;
+	}
+
+	@Override
+	public ApplicationType getType () {
+		return ApplicationType.Android;
+	}
+
+	@Override
+	public int getVersion () {
+		return android.os.Build.VERSION.SDK_INT;
+	}
+
+	@Override
+	public long getJavaHeap () {
+		return Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
+	}
+
+	@Override
+	public long getNativeHeap () {
+		return Debug.getNativeHeapAllocatedSize();
+	}
+
+	@Override
+	public Preferences getPreferences (String name) {
+		return new AndroidPreferences(getActivity().getSharedPreferences(name, Context.MODE_PRIVATE));
+	}
+
+	AndroidClipboard clipboard;
+
+	@Override
+	public Clipboard getClipboard () {
+		if (clipboard == null) {
+			clipboard = new AndroidClipboard(getActivity());
+		}
+		return clipboard;
+	}
+
+	@Override
+	public void postRunnable (Runnable runnable) {
+		synchronized (runnables) {
+			runnables.add(runnable);
+			Gdx.graphics.requestRendering();
+		}
+	}
+
+	@Override
+	public void onConfigurationChanged (Configuration config) {
+		super.onConfigurationChanged(config);
+		boolean keyboardAvailable = false;
+		if (config.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) keyboardAvailable = true;
+		input.keyboardAvailable = keyboardAvailable;
+	}
+
+	@Override
+	public void exit () {
+		handler.post(new Runnable() {
+			@Override
+			public void run () {
+				callbacks.exit();
+			}
+		});
+	}
+
+	@Override
+	public void debug (String tag, String message) {
+		if (logLevel >= LOG_DEBUG) {
+			Log.d(tag, message);
+		}
+	}
+
+	@Override
+	public void debug (String tag, String message, Throwable exception) {
+		if (logLevel >= LOG_DEBUG) {
+			Log.d(tag, message, exception);
+		}
+	}
+
+	@Override
+	public void log (String tag, String message) {
+		if (logLevel >= LOG_INFO) Log.i(tag, message);
+	}
+
+	@Override
+	public void log (String tag, String message, Throwable exception) {
+		if (logLevel >= LOG_INFO) Log.i(tag, message, exception);
+	}
+
+	@Override
+	public void error (String tag, String message) {
+		if (logLevel >= LOG_ERROR) Log.e(tag, message);
+	}
+
+	@Override
+	public void error (String tag, String message, Throwable exception) {
+		if (logLevel >= LOG_ERROR) Log.e(tag, message, exception);
+	}
+
+	@Override
+	public void setLogLevel (int logLevel) {
+		this.logLevel = logLevel;
+	}
+
+	@Override
+	public int getLogLevel () {
+		return logLevel;
+	}
+
+	@Override
+	public void addLifecycleListener (LifecycleListener listener) {
+		synchronized (lifecycleListeners) {
+			lifecycleListeners.add(listener);
+		}
+	}
+
+	@Override
+	public void removeLifecycleListener (LifecycleListener listener) {
+		synchronized (lifecycleListeners) {
+			lifecycleListeners.removeValue(listener, true);
+		}
+	}
 
 	@Override
 	public Context getContext () {
 		return getActivity();
 	}
-	
+
 	@Override
 	public Array<Runnable> getRunnables () {
 		return runnables;
 	}
-	
+
 	@Override
 	public Array<Runnable> getExecutedRunnables () {
 		return executedRunnables;
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGL30.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGL30.java
index e64c72e..2726243 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGL30.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGL30.java
@@ -1,3 +1,4 @@
+
 package com.badlogic.gdx.backends.android;
 
 import android.opengl.GLES30;
@@ -6,802 +7,832 @@ import com.badlogic.gdx.graphics.GL30;
 
 public class AndroidGL30 extends AndroidGL20 implements GL30 {
 	@Override
-	public void glReadBuffer(int mode) {
+	public void glReadBuffer (int mode) {
 		GLES30.glReadBuffer(mode);
 	}
 
 	@Override
-	public void glDrawRangeElements(int mode, int start, int end, int count, int type, java.nio.Buffer indices) {
+	public void glDrawRangeElements (int mode, int start, int end, int count, int type, java.nio.Buffer indices) {
 		GLES30.glDrawRangeElements(mode, start, end, count, type, indices);
 	}
 
 	@Override
-	public void glDrawRangeElements(int mode, int start, int end, int count, int type, int offset) {
+	public void glDrawRangeElements (int mode, int start, int end, int count, int type, int offset) {
 		GLES30.glDrawRangeElements(mode, start, end, count, type, offset);
 	}
 
 	@Override
-	public void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, java.nio.Buffer pixels) {
+	public void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format,
+		int type, java.nio.Buffer pixels) {
 		GLES30.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
 	}
 
 	@Override
-	public void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int offset) {
+	public void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format,
+		int type, int offset) {
 		GLES30.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, offset);
 	}
 
 	@Override
-	public void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, java.nio.Buffer pixels) {
+	public void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth,
+		int format, int type, java.nio.Buffer pixels) {
 		GLES30.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
 	}
 
 	@Override
-	public void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int offset) {
+	public void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth,
+		int format, int type, int offset) {
 		GLES30.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, offset);
 	}
 
 	@Override
-	public void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
+	public void glCopyTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width,
+		int height) {
 		GLES30.glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
 	}
+
 //
-//	@Override
-//	public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, java.nio.Buffer data) {
-//		GLES30.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
-//	}
+// @Override
+// public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int
+// imageSize, java.nio.Buffer data) {
+// GLES30.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
+// }
 //
-//	@Override
-//	public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int offset) {
-//		GLES30.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, offset);
-//	}
+// @Override
+// public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int
+// imageSize, int offset) {
+// GLES30.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, offset);
+// }
 //
-//	@Override
-//	public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, java.nio.Buffer data) {
-//		GLES30.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
-//	}
+// @Override
+// public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int
+// depth, int format, int imageSize, java.nio.Buffer data) {
+// GLES30.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
+// }
 //
-//	@Override
-//	public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int offset) {
-//		GLES30.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, offset);
-//	}
+// @Override
+// public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int
+// depth, int format, int imageSize, int offset) {
+// GLES30.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, offset);
+// }
 
 	@Override
-	public void glGenQueries(int n, int[] ids, int offset) {
+	public void glGenQueries (int n, int[] ids, int offset) {
 		GLES30.glGenQueries(n, ids, offset);
 	}
 
 	@Override
-	public void glGenQueries(int n, java.nio.IntBuffer ids) {
+	public void glGenQueries (int n, java.nio.IntBuffer ids) {
 		GLES30.glGenQueries(n, ids);
 	}
 
 	@Override
-	public void glDeleteQueries(int n, int[] ids, int offset) {
+	public void glDeleteQueries (int n, int[] ids, int offset) {
 		GLES30.glDeleteQueries(n, ids, offset);
 	}
 
 	@Override
-	public void glDeleteQueries(int n, java.nio.IntBuffer ids) {
+	public void glDeleteQueries (int n, java.nio.IntBuffer ids) {
 		GLES30.glDeleteQueries(n, ids);
 	}
 
 	@Override
-	public boolean glIsQuery(int id) {
+	public boolean glIsQuery (int id) {
 		return GLES30.glIsQuery(id);
 	}
 
 	@Override
-	public void glBeginQuery(int target, int id) {
+	public void glBeginQuery (int target, int id) {
 		GLES30.glBeginQuery(target, id);
 	}
 
 	@Override
-	public void glEndQuery(int target) {
+	public void glEndQuery (int target) {
 		GLES30.glEndQuery(target);
 	}
 
-//	@Override
-//	public void glGetQueryiv(int target, int pname, int[] params, int offset) {
-//		GLES30.glGetQueryiv(target, pname, params, offset);
-//	}
+// @Override
+// public void glGetQueryiv(int target, int pname, int[] params, int offset) {
+// GLES30.glGetQueryiv(target, pname, params, offset);
+// }
 
 	@Override
-	public void glGetQueryiv(int target, int pname, java.nio.IntBuffer params) {
+	public void glGetQueryiv (int target, int pname, java.nio.IntBuffer params) {
 		GLES30.glGetQueryiv(target, pname, params);
 	}
 
-//	@Override
-//	public void glGetQueryObjectuiv(int id, int pname, int[] params, int offset) {
-//		GLES30.glGetQueryObjectuiv(id, pname, params, offset);
-//	}
+// @Override
+// public void glGetQueryObjectuiv(int id, int pname, int[] params, int offset) {
+// GLES30.glGetQueryObjectuiv(id, pname, params, offset);
+// }
 
 	@Override
-	public void glGetQueryObjectuiv(int id, int pname, java.nio.IntBuffer params) {
+	public void glGetQueryObjectuiv (int id, int pname, java.nio.IntBuffer params) {
 		GLES30.glGetQueryObjectuiv(id, pname, params);
 	}
 
 	@Override
-	public boolean glUnmapBuffer(int target) {
+	public boolean glUnmapBuffer (int target) {
 		return GLES30.glUnmapBuffer(target);
 	}
 
 	@Override
-	public java.nio.Buffer glGetBufferPointerv(int target, int pname) {
+	public java.nio.Buffer glGetBufferPointerv (int target, int pname) {
 		return GLES30.glGetBufferPointerv(target, pname);
 	}
 
-//	@Override
-//	public void glDrawBuffers(int n, int[] bufs, int offset) {
-//		GLES30.glDrawBuffers(n, bufs, offset);
-//	}
+// @Override
+// public void glDrawBuffers(int n, int[] bufs, int offset) {
+// GLES30.glDrawBuffers(n, bufs, offset);
+// }
 
 	@Override
-	public void glDrawBuffers(int n, java.nio.IntBuffer bufs) {
+	public void glDrawBuffers (int n, java.nio.IntBuffer bufs) {
 		GLES30.glDrawBuffers(n, bufs);
 	}
 
-//	@Override
-//	public void glUniformMatrix2x3fv(int location, int count, boolean transpose, float[] value, int offset) {
-//		GLES30.glUniformMatrix2x3fv(location, count, transpose, value, offset);
-//	}
+// @Override
+// public void glUniformMatrix2x3fv(int location, int count, boolean transpose, float[] value, int offset) {
+// GLES30.glUniformMatrix2x3fv(location, count, transpose, value, offset);
+// }
 
 	@Override
-	public void glUniformMatrix2x3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value) {
+	public void glUniformMatrix2x3fv (int location, int count, boolean transpose, java.nio.FloatBuffer value) {
 		GLES30.glUniformMatrix2x3fv(location, count, transpose, value);
 	}
 
-//	@Override
-//	public void glUniformMatrix3x2fv(int location, int count, boolean transpose, float[] value, int offset) {
-//		GLES30.glUniformMatrix3x2fv(location, count, transpose, value, offset);
-//	}
+// @Override
+// public void glUniformMatrix3x2fv(int location, int count, boolean transpose, float[] value, int offset) {
+// GLES30.glUniformMatrix3x2fv(location, count, transpose, value, offset);
+// }
 
 	@Override
-	public void glUniformMatrix3x2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value) {
+	public void glUniformMatrix3x2fv (int location, int count, boolean transpose, java.nio.FloatBuffer value) {
 		GLES30.glUniformMatrix3x2fv(location, count, transpose, value);
 	}
 
-//	@Override
-//	public void glUniformMatrix2x4fv(int location, int count, boolean transpose, float[] value, int offset) {
-//		GLES30.glUniformMatrix2x4fv(location, count, transpose, value, offset);
-//	}
+// @Override
+// public void glUniformMatrix2x4fv(int location, int count, boolean transpose, float[] value, int offset) {
+// GLES30.glUniformMatrix2x4fv(location, count, transpose, value, offset);
+// }
 
 	@Override
-	public void glUniformMatrix2x4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value) {
+	public void glUniformMatrix2x4fv (int location, int count, boolean transpose, java.nio.FloatBuffer value) {
 		GLES30.glUniformMatrix2x4fv(location, count, transpose, value);
 	}
 
-//	@Override
-//	public void glUniformMatrix4x2fv(int location, int count, boolean transpose, float[] value, int offset) {
-//		GLES30.glUniformMatrix4x2fv(location, count, transpose, value, offset);
-//	}
+// @Override
+// public void glUniformMatrix4x2fv(int location, int count, boolean transpose, float[] value, int offset) {
+// GLES30.glUniformMatrix4x2fv(location, count, transpose, value, offset);
+// }
 
 	@Override
-	public void glUniformMatrix4x2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value) {
+	public void glUniformMatrix4x2fv (int location, int count, boolean transpose, java.nio.FloatBuffer value) {
 		GLES30.glUniformMatrix4x2fv(location, count, transpose, value);
 	}
 
-//	@Override
-//	public void glUniformMatrix3x4fv(int location, int count, boolean transpose, float[] value, int offset) {
-//		GLES30.glUniformMatrix3x4fv(location, count, transpose, value, offset);
-//	}
+// @Override
+// public void glUniformMatrix3x4fv(int location, int count, boolean transpose, float[] value, int offset) {
+// GLES30.glUniformMatrix3x4fv(location, count, transpose, value, offset);
+// }
 
 	@Override
-	public void glUniformMatrix3x4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value) {
+	public void glUniformMatrix3x4fv (int location, int count, boolean transpose, java.nio.FloatBuffer value) {
 		GLES30.glUniformMatrix3x4fv(location, count, transpose, value);
 	}
 
-//	@Override
-//	public void glUniformMatrix4x3fv(int location, int count, boolean transpose, float[] value, int offset) {
-//		GLES30.glUniformMatrix4x3fv(location, count, transpose, value, offset);
-//	}
+// @Override
+// public void glUniformMatrix4x3fv(int location, int count, boolean transpose, float[] value, int offset) {
+// GLES30.glUniformMatrix4x3fv(location, count, transpose, value, offset);
+// }
 
 	@Override
-	public void glUniformMatrix4x3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value) {
+	public void glUniformMatrix4x3fv (int location, int count, boolean transpose, java.nio.FloatBuffer value) {
 		GLES30.glUniformMatrix4x3fv(location, count, transpose, value);
 	}
 
 	@Override
-	public void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
+	public void glBlitFramebuffer (int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1,
+		int mask, int filter) {
 		GLES30.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
 	}
 
 	@Override
-	public void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height) {
+	public void glRenderbufferStorageMultisample (int target, int samples, int internalformat, int width, int height) {
 		GLES30.glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
 	}
 
 	@Override
-	public void glFramebufferTextureLayer(int target, int attachment, int texture, int level, int layer) {
+	public void glFramebufferTextureLayer (int target, int attachment, int texture, int level, int layer) {
 		GLES30.glFramebufferTextureLayer(target, attachment, texture, level, layer);
 	}
 
-//	@Override
-//	public java.nio.Buffer glMapBufferRange(int target, int offset, int length, int access) {
-//		return GLES30.glMapBufferRange(target, offset, length, access);
-//	}
+// @Override
+// public java.nio.Buffer glMapBufferRange(int target, int offset, int length, int access) {
+// return GLES30.glMapBufferRange(target, offset, length, access);
+// }
 
 	@Override
-	public void glFlushMappedBufferRange(int target, int offset, int length) {
+	public void glFlushMappedBufferRange (int target, int offset, int length) {
 		GLES30.glFlushMappedBufferRange(target, offset, length);
 	}
 
 	@Override
-	public void glBindVertexArray(int array) {
+	public void glBindVertexArray (int array) {
 		GLES30.glBindVertexArray(array);
 	}
 
 	@Override
-	public void glDeleteVertexArrays(int n, int[] arrays, int offset) {
+	public void glDeleteVertexArrays (int n, int[] arrays, int offset) {
 		GLES30.glDeleteVertexArrays(n, arrays, offset);
 	}
 
 	@Override
-	public void glDeleteVertexArrays(int n, java.nio.IntBuffer arrays) {
+	public void glDeleteVertexArrays (int n, java.nio.IntBuffer arrays) {
 		GLES30.glDeleteVertexArrays(n, arrays);
 	}
 
 	@Override
-	public void glGenVertexArrays(int n, int[] arrays, int offset) {
+	public void glGenVertexArrays (int n, int[] arrays, int offset) {
 		GLES30.glGenVertexArrays(n, arrays, offset);
 	}
 
 	@Override
-	public void glGenVertexArrays(int n, java.nio.IntBuffer arrays) {
+	public void glGenVertexArrays (int n, java.nio.IntBuffer arrays) {
 		GLES30.glGenVertexArrays(n, arrays);
 	}
 
 	@Override
-	public boolean glIsVertexArray(int array) {
+	public boolean glIsVertexArray (int array) {
 		return GLES30.glIsVertexArray(array);
 	}
 
-//	@Override
-//	public void glGetIntegeri_v(int target, int index, int[] data, int offset) {
-//		GLES30.glGetIntegeri_v(target, index, data, offset);
-//	}
+// @Override
+// public void glGetIntegeri_v(int target, int index, int[] data, int offset) {
+// GLES30.glGetIntegeri_v(target, index, data, offset);
+// }
 
-//	@Override
-//	public void glGetIntegeri_v(int target, int index, java.nio.IntBuffer data) {
-//		GLES30.glGetIntegeri_v(target, index, data);
-//	}
+// @Override
+// public void glGetIntegeri_v(int target, int index, java.nio.IntBuffer data) {
+// GLES30.glGetIntegeri_v(target, index, data);
+// }
 
 	@Override
-	public void glBeginTransformFeedback(int primitiveMode) {
+	public void glBeginTransformFeedback (int primitiveMode) {
 		GLES30.glBeginTransformFeedback(primitiveMode);
 	}
 
 	@Override
-	public void glEndTransformFeedback() {
+	public void glEndTransformFeedback () {
 		GLES30.glEndTransformFeedback();
 	}
 
 	@Override
-	public void glBindBufferRange(int target, int index, int buffer, int offset, int size) {
+	public void glBindBufferRange (int target, int index, int buffer, int offset, int size) {
 		GLES30.glBindBufferRange(target, index, buffer, offset, size);
 	}
 
 	@Override
-	public void glBindBufferBase(int target, int index, int buffer) {
+	public void glBindBufferBase (int target, int index, int buffer) {
 		GLES30.glBindBufferBase(target, index, buffer);
 	}
 
 	@Override
-	public void glTransformFeedbackVaryings(int program, String[] varyings, int bufferMode) {
+	public void glTransformFeedbackVaryings (int program, String[] varyings, int bufferMode) {
 		GLES30.glTransformFeedbackVaryings(program, varyings, bufferMode);
 	}
 
-//	@Override
-//	public void glGetTransformFeedbackVarying(int program, int index, int bufsize, int[] length, int lengthOffset, int[] size, int sizeOffset, int[] type, int typeOffset, byte[] name, int nameOffset) {
-//		GLES30.glGetTransformFeedbackVarying(program, index, bufsize, length, lengthOffset, size, sizeOffset, type, typeOffset, name, nameOffset);
-//	}
+// @Override
+// public void glGetTransformFeedbackVarying(int program, int index, int bufsize, int[] length, int lengthOffset, int[] size, int
+// sizeOffset, int[] type, int typeOffset, byte[] name, int nameOffset) {
+// GLES30.glGetTransformFeedbackVarying(program, index, bufsize, length, lengthOffset, size, sizeOffset, type, typeOffset, name,
+// nameOffset);
+// }
 
-//	@Override
-//	public void glGetTransformFeedbackVarying(int program, int index, int bufsize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, byte name) {
-//		GLES30.glGetTransformFeedbackVarying(program, index, bufsize, length, size, type, name);
-//	}
+// @Override
+// public void glGetTransformFeedbackVarying(int program, int index, int bufsize, java.nio.IntBuffer length, java.nio.IntBuffer
+// size, java.nio.IntBuffer type, byte name) {
+// GLES30.glGetTransformFeedbackVarying(program, index, bufsize, length, size, type, name);
+// }
 //
-//	@Override
-//	public String glGetTransformFeedbackVarying(int program, int index, int[] size, int sizeOffset, int[] type, int typeOffset) {
-//		return GLES30.glGetTransformFeedbackVarying(program, index, size, sizeOffset, type, typeOffset);
-//	}
+// @Override
+// public String glGetTransformFeedbackVarying(int program, int index, int[] size, int sizeOffset, int[] type, int typeOffset) {
+// return GLES30.glGetTransformFeedbackVarying(program, index, size, sizeOffset, type, typeOffset);
+// }
 //
-//	@Override
-//	public String glGetTransformFeedbackVarying(int program, int index, java.nio.IntBuffer size, java.nio.IntBuffer type) {
-//		return GLES30.glGetTransformFeedbackVarying(program, index, size, type);
-//	}
+// @Override
+// public String glGetTransformFeedbackVarying(int program, int index, java.nio.IntBuffer size, java.nio.IntBuffer type) {
+// return GLES30.glGetTransformFeedbackVarying(program, index, size, type);
+// }
 
 	@Override
-	public void glVertexAttribIPointer(int index, int size, int type, int stride, int offset) {
+	public void glVertexAttribIPointer (int index, int size, int type, int stride, int offset) {
 		GLES30.glVertexAttribIPointer(index, size, type, stride, offset);
 	}
 
-//	@Override
-//	public void glGetVertexAttribIiv(int index, int pname, int[] params, int offset) {
-//		GLES30.glGetVertexAttribIiv(index, pname, params, offset);
-//	}
+// @Override
+// public void glGetVertexAttribIiv(int index, int pname, int[] params, int offset) {
+// GLES30.glGetVertexAttribIiv(index, pname, params, offset);
+// }
 
 	@Override
-	public void glGetVertexAttribIiv(int index, int pname, java.nio.IntBuffer params) {
+	public void glGetVertexAttribIiv (int index, int pname, java.nio.IntBuffer params) {
 		GLES30.glGetVertexAttribIiv(index, pname, params);
 	}
 
-//	@Override
-//	public void glGetVertexAttribIuiv(int index, int pname, int[] params, int offset) {
-//		GLES30.glGetVertexAttribIuiv(index, pname, params, offset);
-//	}
+// @Override
+// public void glGetVertexAttribIuiv(int index, int pname, int[] params, int offset) {
+// GLES30.glGetVertexAttribIuiv(index, pname, params, offset);
+// }
 
 	@Override
-	public void glGetVertexAttribIuiv(int index, int pname, java.nio.IntBuffer params) {
+	public void glGetVertexAttribIuiv (int index, int pname, java.nio.IntBuffer params) {
 		GLES30.glGetVertexAttribIuiv(index, pname, params);
 	}
 
 	@Override
-	public void glVertexAttribI4i(int index, int x, int y, int z, int w) {
+	public void glVertexAttribI4i (int index, int x, int y, int z, int w) {
 		GLES30.glVertexAttribI4i(index, x, y, z, w);
 	}
 
 	@Override
-	public void glVertexAttribI4ui(int index, int x, int y, int z, int w) {
+	public void glVertexAttribI4ui (int index, int x, int y, int z, int w) {
 		GLES30.glVertexAttribI4ui(index, x, y, z, w);
 	}
 
-//	@Override
-//	public void glVertexAttribI4iv(int index, int[] v, int offset) {
-//		GLES30.glVertexAttribI4iv(index, v, offset);
-//	}
+// @Override
+// public void glVertexAttribI4iv(int index, int[] v, int offset) {
+// GLES30.glVertexAttribI4iv(index, v, offset);
+// }
 //
-//	@Override
-//	public void glVertexAttribI4iv(int index, java.nio.IntBuffer v) {
-//		GLES30.glVertexAttribI4iv(index, v);
-//	}
+// @Override
+// public void glVertexAttribI4iv(int index, java.nio.IntBuffer v) {
+// GLES30.glVertexAttribI4iv(index, v);
+// }
 //
-//	@Override
-//	public void glVertexAttribI4uiv(int index, int[] v, int offset) {
-//		GLES30.glVertexAttribI4uiv(index, v, offset);
-//	}
+// @Override
+// public void glVertexAttribI4uiv(int index, int[] v, int offset) {
+// GLES30.glVertexAttribI4uiv(index, v, offset);
+// }
 //
-//	@Override
-//	public void glVertexAttribI4uiv(int index, java.nio.IntBuffer v) {
-//		GLES30.glVertexAttribI4uiv(index, v);
-//	}
+// @Override
+// public void glVertexAttribI4uiv(int index, java.nio.IntBuffer v) {
+// GLES30.glVertexAttribI4uiv(index, v);
+// }
 //
-//	@Override
-//	public void glGetUniformuiv(int program, int location, int[] params, int offset) {
-//		GLES30.glGetUniformuiv(program, location, params, offset);
-//	}
+// @Override
+// public void glGetUniformuiv(int program, int location, int[] params, int offset) {
+// GLES30.glGetUniformuiv(program, location, params, offset);
+// }
 
 	@Override
-	public void glGetUniformuiv(int program, int location, java.nio.IntBuffer params) {
+	public void glGetUniformuiv (int program, int location, java.nio.IntBuffer params) {
 		GLES30.glGetUniformuiv(program, location, params);
 	}
 
 	@Override
-	public int glGetFragDataLocation(int program, String name) {
+	public int glGetFragDataLocation (int program, String name) {
 		return GLES30.glGetFragDataLocation(program, name);
 	}
 
-//	@Override
-//	public void glUniform1ui(int location, int v0) {
-//		GLES30.glUniform1ui(location, v0);
-//	}
+// @Override
+// public void glUniform1ui(int location, int v0) {
+// GLES30.glUniform1ui(location, v0);
+// }
 //
-//	@Override
-//	public void glUniform2ui(int location, int v0, int v1) {
-//		GLES30.glUniform2ui(location, v0, v1);
-//	}
+// @Override
+// public void glUniform2ui(int location, int v0, int v1) {
+// GLES30.glUniform2ui(location, v0, v1);
+// }
 //
-//	@Override
-//	public void glUniform3ui(int location, int v0, int v1, int v2) {
-//		GLES30.glUniform3ui(location, v0, v1, v2);
-//	}
+// @Override
+// public void glUniform3ui(int location, int v0, int v1, int v2) {
+// GLES30.glUniform3ui(location, v0, v1, v2);
+// }
 
-//	@Override
-//	public void glUniform4ui(int location, int v0, int v1, int v2, int v3) {
-//		GLES30.glUniform4ui(location, v0, v1, v2, v3);
-//	}
+// @Override
+// public void glUniform4ui(int location, int v0, int v1, int v2, int v3) {
+// GLES30.glUniform4ui(location, v0, v1, v2, v3);
+// }
 //
-//	@Override
-//	public void glUniform1uiv(int location, int count, int[] value, int offset) {
-//		GLES30.glUniform1uiv(location, count, value, offset);
-//	}
+// @Override
+// public void glUniform1uiv(int location, int count, int[] value, int offset) {
+// GLES30.glUniform1uiv(location, count, value, offset);
+// }
 
 	@Override
-	public void glUniform1uiv(int location, int count, java.nio.IntBuffer value) {
+	public void glUniform1uiv (int location, int count, java.nio.IntBuffer value) {
 		GLES30.glUniform1uiv(location, count, value);
 	}
 
-//	@Override
-//	public void glUniform2uiv(int location, int count, int[] value, int offset) {
-//		GLES30.glUniform2uiv(location, count, value, offset);
-//	}
+// @Override
+// public void glUniform2uiv(int location, int count, int[] value, int offset) {
+// GLES30.glUniform2uiv(location, count, value, offset);
+// }
 //
-//	@Override
-//	public void glUniform2uiv(int location, int count, java.nio.IntBuffer value) {
-//		GLES30.glUniform2uiv(location, count, value);
-//	}
+// @Override
+// public void glUniform2uiv(int location, int count, java.nio.IntBuffer value) {
+// GLES30.glUniform2uiv(location, count, value);
+// }
 //
-//	@Override
-//	public void glUniform3uiv(int location, int count, int[] value, int offset) {
-//		GLES30.glUniform3uiv(location, count, value, offset);
-//	}
+// @Override
+// public void glUniform3uiv(int location, int count, int[] value, int offset) {
+// GLES30.glUniform3uiv(location, count, value, offset);
+// }
 
 	@Override
-	public void glUniform3uiv(int location, int count, java.nio.IntBuffer value) {
+	public void glUniform3uiv (int location, int count, java.nio.IntBuffer value) {
 		GLES30.glUniform3uiv(location, count, value);
 	}
 
-//	@Override
-//	public void glUniform4uiv(int location, int count, int[] value, int offset) {
-//		GLES30.glUniform4uiv(location, count, value, offset);
-//	}
+// @Override
+// public void glUniform4uiv(int location, int count, int[] value, int offset) {
+// GLES30.glUniform4uiv(location, count, value, offset);
+// }
 
 	@Override
-	public void glUniform4uiv(int location, int count, java.nio.IntBuffer value) {
+	public void glUniform4uiv (int location, int count, java.nio.IntBuffer value) {
 		GLES30.glUniform4uiv(location, count, value);
 	}
 
-//	@Override
-//	public void glClearBufferiv(int buffer, int drawbuffer, int[] value, int offset) {
-//		GLES30.glClearBufferiv(buffer, drawbuffer, value, offset);
-//	}
+// @Override
+// public void glClearBufferiv(int buffer, int drawbuffer, int[] value, int offset) {
+// GLES30.glClearBufferiv(buffer, drawbuffer, value, offset);
+// }
 
 	@Override
-	public void glClearBufferiv(int buffer, int drawbuffer, java.nio.IntBuffer value) {
+	public void glClearBufferiv (int buffer, int drawbuffer, java.nio.IntBuffer value) {
 		GLES30.glClearBufferiv(buffer, drawbuffer, value);
 	}
 
-//	@Override
-//	public void glClearBufferuiv(int buffer, int drawbuffer, int[] value, int offset) {
-//		GLES30.glClearBufferuiv(buffer, drawbuffer, value, offset);
-//	}
+// @Override
+// public void glClearBufferuiv(int buffer, int drawbuffer, int[] value, int offset) {
+// GLES30.glClearBufferuiv(buffer, drawbuffer, value, offset);
+// }
 
 	@Override
-	public void glClearBufferuiv(int buffer, int drawbuffer, java.nio.IntBuffer value) {
+	public void glClearBufferuiv (int buffer, int drawbuffer, java.nio.IntBuffer value) {
 		GLES30.glClearBufferuiv(buffer, drawbuffer, value);
 	}
+
 //
-//	@Override
-//	public void glClearBufferfv(int buffer, int drawbuffer, float[] value, int offset) {
-//		GLES30.glClearBufferfv(buffer, drawbuffer, value, offset);
-//	}
+// @Override
+// public void glClearBufferfv(int buffer, int drawbuffer, float[] value, int offset) {
+// GLES30.glClearBufferfv(buffer, drawbuffer, value, offset);
+// }
 
 	@Override
-	public void glClearBufferfv(int buffer, int drawbuffer, java.nio.FloatBuffer value) {
+	public void glClearBufferfv (int buffer, int drawbuffer, java.nio.FloatBuffer value) {
 		GLES30.glClearBufferfv(buffer, drawbuffer, value);
 	}
 
 	@Override
-	public void glClearBufferfi(int buffer, int drawbuffer, float depth, int stencil) {
+	public void glClearBufferfi (int buffer, int drawbuffer, float depth, int stencil) {
 		GLES30.glClearBufferfi(buffer, drawbuffer, depth, stencil);
 	}
 
 	@Override
-	public String glGetStringi(int name, int index) {
+	public String glGetStringi (int name, int index) {
 		return GLES30.glGetStringi(name, index);
 	}
 
 	@Override
-	public void glCopyBufferSubData(int readTarget, int writeTarget, int readOffset, int writeOffset, int size) {
+	public void glCopyBufferSubData (int readTarget, int writeTarget, int readOffset, int writeOffset, int size) {
 		GLES30.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
 	}
+
 //
-//	@Override
-//	public void glGetUniformIndices(int program, String[] uniformNames, int[] uniformIndices, int uniformIndicesOffset) {
-//		GLES30.glGetUniformIndices(program, uniformNames, uniformIndices, uniformIndicesOffset);
-//	}
+// @Override
+// public void glGetUniformIndices(int program, String[] uniformNames, int[] uniformIndices, int uniformIndicesOffset) {
+// GLES30.glGetUniformIndices(program, uniformNames, uniformIndices, uniformIndicesOffset);
+// }
 
 	@Override
-	public void glGetUniformIndices(int program, String[] uniformNames, java.nio.IntBuffer uniformIndices) {
+	public void glGetUniformIndices (int program, String[] uniformNames, java.nio.IntBuffer uniformIndices) {
 		GLES30.glGetUniformIndices(program, uniformNames, uniformIndices);
 	}
 
-//	@Override
-//	public void glGetActiveUniformsiv(int program, int uniformCount, int[] uniformIndices, int uniformIndicesOffset, int pname, int[] params, int paramsOffset) {
-//		GLES30.glGetActiveUniformsiv(program, uniformCount, uniformIndices, uniformIndicesOffset, pname, params, paramsOffset);
-//	}
+// @Override
+// public void glGetActiveUniformsiv(int program, int uniformCount, int[] uniformIndices, int uniformIndicesOffset, int pname,
+// int[] params, int paramsOffset) {
+// GLES30.glGetActiveUniformsiv(program, uniformCount, uniformIndices, uniformIndicesOffset, pname, params, paramsOffset);
+// }
 
 	@Override
-	public void glGetActiveUniformsiv(int program, int uniformCount, java.nio.IntBuffer uniformIndices, int pname, java.nio.IntBuffer params) {
+	public void glGetActiveUniformsiv (int program, int uniformCount, java.nio.IntBuffer uniformIndices, int pname,
+		java.nio.IntBuffer params) {
 		GLES30.glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
 	}
 
 	@Override
-	public int glGetUniformBlockIndex(int program, String uniformBlockName) {
+	public int glGetUniformBlockIndex (int program, String uniformBlockName) {
 		return GLES30.glGetUniformBlockIndex(program, uniformBlockName);
 	}
+
 //
-//	@Override
-//	public void glGetActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, int[] params, int offset) {
-//		GLES30.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params, offset);
-//	}
+// @Override
+// public void glGetActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, int[] params, int offset) {
+// GLES30.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params, offset);
+// }
 
 	@Override
-	public void glGetActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, java.nio.IntBuffer params) {
+	public void glGetActiveUniformBlockiv (int program, int uniformBlockIndex, int pname, java.nio.IntBuffer params) {
 		GLES30.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
 	}
+
 //
-//	@Override
-//	public void glGetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, int[] length, int lengthOffset, byte[] uniformBlockName, int uniformBlockNameOffset) {
-//		GLES30.glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, lengthOffset, uniformBlockName, uniformBlockNameOffset);
-//	}
+// @Override
+// public void glGetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, int[] length, int lengthOffset, byte[]
+// uniformBlockName, int uniformBlockNameOffset) {
+// GLES30.glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, lengthOffset, uniformBlockName,
+// uniformBlockNameOffset);
+// }
 
 	@Override
-	public void glGetActiveUniformBlockName(int program, int uniformBlockIndex, java.nio.Buffer length, java.nio.Buffer uniformBlockName) {
+	public void glGetActiveUniformBlockName (int program, int uniformBlockIndex, java.nio.Buffer length,
+		java.nio.Buffer uniformBlockName) {
 		GLES30.glGetActiveUniformBlockName(program, uniformBlockIndex, length, uniformBlockName);
 	}
 
 	@Override
-	public String glGetActiveUniformBlockName(int program, int uniformBlockIndex) {
+	public String glGetActiveUniformBlockName (int program, int uniformBlockIndex) {
 		return GLES30.glGetActiveUniformBlockName(program, uniformBlockIndex);
 	}
 
 	@Override
-	public void glUniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding) {
+	public void glUniformBlockBinding (int program, int uniformBlockIndex, int uniformBlockBinding) {
 		GLES30.glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
 	}
 
 	@Override
-	public void glDrawArraysInstanced(int mode, int first, int count, int instanceCount) {
+	public void glDrawArraysInstanced (int mode, int first, int count, int instanceCount) {
 		GLES30.glDrawArraysInstanced(mode, first, count, instanceCount);
 	}
 
-//	@Override
-//	public void glDrawElementsInstanced(int mode, int count, int type, java.nio.Buffer indices, int instanceCount) {
-//		GLES30.glDrawElementsInstanced(mode, count, type, indices, instanceCount);
-//	}
+// @Override
+// public void glDrawElementsInstanced(int mode, int count, int type, java.nio.Buffer indices, int instanceCount) {
+// GLES30.glDrawElementsInstanced(mode, count, type, indices, instanceCount);
+// }
 
 	@Override
-	public void glDrawElementsInstanced(int mode, int count, int type, int indicesOffset, int instanceCount) {
+	public void glDrawElementsInstanced (int mode, int count, int type, int indicesOffset, int instanceCount) {
 		GLES30.glDrawElementsInstanced(mode, count, type, indicesOffset, instanceCount);
 	}
 
-//	@Override
-//	public long glFenceSync(int condition, int flags) {
-//		return GLES30.glFenceSync(condition, flags);
-//	}
+// @Override
+// public long glFenceSync(int condition, int flags) {
+// return GLES30.glFenceSync(condition, flags);
+// }
 //
-//	@Override
-//	public boolean glIsSync(long sync) {
-//		return GLES30.glIsSync(sync);
-//	}
+// @Override
+// public boolean glIsSync(long sync) {
+// return GLES30.glIsSync(sync);
+// }
 //
-//	@Override
-//	public void glDeleteSync(long sync) {
-//		GLES30.glDeleteSync(sync);
-//	}
+// @Override
+// public void glDeleteSync(long sync) {
+// GLES30.glDeleteSync(sync);
+// }
 //
-//	@Override
-//	public int glClientWaitSync(long sync, int flags, long timeout) {
-//		return GLES30.glClientWaitSync(sync, flags, timeout);
-//	}
+// @Override
+// public int glClientWaitSync(long sync, int flags, long timeout) {
+// return GLES30.glClientWaitSync(sync, flags, timeout);
+// }
 
-//	@Override
-//	public void glWaitSync(long sync, int flags, long timeout) {
-//		GLES30.glWaitSync(sync, flags, timeout);
-//	}
+// @Override
+// public void glWaitSync(long sync, int flags, long timeout) {
+// GLES30.glWaitSync(sync, flags, timeout);
+// }
 //
-//	@Override
-//	public void glGetInteger64v(int pname, long[] params, int offset) {
-//		GLES30.glGetInteger64v(pname, params, offset);
-//	}
+// @Override
+// public void glGetInteger64v(int pname, long[] params, int offset) {
+// GLES30.glGetInteger64v(pname, params, offset);
+// }
 
 	@Override
-	public void glGetInteger64v(int pname, java.nio.LongBuffer params) {
+	public void glGetInteger64v (int pname, java.nio.LongBuffer params) {
 		GLES30.glGetInteger64v(pname, params);
 	}
 
-//	@Override
-//	public void glGetSynciv(long sync, int pname, int bufSize, int[] length, int lengthOffset, int[] values, int valuesOffset) {
-//		GLES30.glGetSynciv(sync, pname, bufSize, length, lengthOffset, values, valuesOffset);
-//	}
+// @Override
+// public void glGetSynciv(long sync, int pname, int bufSize, int[] length, int lengthOffset, int[] values, int valuesOffset) {
+// GLES30.glGetSynciv(sync, pname, bufSize, length, lengthOffset, values, valuesOffset);
+// }
 //
-//	@Override
-//	public void glGetSynciv(long sync, int pname, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer values) {
-//		GLES30.glGetSynciv(sync, pname, bufSize, length, values);
-//	}
+// @Override
+// public void glGetSynciv(long sync, int pname, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer values) {
+// GLES30.glGetSynciv(sync, pname, bufSize, length, values);
+// }
 //
-//	@Override
-//	public void glGetInteger64i_v(int target, int index, long[] data, int offset) {
-//		GLES30.glGetInteger64i_v(target, index, data, offset);
-//	}
+// @Override
+// public void glGetInteger64i_v(int target, int index, long[] data, int offset) {
+// GLES30.glGetInteger64i_v(target, index, data, offset);
+// }
 //
-//	@Override
-//	public void glGetInteger64i_v(int target, int index, java.nio.LongBuffer data) {
-//		GLES30.glGetInteger64i_v(target, index, data);
-//	}
+// @Override
+// public void glGetInteger64i_v(int target, int index, java.nio.LongBuffer data) {
+// GLES30.glGetInteger64i_v(target, index, data);
+// }
 //
-//	@Override
-//	public void glGetBufferParameteri64v(int target, int pname, long[] params, int offset) {
-//		GLES30.glGetBufferParameteri64v(target, pname, params, offset);
-//	}
+// @Override
+// public void glGetBufferParameteri64v(int target, int pname, long[] params, int offset) {
+// GLES30.glGetBufferParameteri64v(target, pname, params, offset);
+// }
 
 	@Override
-	public void glGetBufferParameteri64v(int target, int pname, java.nio.LongBuffer params) {
+	public void glGetBufferParameteri64v (int target, int pname, java.nio.LongBuffer params) {
 		GLES30.glGetBufferParameteri64v(target, pname, params);
 	}
 
 	@Override
-	public void glGenSamplers(int count, int[] samplers, int offset) {
+	public void glGenSamplers (int count, int[] samplers, int offset) {
 		GLES30.glGenSamplers(count, samplers, offset);
 	}
 
 	@Override
-	public void glGenSamplers(int count, java.nio.IntBuffer samplers) {
+	public void glGenSamplers (int count, java.nio.IntBuffer samplers) {
 		GLES30.glGenSamplers(count, samplers);
 	}
 
 	@Override
-	public void glDeleteSamplers(int count, int[] samplers, int offset) {
+	public void glDeleteSamplers (int count, int[] samplers, int offset) {
 		GLES30.glDeleteSamplers(count, samplers, offset);
 	}
 
 	@Override
-	public void glDeleteSamplers(int count, java.nio.IntBuffer samplers) {
+	public void glDeleteSamplers (int count, java.nio.IntBuffer samplers) {
 		GLES30.glDeleteSamplers(count, samplers);
 	}
 
 	@Override
-	public boolean glIsSampler(int sampler) {
+	public boolean glIsSampler (int sampler) {
 		return GLES30.glIsSampler(sampler);
 	}
 
 	@Override
-	public void glBindSampler(int unit, int sampler) {
+	public void glBindSampler (int unit, int sampler) {
 		GLES30.glBindSampler(unit, sampler);
 	}
 
 	@Override
-	public void glSamplerParameteri(int sampler, int pname, int param) {
+	public void glSamplerParameteri (int sampler, int pname, int param) {
 		GLES30.glSamplerParameteri(sampler, pname, param);
 	}
+
 //
-//	@Override
-//	public void glSamplerParameteriv(int sampler, int pname, int[] param, int offset) {
-//		GLES30.glSamplerParameteriv(sampler, pname, param, offset);
-//	}
+// @Override
+// public void glSamplerParameteriv(int sampler, int pname, int[] param, int offset) {
+// GLES30.glSamplerParameteriv(sampler, pname, param, offset);
+// }
 
 	@Override
-	public void glSamplerParameteriv(int sampler, int pname, java.nio.IntBuffer param) {
+	public void glSamplerParameteriv (int sampler, int pname, java.nio.IntBuffer param) {
 		GLES30.glSamplerParameteriv(sampler, pname, param);
 	}
 
 	@Override
-	public void glSamplerParameterf(int sampler, int pname, float param) {
+	public void glSamplerParameterf (int sampler, int pname, float param) {
 		GLES30.glSamplerParameterf(sampler, pname, param);
 	}
 
-//	@Override
-//	public void glSamplerParameterfv(int sampler, int pname, float[] param, int offset) {
-//		GLES30.glSamplerParameterfv(sampler, pname, param, offset);
-//	}
+// @Override
+// public void glSamplerParameterfv(int sampler, int pname, float[] param, int offset) {
+// GLES30.glSamplerParameterfv(sampler, pname, param, offset);
+// }
 
 	@Override
-	public void glSamplerParameterfv(int sampler, int pname, java.nio.FloatBuffer param) {
+	public void glSamplerParameterfv (int sampler, int pname, java.nio.FloatBuffer param) {
 		GLES30.glSamplerParameterfv(sampler, pname, param);
 	}
+
 //
-//	@Override
-//	public void glGetSamplerParameteriv(int sampler, int pname, int[] params, int offset) {
-//		GLES30.glGetSamplerParameteriv(sampler, pname, params, offset);
-//	}
+// @Override
+// public void glGetSamplerParameteriv(int sampler, int pname, int[] params, int offset) {
+// GLES30.glGetSamplerParameteriv(sampler, pname, params, offset);
+// }
 
 	@Override
-	public void glGetSamplerParameteriv(int sampler, int pname, java.nio.IntBuffer params) {
+	public void glGetSamplerParameteriv (int sampler, int pname, java.nio.IntBuffer params) {
 		GLES30.glGetSamplerParameteriv(sampler, pname, params);
 	}
 
-//	@Override
-//	public void glGetSamplerParameterfv(int sampler, int pname, float[] params, int offset) {
-//		GLES30.glGetSamplerParameterfv(sampler, pname, params, offset);
-//	}
+// @Override
+// public void glGetSamplerParameterfv(int sampler, int pname, float[] params, int offset) {
+// GLES30.glGetSamplerParameterfv(sampler, pname, params, offset);
+// }
 
 	@Override
-	public void glGetSamplerParameterfv(int sampler, int pname, java.nio.FloatBuffer params) {
+	public void glGetSamplerParameterfv (int sampler, int pname, java.nio.FloatBuffer params) {
 		GLES30.glGetSamplerParameterfv(sampler, pname, params);
 	}
 
 	@Override
-	public void glVertexAttribDivisor(int index, int divisor) {
+	public void glVertexAttribDivisor (int index, int divisor) {
 		GLES30.glVertexAttribDivisor(index, divisor);
 	}
 
 	@Override
-	public void glBindTransformFeedback(int target, int id) {
+	public void glBindTransformFeedback (int target, int id) {
 		GLES30.glBindTransformFeedback(target, id);
 	}
 
 	@Override
-	public void glDeleteTransformFeedbacks(int n, int[] ids, int offset) {
+	public void glDeleteTransformFeedbacks (int n, int[] ids, int offset) {
 		GLES30.glDeleteTransformFeedbacks(n, ids, offset);
 	}
 
 	@Override
-	public void glDeleteTransformFeedbacks(int n, java.nio.IntBuffer ids) {
+	public void glDeleteTransformFeedbacks (int n, java.nio.IntBuffer ids) {
 		GLES30.glDeleteTransformFeedbacks(n, ids);
 	}
 
 	@Override
-	public void glGenTransformFeedbacks(int n, int[] ids, int offset) {
+	public void glGenTransformFeedbacks (int n, int[] ids, int offset) {
 		GLES30.glGenTransformFeedbacks(n, ids, offset);
 	}
 
 	@Override
-	public void glGenTransformFeedbacks(int n, java.nio.IntBuffer ids) {
+	public void glGenTransformFeedbacks (int n, java.nio.IntBuffer ids) {
 		GLES30.glGenTransformFeedbacks(n, ids);
 	}
 
 	@Override
-	public boolean glIsTransformFeedback(int id) {
+	public boolean glIsTransformFeedback (int id) {
 		return GLES30.glIsTransformFeedback(id);
 	}
 
 	@Override
-	public void glPauseTransformFeedback() {
+	public void glPauseTransformFeedback () {
 		GLES30.glPauseTransformFeedback();
 	}
 
 	@Override
-	public void glResumeTransformFeedback() {
+	public void glResumeTransformFeedback () {
 		GLES30.glResumeTransformFeedback();
 	}
 
-//	@Override
-//	public void glGetProgramBinary(int program, int bufSize, int[] length, int lengthOffset, int[] binaryFormat, int binaryFormatOffset, java.nio.Buffer binary) {
-//		GLES30.glGetProgramBinary(program, bufSize, length, lengthOffset, binaryFormat, binaryFormatOffset, binary);
-//	}
+// @Override
+// public void glGetProgramBinary(int program, int bufSize, int[] length, int lengthOffset, int[] binaryFormat, int
+// binaryFormatOffset, java.nio.Buffer binary) {
+// GLES30.glGetProgramBinary(program, bufSize, length, lengthOffset, binaryFormat, binaryFormatOffset, binary);
+// }
 //
-//	@Override
-//	public void glGetProgramBinary(int program, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer binaryFormat, java.nio.Buffer binary) {
-//		GLES30.glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
-//	}
+// @Override
+// public void glGetProgramBinary(int program, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer binaryFormat,
+// java.nio.Buffer binary) {
+// GLES30.glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
+// }
 
-//	@Override
-//	public void glProgramBinary(int program, int binaryFormat, java.nio.Buffer binary, int length) {
-//		GLES30.glProgramBinary(program, binaryFormat, binary, length);
-//	}
+// @Override
+// public void glProgramBinary(int program, int binaryFormat, java.nio.Buffer binary, int length) {
+// GLES30.glProgramBinary(program, binaryFormat, binary, length);
+// }
 
 	@Override
-	public void glProgramParameteri(int program, int pname, int value) {
+	public void glProgramParameteri (int program, int pname, int value) {
 		GLES30.glProgramParameteri(program, pname, value);
 	}
 
-//	@Override
-//	public void glInvalidateFramebuffer(int target, int numAttachments, int[] attachments, int offset) {
-//		GLES30.glInvalidateFramebuffer(target, numAttachments, attachments, offset);
-//	}
+// @Override
+// public void glInvalidateFramebuffer(int target, int numAttachments, int[] attachments, int offset) {
+// GLES30.glInvalidateFramebuffer(target, numAttachments, attachments, offset);
+// }
 
 	@Override
-	public void glInvalidateFramebuffer(int target, int numAttachments, java.nio.IntBuffer attachments) {
+	public void glInvalidateFramebuffer (int target, int numAttachments, java.nio.IntBuffer attachments) {
 		GLES30.glInvalidateFramebuffer(target, numAttachments, attachments);
 	}
+
 //
-//	@Override
-//	public void glInvalidateSubFramebuffer(int target, int numAttachments, int[] attachments, int offset, int x, int y, int width, int height) {
-//		GLES30.glInvalidateSubFramebuffer(target, numAttachments, attachments, offset, x, y, width, height);
-//	}
+// @Override
+// public void glInvalidateSubFramebuffer(int target, int numAttachments, int[] attachments, int offset, int x, int y, int width,
+// int height) {
+// GLES30.glInvalidateSubFramebuffer(target, numAttachments, attachments, offset, x, y, width, height);
+// }
 
 	@Override
-	public void glInvalidateSubFramebuffer(int target, int numAttachments, java.nio.IntBuffer attachments, int x, int y, int width, int height) {
+	public void glInvalidateSubFramebuffer (int target, int numAttachments, java.nio.IntBuffer attachments, int x, int y,
+		int width, int height) {
 		GLES30.glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
 	}
 
-//	@Override
-//	public void glTexStorage2D(int target, int levels, int internalformat, int width, int height) {
-//		GLES30.glTexStorage2D(target, levels, internalformat, width, height);
-//	}
+// @Override
+// public void glTexStorage2D(int target, int levels, int internalformat, int width, int height) {
+// GLES30.glTexStorage2D(target, levels, internalformat, width, height);
+// }
 
-//	@Override
-//	public void glTexStorage3D(int target, int levels, int internalformat, int width, int height, int depth) {
-//		GLES30.glTexStorage3D(target, levels, internalformat, width, height, depth);
-//	}
+// @Override
+// public void glTexStorage3D(int target, int levels, int internalformat, int width, int height, int depth) {
+// GLES30.glTexStorage3D(target, levels, internalformat, width, height, depth);
+// }
 //
-//	@Override
-//	public void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, int[] params, int offset) {
-//		GLES30.glGetInternalformativ(target, internalformat, pname, bufSize, params, offset);
-//	}
+// @Override
+// public void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, int[] params, int offset) {
+// GLES30.glGetInternalformativ(target, internalformat, pname, bufSize, params, offset);
+// }
 //
-//	@Override
-//	public void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, java.nio.IntBuffer params) {
-//		GLES30.glGetInternalformativ(target, internalformat, pname, bufSize, params);
-//	}
-}
\ No newline at end of file
+// @Override
+// public void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, java.nio.IntBuffer params) {
+// GLES30.glGetInternalformativ(target, internalformat, pname, bufSize, params);
+// }
+}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
index 7853363..c34810c 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
@@ -16,14 +16,6 @@
 
 package com.badlogic.gdx.backends.android;
 
-import java.lang.reflect.Method;
-
-import javax.microedition.khronos.egl.EGL10;
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.egl.EGLContext;
-import javax.microedition.khronos.egl.EGLDisplay;
-import javax.microedition.khronos.opengles.GL10;
-
 import android.content.Context;
 import android.opengl.GLSurfaceView;
 import android.opengl.GLSurfaceView.EGLConfigChooser;
@@ -41,7 +33,6 @@ import com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser;
 import com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
@@ -49,6 +40,14 @@ import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.WindowedMean;
 import com.badlogic.gdx.utils.Array;
 
+import java.lang.reflect.Method;
+
+import javax.microedition.khronos.egl.EGL10;
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.egl.EGLContext;
+import javax.microedition.khronos.egl.EGLDisplay;
+import javax.microedition.khronos.opengles.GL10;
+
 /** An implementation of {@link Graphics} for Android.
  * 
  * @author mzechner */
@@ -57,7 +56,6 @@ public final class AndroidGraphics implements Graphics, Renderer {
 	int width;
 	int height;
 	AndroidApplicationBase app;
-	GLCommon gl;
 	GL20 gl20;
 	GL30 gl30;
 	EGLContext eglContext;
@@ -117,14 +115,14 @@ public final class AndroidGraphics implements Graphics, Renderer {
 
 	private View createGLSurfaceView (AndroidApplicationBase application, final ResolutionStrategy resolutionStrategy) {
 		EGLConfigChooser configChooser = getEglConfigChooser();
-		if(!checkGL20()) throw new RuntimeException("Libgdx requires OpenGL ES 2.0");
+		if (!checkGL20()) throw new RuntimeException("Libgdx requires OpenGL ES 2.0");
 		GLSurfaceView20 view = new GLSurfaceView20(application.getContext(), resolutionStrategy);
 		if (configChooser != null)
 			view.setEGLConfigChooser(configChooser);
 		else
 			view.setEGLConfigChooser(config.r, config.g, config.b, config.a, config.depth, config.stencil);
 		view.setRenderer(this);
-		return view;		
+		return view;
 	}
 
 	private EGLConfigChooser getEglConfigChooser () {
@@ -191,9 +189,8 @@ public final class AndroidGraphics implements Graphics, Renderer {
 		if (gl20 != null) return;
 
 		gl20 = new AndroidGL20();
-		this.gl = gl20;
 
-		Gdx.gl = this.gl;
+		Gdx.gl = gl20;
 		Gdx.gl20 = gl20;
 
 		Gdx.app.log("AndroidGraphics", "OGL renderer: " + gl.glGetString(GL10.GL_RENDERER));
@@ -465,12 +462,6 @@ public final class AndroidGraphics implements Graphics, Renderer {
 		return view;
 	}
 
-	/** {@inheritDoc} */
-	@Override
-	public GLCommon getGLCommon () {
-		return gl;
-	}
-
 	@Override
 	public float getPpiX () {
 		return ppiX;
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsDaydream.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsDaydream.java
index 7014d34..6b17392 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsDaydream.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsDaydream.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.backends.android;
 
 /*******************************************************************************
@@ -31,14 +32,6 @@ package com.badlogic.gdx.backends.android;
  * limitations under the License.
  ******************************************************************************/
 
-import java.lang.reflect.Method;
-
-import javax.microedition.khronos.egl.EGL10;
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.egl.EGLContext;
-import javax.microedition.khronos.egl.EGLDisplay;
-import javax.microedition.khronos.opengles.GL10;
-
 import android.opengl.GLSurfaceView;
 import android.opengl.GLSurfaceView.EGLConfigChooser;
 import android.opengl.GLSurfaceView.Renderer;
@@ -55,7 +48,6 @@ import com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser;
 import com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
@@ -63,6 +55,14 @@ import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.WindowedMean;
 import com.badlogic.gdx.utils.Array;
 
+import java.lang.reflect.Method;
+
+import javax.microedition.khronos.egl.EGL10;
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.egl.EGLContext;
+import javax.microedition.khronos.egl.EGLDisplay;
+import javax.microedition.khronos.opengles.GL10;
+
 /** An implementation of {@link Graphics} for Android.
  * 
  * @author mzechner */
@@ -71,7 +71,6 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 	int width;
 	int height;
 	AndroidDaydream app;
-	GLCommon gl;
 	GL20 gl20;
 	GL30 gl30;
 	EGLContext eglContext;
@@ -132,14 +131,14 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 	private View createGLSurfaceView (DreamService dream, final ResolutionStrategy resolutionStrategy) {
 		EGLConfigChooser configChooser = getEglConfigChooser();
 
-		if(!checkGL20()) throw new RuntimeException("Libgdx requires OpenGL ES 2.0");
+		if (!checkGL20()) throw new RuntimeException("Libgdx requires OpenGL ES 2.0");
 		GLSurfaceView20 view = new GLSurfaceView20(dream, resolutionStrategy);
 		if (configChooser != null)
 			view.setEGLConfigChooser(configChooser);
 		else
 			view.setEGLConfigChooser(config.r, config.g, config.b, config.a, config.depth, config.stencil);
 		view.setRenderer(this);
-		return view;		
+		return view;
 	}
 
 	private EGLConfigChooser getEglConfigChooser () {
@@ -206,9 +205,8 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 		if (gl20 != null) return;
 
 		gl20 = new AndroidGL20();
-		this.gl = gl20;
 
-		Gdx.gl = this.gl;
+		Gdx.gl = gl20;
 		Gdx.gl20 = gl20;
 
 		Gdx.app.log("AndroidGraphics", "OGL renderer: " + gl.glGetString(GL10.GL_RENDERER));
@@ -334,7 +332,7 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 		long time = System.nanoTime();
 		deltaTime = (time - lastFrameTime) / 1000000000.0f;
 		lastFrameTime = time;
-		if(!resume) {
+		if (!resume) {
 			mean.addValue(deltaTime);
 		} else {
 			deltaTime = 0;
@@ -368,8 +366,8 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 
 		if (lresume) {
 			Array<LifecycleListener> listeners = app.lifecycleListeners;
-			synchronized(listeners) {
-				for(LifecycleListener listener: listeners) {
+			synchronized (listeners) {
+				for (LifecycleListener listener : listeners) {
 					listener.resume();
 				}
 			}
@@ -398,8 +396,8 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 
 		if (lpause) {
 			Array<LifecycleListener> listeners = app.lifecycleListeners;
-			synchronized(listeners) {
-				for(LifecycleListener listener: listeners) {
+			synchronized (listeners) {
+				for (LifecycleListener listener : listeners) {
 					listener.pause();
 				}
 			}
@@ -410,8 +408,8 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 
 		if (ldestroy) {
 			Array<LifecycleListener> listeners = app.lifecycleListeners;
-			synchronized(listeners) {
-				for(LifecycleListener listener: listeners) {
+			synchronized (listeners) {
+				for (LifecycleListener listener : listeners) {
 					listener.dispose();
 				}
 			}
@@ -468,12 +466,6 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 		return view;
 	}
 
-	/** {@inheritDoc} */
-	@Override
-	public GLCommon getGLCommon () {
-		return gl;
-	}
-
 	@Override
 	public float getPpiX () {
 		return ppiX;
@@ -587,4 +579,4 @@ public final class AndroidGraphicsDaydream implements Graphics, Renderer {
 	public GL30 getGL30 () {
 		return gl30;
 	}
-}
\ No newline at end of file
+}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsLiveWallpaper.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsLiveWallpaper.java
index b229789..4d9cb8e 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsLiveWallpaper.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsLiveWallpaper.java
@@ -16,14 +16,6 @@
 
 package com.badlogic.gdx.backends.android;
 
-import java.lang.reflect.Method;
-
-import javax.microedition.khronos.egl.EGL10;
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.egl.EGLContext;
-import javax.microedition.khronos.egl.EGLDisplay;
-import javax.microedition.khronos.opengles.GL10;
-
 import android.content.Context;
 import android.opengl.GLSurfaceView;
 import android.opengl.GLSurfaceView.EGLConfigChooser;
@@ -41,27 +33,33 @@ import com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser;
 import com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.WindowedMean;
 
+import java.lang.reflect.Method;
+
+import javax.microedition.khronos.egl.EGL10;
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.egl.EGLContext;
+import javax.microedition.khronos.egl.EGLDisplay;
+import javax.microedition.khronos.opengles.GL10;
+
 /** An implementation of {@link Graphics} for Android.
  * 
  * @author mzechner */
 public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
-	
+
 	// jw: changed
-	//final GLBaseSurfaceViewLW view;
+	// final GLBaseSurfaceViewLW view;
 	final View view;
-	
+
 	int width;
 	int height;
 	AndroidLiveWallpaper app;
-	
-	protected GLCommon gl;
+
 	protected GL20 gl20;
 	protected GL30 gl30;
 	protected GLU glu;
@@ -91,15 +89,15 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 	private BufferFormat bufferFormat = new BufferFormat(5, 6, 5, 0, 16, 0, 0, false);
 	protected boolean isContinuous = true;
 
-	
-	public AndroidGraphicsLiveWallpaper (AndroidLiveWallpaper app, AndroidApplicationConfiguration config, ResolutionStrategy resolutionStrategy) {
+	public AndroidGraphicsLiveWallpaper (AndroidLiveWallpaper app, AndroidApplicationConfiguration config,
+		ResolutionStrategy resolutionStrategy) {
 		this.config = config;
 		this.app = app;
 		view = createGLSurfaceView(app.service, resolutionStrategy);
 		setPreserveContext(view);
 	}
-	
-	// jw: it will be called only after current GLSurfaceViewLW family of methods 
+
+	// jw: it will be called only after current GLSurfaceViewLW family of methods
 	// will be replaced by subclass of original GLSurfaceView, i'm working on it:)
 	// <- ok it is in use now
 	private void setPreserveContext (Object view) {
@@ -121,27 +119,27 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		}
 	}
 
-	
-	// jw: I replaced GL..SurfaceViewLW classes with them original counterparts, if it will work 
-	// on known devices, on opengl 1.0 and 2.0, and all possible SDK versions.. You can remove 
+	// jw: I replaced GL..SurfaceViewLW classes with them original counterparts, if it will work
+	// on known devices, on opengl 1.0 and 2.0, and all possible SDK versions.. You can remove
 	// GL..SurfaceViewLW family of classes completely (there is no use for them).
-	
+
 	// -> specific for live wallpapers
 	// jw: synchronized access to current wallpaper surface holder
-	SurfaceHolder getSurfaceHolder() {
+	SurfaceHolder getSurfaceHolder () {
 		synchronized (app.service.sync) {
 			return app.service.getSurfaceHolder();
 		}
 	}
+
 	// <- specific for live wallpapers
-	
+
 	// Grabbed from original AndroidGraphics class, with modifications:
-	//	+ overrided getHolder in created GLSurfaceView instances
+	// + overrided getHolder in created GLSurfaceView instances
 	// + Activity changed to Context (as it should be in AndroidGraphics I think;p)
 	private View createGLSurfaceView (Context context, final ResolutionStrategy resolutionStrategy) {
 		EGLConfigChooser configChooser = getEglConfigChooser();
 
-		if(!checkGL20()) throw new RuntimeException("Libgdx requires OpenGL ES 2.0");
+		if (!checkGL20()) throw new RuntimeException("Libgdx requires OpenGL ES 2.0");
 
 		GLSurfaceView20 view = new GLSurfaceView20(context, resolutionStrategy) {
 			// -> specific for live wallpapers
@@ -149,20 +147,21 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 			public SurfaceHolder getHolder () {
 				return getSurfaceHolder();
 			}
+
 			public void onDestroy () {
-				onDetachedFromWindow();	// calls GLSurfaceView.mGLThread.requestExitAndWait();
+				onDetachedFromWindow(); // calls GLSurfaceView.mGLThread.requestExitAndWait();
 			}
 			// <- specific for live wallpapers
 		};
-		
+
 		if (configChooser != null)
 			view.setEGLConfigChooser(configChooser);
 		else
 			view.setEGLConfigChooser(config.r, config.g, config.b, config.a, config.depth, config.stencil);
 		view.setRenderer(this);
-		return view;		
+		return view;
 	}
-	
+
 	// jw: changed, method replaced with implementation from original AndroidGraphics
 	private EGLConfigChooser getEglConfigChooser () {
 		return new GdxEglConfigChooser(config.r, config.g, config.b, config.a, config.depth, config.stencil, config.numSamples);
@@ -173,8 +172,8 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 
 		// jw: changed
 		app.getWindowManager().getDefaultDisplay().getMetrics(metrics);
-		//final Display display = ((WindowManager)app.getService().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-		//display.getMetrics(metrics);
+		// final Display display = ((WindowManager)app.getService().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+		// display.getMetrics(metrics);
 
 		ppiX = metrics.xdpi;
 		ppiY = metrics.ydpi;
@@ -182,7 +181,7 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		ppcY = metrics.ydpi / 2.54f;
 		density = metrics.density;
 	}
-	
+
 	protected boolean checkGL20 () {
 		EGL10 egl = (EGL10)EGLContext.getEGL();
 		EGLDisplay display = egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
@@ -219,10 +218,10 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		return width;
 	}
 
-	private static boolean isPowerOfTwo(int value) {
+	private static boolean isPowerOfTwo (int value) {
 		return ((value != 0) && (value & (value - 1)) == 0);
 	}
-	
+
 	/** This instantiates the GL10, GL11 and GL20 instances. Includes the check for certain devices that pretend to support GL11 but
 	 * fuck up vertex buffer objects. This includes the pixelflinger which segfaults when buffers are deleted as well as the
 	 * Motorola CLIQ and the Samsung Behold II.
@@ -230,11 +229,10 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 	 * @param gl */
 	private void setupGL (javax.microedition.khronos.opengles.GL10 gl) {
 		if (gl20 != null) return;
-		
+
 		gl20 = new AndroidGL20();
-		this.gl = gl20;
 
-		Gdx.gl = this.gl;
+		Gdx.gl = gl20;
 		Gdx.gl20 = gl20;
 	}
 
@@ -244,7 +242,7 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		this.height = height;
 		updatePpi();
 		gl.glViewport(0, 0, this.width, this.height);
-		
+
 		// jw: moved from onSurfaceCreated (as in AndroidGraphics class)
 		if (created == false) {
 			app.listener.create();
@@ -258,7 +256,7 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 
 	@Override
 	public void onSurfaceCreated (javax.microedition.khronos.opengles.GL10 gl, EGLConfig config) {
-		eglContext = ((EGL10)EGLContext.getEGL()).eglGetCurrentContext();	// jw: added
+		eglContext = ((EGL10)EGLContext.getEGL()).eglGetCurrentContext(); // jw: added
 		setupGL(gl);
 		logConfig(config);
 		updatePpi();
@@ -268,13 +266,13 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		ShaderProgram.invalidateAllShaderPrograms(app);
 		FrameBuffer.invalidateAllFrameBuffers(app);
 
-		if (AndroidLiveWallpaperService.DEBUG) {	// to prevent creating too many string buffers in live wallpapers
+		if (AndroidLiveWallpaperService.DEBUG) { // to prevent creating too many string buffers in live wallpapers
 			Gdx.app.debug("AndroidGraphics", Mesh.getManagedStatus());
 			Gdx.app.debug("AndroidGraphics", Texture.getManagedStatus());
 			Gdx.app.debug("AndroidGraphics", ShaderProgram.getManagedStatus());
 			Gdx.app.debug("AndroidGraphics", FrameBuffer.getManagedStatus());
 		}
-		
+
 		Display display = app.getWindowManager().getDefaultDisplay();
 		this.width = display.getWidth();
 		this.height = display.getHeight();
@@ -284,13 +282,9 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		gl.glViewport(0, 0, this.width, this.height);
 
 		// jw: moved to onSurfaceChanged (as in AndroidGraphics class)
-		/*if (created == false) {
-			app.getListener().create();
-			created = true;
-			synchronized (this) {
-				running = true;
-			}
-		}*/
+		/*
+		 * if (created == false) { app.getListener().create(); created = true; synchronized (this) { running = true; } }
+		 */
 	}
 
 	private void logConfig (EGLConfig config) {
@@ -306,31 +300,30 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 			getAttrib(egl, display, config, GdxEglConfigChooser.EGL_COVERAGE_SAMPLES_NV, 0));
 		boolean coverageSample = getAttrib(egl, display, config, GdxEglConfigChooser.EGL_COVERAGE_SAMPLES_NV, 0) != 0;
 
-		// print configuration just one time (on some devices gl context is recreated every time when device is locked / unlocked - every time when screen turns on and off)
-		if (!configLogged)
-		{
-			
-			if (gl != null)
-			{
-				Gdx.app.log("AndroidGraphics", "OGL renderer: " + gl.glGetString(GL10.GL_RENDERER));
-				Gdx.app.log("AndroidGraphics", "OGL vendor: " + gl.glGetString(GL10.GL_VENDOR));
-				Gdx.app.log("AndroidGraphics", "OGL version: " + gl.glGetString(GL10.GL_VERSION));
-				Gdx.app.log("AndroidGraphics", "OGL extensions: " + gl.glGetString(GL10.GL_EXTENSIONS));
+		// print configuration just one time (on some devices gl context is recreated every time when device is locked / unlocked -
+// every time when screen turns on and off)
+		if (!configLogged) {
+
+			if (gl20 != null) {
+				Gdx.app.log("AndroidGraphics", "OGL renderer: " + gl20.glGetString(GL10.GL_RENDERER));
+				Gdx.app.log("AndroidGraphics", "OGL vendor: " + gl20.glGetString(GL10.GL_VENDOR));
+				Gdx.app.log("AndroidGraphics", "OGL version: " + gl20.glGetString(GL10.GL_VERSION));
+				Gdx.app.log("AndroidGraphics", "OGL extensions: " + gl20.glGetString(GL10.GL_EXTENSIONS));
 				configLogged = true;
 			}
-			
+
 			Gdx.app.log("AndroidGraphics", "framebuffer: (" + r + ", " + g + ", " + b + ", " + a + ")");
 			Gdx.app.log("AndroidGraphics", "depthbuffer: (" + d + ")");
 			Gdx.app.log("AndroidGraphics", "stencilbuffer: (" + s + ")");
 			Gdx.app.log("AndroidGraphics", "samples: (" + samples + ")");
 			Gdx.app.log("AndroidGraphics", "coverage sampling: (" + coverageSample + ")");
 		}
-		
+
 		bufferFormat = new BufferFormat(r, g, b, a, d, s, samples, coverageSample);
 	}
 
 	boolean configLogged = false;
-	
+
 	int[] value = new int[1];
 
 	private int getAttrib (EGL10 egl, EGLDisplay display, EGLConfig config, int attrib, int defValue) {
@@ -346,7 +339,7 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		synchronized (synch) {
 			running = true;
 			resume = true;
-			
+
 			// by jw: added synchronization, there was nothing before
 			while (resume) {
 				try {
@@ -364,7 +357,7 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 			if (!running) return;
 			running = false;
 			pause = true;
-			
+
 			while (pause) {
 				try {
 					synch.wait();
@@ -391,20 +384,19 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		}
 	}
 
-
 	@Override
 	public void onDrawFrame (javax.microedition.khronos.opengles.GL10 gl) {
 		long time = System.nanoTime();
 		deltaTime = (time - lastFrameTime) / 1000000000.0f;
 		lastFrameTime = time;
-		
+
 		// jw: after pause deltaTime can have somewhat huge value and it destabilize mean, so I propose to just cut it of
-		if(!resume) {
+		if (!resume) {
 			mean.addValue(deltaTime);
 		} else {
 			deltaTime = 0;
 		}
-		//mean.addValue(deltaTime);
+		// mean.addValue(deltaTime);
 
 		boolean lrunning = false;
 		boolean lpause = false;
@@ -435,7 +427,7 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		}
 
 		if (lresume) {
-			//((AndroidAudio)app.getAudio()).resume();	// jw: moved to AndroidLiveWallpaper.onResume
+			// ((AndroidAudio)app.getAudio()).resume(); // jw: moved to AndroidLiveWallpaper.onResume
 			app.listener.resume();
 			Gdx.app.log("AndroidGraphics", "resumed");
 		}
@@ -461,14 +453,9 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 				}
 			}
 			/*
-			synchronized (app.runnables) {
-				for (int i = 0; i < app.runnables.size; i++) {
-					app.runnables.get(i).run();
-				}
-				app.runnables.clear();
-			}
-			*/
-			
+			 * synchronized (app.runnables) { for (int i = 0; i < app.runnables.size; i++) { app.runnables.get(i).run(); }
+			 * app.runnables.clear(); }
+			 */
 
 			app.input.processEvents();
 			app.listener.render();
@@ -477,14 +464,14 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 		// jw: never called on lvp, why? see description in AndroidLiveWallpaper.onPause
 		if (lpause) {
 			app.listener.pause();
-			//((AndroidAudio)app.getAudio()).pause();		jw: moved to AndroidLiveWallpaper.onPause
+			// ((AndroidAudio)app.getAudio()).pause(); jw: moved to AndroidLiveWallpaper.onPause
 			Gdx.app.log("AndroidGraphics", "paused");
 		}
 
 		// jw: never called on lwp, why? see description in AndroidLiveWallpaper.onPause
 		if (ldestroy) {
 			app.listener.dispose();
-			//((AndroidAudio)app.getAudio()).dispose();	 jw: moved to AndroidLiveWallpaper.onDestroy
+			// ((AndroidAudio)app.getAudio()).dispose(); jw: moved to AndroidLiveWallpaper.onDestroy
 			Gdx.app.log("AndroidGraphics", "destroyed");
 		}
 
@@ -518,14 +505,14 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 	public int getFramesPerSecond () {
 		return fps;
 	}
-	
+
 	public void clearManagedCaches () {
 		Mesh.clearAllMeshes(app);
 		Texture.clearAllTextures(app);
 		ShaderProgram.clearAllShaderPrograms(app);
 		FrameBuffer.clearAllFrameBuffers(app);
 
-		if (AndroidLiveWallpaperService.DEBUG) {	// to prevent creating too many string buffers in live wallpapers
+		if (AndroidLiveWallpaperService.DEBUG) { // to prevent creating too many string buffers in live wallpapers
 			Gdx.app.debug("AndroidGraphics", Mesh.getManagedStatus());
 			Gdx.app.debug("AndroidGraphics", Texture.getManagedStatus());
 			Gdx.app.debug("AndroidGraphics", ShaderProgram.getManagedStatus());
@@ -534,17 +521,11 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 	}
 
 	// jw: changed this
-	//public GLBaseSurfaceViewLW getView () {
+	// public GLBaseSurfaceViewLW getView () {
 	public View getView () {
 		return view;
 	}
 
-	/** {@inheritDoc} */
-	@Override
-	public GLCommon getGLCommon () {
-		return gl;
-	}
-
 	@Override
 	public float getPpiX () {
 		return ppiX;
@@ -629,9 +610,11 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 			this.isContinuous = isContinuous;
 			int renderMode = isContinuous ? GLSurfaceView.RENDERMODE_CONTINUOUSLY : GLSurfaceView.RENDERMODE_WHEN_DIRTY;
 			// jw: changed
-			//view.setRenderMode(renderMode);
-			if (view instanceof GLSurfaceView) ((GLSurfaceView)view).setRenderMode(renderMode);
-			else throw new RuntimeException("unimplemented");
+			// view.setRenderMode(renderMode);
+			if (view instanceof GLSurfaceView)
+				((GLSurfaceView)view).setRenderMode(renderMode);
+			else
+				throw new RuntimeException("unimplemented");
 			mean.clear();
 		}
 	}
@@ -644,9 +627,11 @@ public final class AndroidGraphicsLiveWallpaper implements Graphics, Renderer {
 	public void requestRendering () {
 		if (view != null) {
 			// jw: changed
-			//view.requestRender();
-			if (view instanceof GLSurfaceView) ((GLSurfaceView)view).requestRender();
-			else throw new RuntimeException("unimplemented");
+			// view.requestRender();
+			if (view instanceof GLSurfaceView)
+				((GLSurfaceView)view).requestRender();
+			else
+				throw new RuntimeException("unimplemented");
 		}
 	}
 
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
index 25ab8ff..e7fe7c5 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
@@ -88,10 +88,10 @@ public class AndroidInput implements Input, OnKeyListener, OnTouchListener {
 			return new TouchEvent();
 		}
 	};
-	
+
 	public static final int NUM_TOUCHES = 40;
 
-	ArrayList<OnKeyListener> keyListeners = new ArrayList();	
+	ArrayList<OnKeyListener> keyListeners = new ArrayList();
 	ArrayList<KeyEvent> keyEvents = new ArrayList();
 	ArrayList<TouchEvent> touchEvents = new ArrayList();
 	int[] touchX = new int[NUM_TOUCHES];
@@ -138,7 +138,7 @@ public class AndroidInput implements Input, OnKeyListener, OnTouchListener {
 		if (view instanceof View) {
 			View v = (View)view;
 			v.setOnKeyListener(this);
-			v.setOnTouchListener(this);			
+			v.setOnTouchListener(this);
 			v.setFocusable(true);
 			v.setFocusableInTouchMode(true);
 			v.requestFocus();
@@ -449,24 +449,23 @@ public class AndroidInput implements Input, OnKeyListener, OnTouchListener {
 	@Override
 	public boolean onKey (View v, int keyCode, android.view.KeyEvent e) {
 		for (int i = 0, n = keyListeners.size(); i < n; i++)
-			if(keyListeners.get(i).onKey(v, keyCode, e)) return true;
+			if (keyListeners.get(i).onKey(v, keyCode, e)) return true;
 
 		synchronized (this) {
 			KeyEvent event = null;
-			
-			if(e.getKeyCode() == android.view.KeyEvent.KEYCODE_UNKNOWN &&
-				e.getAction() == android.view.KeyEvent.ACTION_MULTIPLE) {
-					String chars = e.getCharacters();
-					for(int i = 0; i < chars.length(); i++) {
-						event = usedKeyEvents.obtain();
-						event.keyCode = 0;
-						event.keyChar = chars.charAt(i);
-						event.type = KeyEvent.KEY_TYPED;
-						keyEvents.add(event);
-					}
-					return false;
+
+			if (e.getKeyCode() == android.view.KeyEvent.KEYCODE_UNKNOWN && e.getAction() == android.view.KeyEvent.ACTION_MULTIPLE) {
+				String chars = e.getCharacters();
+				for (int i = 0; i < chars.length(); i++) {
+					event = usedKeyEvents.obtain();
+					event.keyCode = 0;
+					event.keyChar = chars.charAt(i);
+					event.type = KeyEvent.KEY_TYPED;
+					keyEvents.add(event);
+				}
+				return false;
 			}
-			
+
 			char character = (char)e.getUnicodeChar();
 			// Android doesn't report a unicode char for back space. hrm...
 			if (keyCode == 67) character = '\b';
@@ -771,11 +770,11 @@ public class AndroidInput implements Input, OnKeyListener, OnTouchListener {
 	public void setCursorPosition (int x, int y) {
 	}
 
-  @Override
-  public void setCursorImage(Pixmap pixmap, int xHotspot, int yHotspot) {
-  }
+	@Override
+	public void setCursorImage (Pixmap pixmap, int xHotspot, int yHotspot) {
+	}
 
-  @Override
+	@Override
 	public long getCurrentEventTime () {
 		return currentEventTimeStamp;
 	}
@@ -783,7 +782,7 @@ public class AndroidInput implements Input, OnKeyListener, OnTouchListener {
 	public void addKeyListener (OnKeyListener listener) {
 		keyListeners.add(listener);
 	}
-	
+
 	/** Our implementation of SensorEventListener. Because Android doesn't like it when we register more than one Sensor to a single
 	 * SensorEventListener, we add one of these for each Sensor. Could use an anonymous class, but I don't see any harm in
 	 * explicitly defining it here. Correct me if I am wrong. */
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputFactory.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputFactory.java
index 1f38aa1..837b9f3 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputFactory.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputFactory.java
@@ -12,8 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.backends.android;
 
 import java.lang.reflect.Constructor;
@@ -22,29 +22,27 @@ import android.content.Context;
 
 import com.badlogic.gdx.Application;
 
-/**
- * Class that instantiates AndroidInput or AndroidInputThreePlus
- * depending on the SDK level, via reflection.
- * @author mzechner
- *
- */
+/** Class that instantiates AndroidInput or AndroidInputThreePlus depending on the SDK level, via reflection.
+ * @author mzechner */
 public class AndroidInputFactory {
-	public static AndroidInput newAndroidInput(Application activity, Context context, Object view, AndroidApplicationConfiguration config) {
+	public static AndroidInput newAndroidInput (Application activity, Context context, Object view,
+		AndroidApplicationConfiguration config) {
 		try {
 			Class<?> clazz = null;
 			AndroidInput input = null;
-			
+
 			int sdkVersion = android.os.Build.VERSION.SDK_INT;
 			if (sdkVersion >= 12) {
 				clazz = Class.forName("com.badlogic.gdx.backends.android.AndroidInputThreePlus");
 			} else {
 				clazz = Class.forName("com.badlogic.gdx.backends.android.AndroidInput");
 			}
-			Constructor<?> constructor = clazz.getConstructor(Application.class, Context.class, Object.class, AndroidApplicationConfiguration.class);
+			Constructor<?> constructor = clazz.getConstructor(Application.class, Context.class, Object.class,
+				AndroidApplicationConfiguration.class);
 			input = (AndroidInput)constructor.newInstance(activity, context, view, config);
 			return input;
-		} catch(Exception e) {
+		} catch (Exception e) {
 			throw new RuntimeException("Couldn't construct AndroidInput, this should never happen", e);
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputThreePlus.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputThreePlus.java
index 8ad0be8..127b2b8 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputThreePlus.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputThreePlus.java
@@ -12,8 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.backends.android;
 
 import java.util.ArrayList;
@@ -25,15 +25,11 @@ import android.view.View.OnGenericMotionListener;
 
 import com.badlogic.gdx.Application;
 
-/**
- * Subclass of AndroidInput, used on Androd +3.x to get generic motion events for 
- * things like gampads/joysticks and so on.
- * @author mzechner
- *
- */
+/** Subclass of AndroidInput, used on Androd +3.x to get generic motion events for things like gampads/joysticks and so on.
+ * @author mzechner */
 public class AndroidInputThreePlus extends AndroidInput implements OnGenericMotionListener {
 	ArrayList<OnGenericMotionListener> genericMotionListeners = new ArrayList();
-	
+
 	public AndroidInputThreePlus (Application activity, Context context, Object view, AndroidApplicationConfiguration config) {
 		super(activity, context, view, config);
 		// we hook into View, for LWPs we call onTouch below directly from
@@ -43,15 +39,15 @@ public class AndroidInputThreePlus extends AndroidInput implements OnGenericMoti
 			v.setOnGenericMotionListener(this);
 		}
 	}
-	
+
 	@Override
 	public boolean onGenericMotion (View view, MotionEvent event) {
 		for (int i = 0, n = genericMotionListeners.size(); i < n; i++)
 			if (genericMotionListeners.get(i).onGenericMotion(view, event)) return true;
 		return false;
 	}
-	
+
 	public void addGenericMotionListener (OnGenericMotionListener listener) {
 		genericMotionListeners.add(listener);
 	}
-}
\ No newline at end of file
+}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
index e3baa64..2cdefdd 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
@@ -356,4 +356,4 @@ public class AndroidLiveWallpaper implements Application {
 	public ApplicationListener getApplicationListener () {
 		return listener;
 	}
-}
\ No newline at end of file
+}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
index f98d4a2..d01af40 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
@@ -28,303 +28,250 @@ import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.utils.GdxNativesLoader;
 
-
-/** 
- * An implementation of the {@link Application} interface dedicated for android live wallpapers.
+/** An implementation of the {@link Application} interface dedicated for android live wallpapers.
  * 
- * Derive from this class. In the {@link AndroidLiveWallpaperService#onCreateApplication} method call the {@link AndroidLiveWallpaperService#initialize(ApplicationListener, boolean)} 
- * method specifying the configuration for the GLSurfaceView. You can also use {@link AndroidWallpaperListener} 
- * along with {@link ApplicationListener} to respond for wallpaper specific events in your app listener:
+ * Derive from this class. In the {@link AndroidLiveWallpaperService#onCreateApplication} method call the
+ * {@link AndroidLiveWallpaperService#initialize(ApplicationListener)} method specifying the configuration for the GLSurfaceView.
+ * You can also use {@link AndroidWallpaperListener} along with {@link ApplicationListener} to respond for wallpaper specific
+ * events in your app listener:
  * 
  * MyAppListener implements ApplicationListener, AndroidWallpaperListener
  * 
- * Notice:
- * Following methods are not called for live wallpapers:
- * {@link ApplicationListener#pause()}
- * {@link ApplicationListener#dispose()}
- * TODO add callbacks to AndroidWallpaperListener allowing to notify app listener about changed visibility
- * state of live wallpaper but called from main thread, not from GL thread:
- * for example:
+ * Notice: Following methods are not called for live wallpapers: {@link ApplicationListener#pause()}
+ * {@link ApplicationListener#dispose()} TODO add callbacks to AndroidWallpaperListener allowing to notify app listener about
+ * changed visibility state of live wallpaper but called from main thread, not from GL thread: for example:
  * AndroidWallpaperListener.visibilityChanged(boolean)
  * 
- * //obsoleted:
- * //Notice!
- * //You have to kill all not daemon threads you created in {@link ApplicationListener#pause()} method.
- * //{@link ApplicationListener#dispose()} is never called!
- * //If you leave live non daemon threads, wallpaper service wouldn't be able to close, 
- * //this can cause problems with wallpaper lifecycle.
+ * //obsoleted: //Notice! //You have to kill all not daemon threads you created in {@link ApplicationListener#pause()} method. //
+ * {@link ApplicationListener#dispose()} is never called! //If you leave live non daemon threads, wallpaper service wouldn't be
+ * able to close, //this can cause problems with wallpaper lifecycle.
  * 
- * Notice #2!
- * On some devices wallpaper service is not killed immediately after exiting from preview. Service object 
- * is destroyed (onDestroy called) but process on which it runs remains alive. When user comes back to wallpaper
- * preview, new wallpaper service object is created, but in the same process. It is important if you plan to
- * use static variables / objects - they will be shared between living instances of wallpaper services'!
- * And depending on your implementation - it can cause problems you were not prepared to.
+ * Notice #2! On some devices wallpaper service is not killed immediately after exiting from preview. Service object is destroyed
+ * (onDestroy called) but process on which it runs remains alive. When user comes back to wallpaper preview, new wallpaper service
+ * object is created, but in the same process. It is important if you plan to use static variables / objects - they will be shared
+ * between living instances of wallpaper services'! And depending on your implementation - it can cause problems you were not
+ * prepared to.
  * 
- * @author Jaroslaw Wisniewski <j.wisniewski@appsisle.com>
- */
+ * @author Jaroslaw Wisniewski <j.wisniewski@appsisle.com> */
 public abstract class AndroidLiveWallpaperService extends WallpaperService {
 	static {
 		GdxNativesLoader.load();
 	}
-	
+
 	static final String TAG = "WallpaperService";
-	static boolean DEBUG	= false;	// TODO remember to disable this
+	static boolean DEBUG = false; // TODO remember to disable this
 
-	
 	// instance of libGDX Application, acts as singleton - one instance per application (per WallpaperService)
-	protected volatile AndroidLiveWallpaper app = null;	// can be accessed from GL render thread
+	protected volatile AndroidLiveWallpaper app = null; // can be accessed from GL render thread
 	protected SurfaceHolder.Callback view = null;
-	
+
 	// current format of surface (one GLSurfaceView is shared between all engines)
 	protected int viewFormat;
 	protected int viewWidth;
 	protected int viewHeight;
-	
-	// app is initialized when engines == 1 first time, app is destroyed in WallpaperService.onDestroy, but ApplicationListener.dispose is not called for wallpapers
+
+	// app is initialized when engines == 1 first time, app is destroyed in WallpaperService.onDestroy, but
+// ApplicationListener.dispose is not called for wallpapers
 	protected int engines = 0;
 	protected int visibleEngines = 0;
-	
+
 	// engine currently associated with app instance, linked engine serves surface handler for GLSurfaceView
-	protected volatile AndroidWallpaperEngine linkedEngine = null;		// can be accessed from GL render thread by getSurfaceHolder
-	
+	protected volatile AndroidWallpaperEngine linkedEngine = null; // can be accessed from GL render thread by getSurfaceHolder
+
 	protected void setLinkedEngine (AndroidWallpaperEngine linkedEngine) {
 		synchronized (sync) {
 			this.linkedEngine = linkedEngine;
 		}
 	}
-	
-	
+
 	// if preview state notified ever
 	protected volatile boolean isPreviewNotified = false;
-	
+
 	// the value of last preview state notified to app listener
 	protected volatile boolean notifiedPreviewState = false;
 
-
 	volatile int[] sync = new int[0];
-	//volatile ReentrantLock lock = new ReentrantLock();
-	
-	
+
+	// volatile ReentrantLock lock = new ReentrantLock();
+
 	// lifecycle methods - the order of calling (flow) is maintained ///////////////
-	
+
 	public AndroidLiveWallpaperService () {
 		super();
 	}
 
-	
-	/**
-	 * Service is starting, libGDX application is shutdown now
-	 */
+	/** Service is starting, libGDX application is shutdown now */
 	@Override
 	public void onCreate () {
 		if (DEBUG) Log.d(TAG, " > AndroidLiveWallpaperService - onCreate() " + hashCode());
 		Log.i(TAG, "service created");
 
-		super.onCreate();		
+		super.onCreate();
 	}
-	
-	
-	/**
-	 * One of wallpaper engines is starting. 
-	 * Do not override this method, service manages them internally.
-	 */
+
+	/** One of wallpaper engines is starting. Do not override this method, service manages them internally. */
 	@Override
 	public Engine onCreateEngine () {
 		if (DEBUG) Log.d(TAG, " > AndroidLiveWallpaperService - onCreateEngine()");
 		Log.i(TAG, "engine created");
-		
+
 		return new AndroidWallpaperEngine();
 	}
-	
-	
-	/**
-	 * libGDX application is starting, it occurs after first wallpaper engine had started.
-	 * Override this method an invoke {@link AndroidLiveWallpaperService#initialize(ApplicationListener, AndroidApplicationConfiguration)} from there.
-	 */
+
+	/** libGDX application is starting, it occurs after first wallpaper engine had started. Override this method an invoke
+	 * {@link AndroidLiveWallpaperService#initialize(ApplicationListener, AndroidApplicationConfiguration)} from there. */
 	public void onCreateApplication () {
 		if (DEBUG) Log.d(TAG, " > AndroidLiveWallpaperService - onCreateApplication()");
 	}
-	
-	
-	/** 
-	 * Look at {@link AndroidLiveWallpaperService#initialize(ApplicationListener, AndroidApplicationConfiguration)}}
-	 * @param listener
-	 */
+
+	/** Look at {@link AndroidLiveWallpaperService#initialize(ApplicationListener, AndroidApplicationConfiguration)}
+	 * @param listener */
 	public void initialize (ApplicationListener listener) {
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		initialize(listener, config);
 	}
 
-	/** 
-	 * This method has to be called in the {@link AndroidLiveWallpaperService#onCreateApplication} method. It sets up all the things necessary to get
-	 * input, render via OpenGL and so on. If config.useGL20 is set the AndroidApplication will try to create an OpenGL ES 2.0
-	 * context which can then be used via {@link Graphics#getGL20()}. The {@link GL10} and {@link GL11} interfaces should not be
-	 * used when OpenGL ES 2.0 is enabled. To query whether enabling OpenGL ES 2.0 was successful use the
-	 * {@link Graphics#isGL20Available()} method. You can configure other aspects of the application with the rest of the fields in
-	 * the {@link AndroidApplicationConfiguration} instance.
+	/** This method has to be called in the {@link AndroidLiveWallpaperService#onCreateApplication} method. It sets up all the
+	 * things necessary to get input, render via OpenGL and so on. You can configure other aspects of the application with the rest
+	 * of the fields in the {@link AndroidApplicationConfiguration} instance.
 	 * 
 	 * @param listener the {@link ApplicationListener} implementing the program logic
 	 * @param config the {@link AndroidApplicationConfiguration}, defining various settings of the application (use accelerometer,
-	 *           etc.). Do not change contents of this object after passing to this method!
-	 */
+	 *           etc.). Do not change contents of this object after passing to this method! */
 	public void initialize (ApplicationListener listener, AndroidApplicationConfiguration config) {
 		if (DEBUG) Log.d(TAG, " > AndroidLiveWallpaperService - initialize()");
-		
+
 		app.initialize(listener, config);
-		
+
 		if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) >= 7)
 			linkedEngine.setTouchEventsEnabled(true);
-		
-		//onResume(); do not call it there
+
+		// onResume(); do not call it there
 	}
-	
-	
-	/**
-	 * Getter for SurfaceHolder object, surface holder is required to restore gl context in GLSurfaceView
-	 */
-	public SurfaceHolder getSurfaceHolder() {
+
+	/** Getter for SurfaceHolder object, surface holder is required to restore gl context in GLSurfaceView */
+	public SurfaceHolder getSurfaceHolder () {
 		if (DEBUG) Log.d(TAG, " > AndroidLiveWallpaperService - getSurfaceHolder()");
-		
+
 		synchronized (sync) {
 			if (linkedEngine == null)
 				return null;
-			else 
+			else
 				return linkedEngine.getSurfaceHolder();
 		}
 	}
-	
-	
+
 	// engines live there
-	
-	
-	/**
-	 * Called when the last engine is ending its live, it can occur when:
-	 * 1. service is dying
-	 * 2. service is switching from one engine to another
-	 * 3. [only my assumption] when wallpaper is not visible and system is going to restore some memory 
-	 * 	for foreground processing by disposing not used wallpaper engine
-	 * We can't destroy app there, because:
-	 * 1. in won't work - gl context is disposed right now and after app.onDestroy() app would stuck somewhere in gl thread synchronizing code
-	 * 2. we don't know if service create more engines, app is shared between them and should stay initialized waiting for new engines
-	 */
+
+	/** Called when the last engine is ending its live, it can occur when: 1. service is dying 2. service is switching from one
+	 * engine to another 3. [only my assumption] when wallpaper is not visible and system is going to restore some memory for
+	 * foreground processing by disposing not used wallpaper engine We can't destroy app there, because: 1. in won't work - gl
+	 * context is disposed right now and after app.onDestroy() app would stuck somewhere in gl thread synchronizing code 2. we
+	 * don't know if service create more engines, app is shared between them and should stay initialized waiting for new engines */
 	public void onDeepPauseApplication () {
 		if (DEBUG) Log.d(TAG, " > AndroidLiveWallpaperService - onDeepPauseApplication()");
-		
+
 		// free native resources consuming runtime memory, note that it can cause some lag when resuming wallpaper
 		if (app != null) {
 			app.graphics.clearManagedCaches();
 		}
 	}
-	
-	
-	/**
-	 * Service is dying, and will not be used again.
-	 * You have to finish execution off all living threads there or short after there, 
-	 * besides the new wallpaper service wouldn't be able to start.
-	 */
+
+	/** Service is dying, and will not be used again. You have to finish execution off all living threads there or short after
+	 * there, besides the new wallpaper service wouldn't be able to start. */
 	@Override
 	public void onDestroy () {
 		if (DEBUG) Log.d(TAG, " > AndroidLiveWallpaperService - onDestroy() " + hashCode());
 		Log.i(TAG, "service destroyed");
-		
-		super.onDestroy();	// can call engine.onSurfaceDestroyed, must be before bellow code:
-		
+
+		super.onDestroy(); // can call engine.onSurfaceDestroyed, must be before bellow code:
+
 		if (app != null) {
 			app.onDestroy();
-			
+
 			app = null;
 			view = null;
 		}
 	}
-	
-	
+
 	@Override
 	protected void finalize () throws Throwable {
 		Log.i(TAG, "service finalized");
 		super.finalize();
 	}
-	
+
 	// end of lifecycle methods ////////////////////////////////////////////////////////
-	
-	
-	
-	public AndroidLiveWallpaper getLiveWallpaper() {
+
+	public AndroidLiveWallpaper getLiveWallpaper () {
 		return app;
 	}
-	
-	
-	public WindowManager getWindowManager() {
+
+	public WindowManager getWindowManager () {
 		return (WindowManager)getSystemService(Context.WINDOW_SERVICE);
 	}
-	
-	
-	/**
-	 * Bridge between surface on which wallpaper is rendered and the wallpaper service. 
-	 * The problem is that there can be a group of Engines at one time and we must share libGDX application between them.
+
+	/** Bridge between surface on which wallpaper is rendered and the wallpaper service. The problem is that there can be a group of
+	 * Engines at one time and we must share libGDX application between them.
 	 * 
-	 * @author libGDX team and Jaroslaw Wisniewski <j.wisniewski@appsisle.com>
-	 *
-	 */
+	 * @author libGDX team and Jaroslaw Wisniewski <j.wisniewski@appsisle.com> */
 	public class AndroidWallpaperEngine extends Engine {
 
 		protected boolean engineIsVisible = false;
-		
+
 		// destination format of surface when this engine is active (updated in onSurfaceChanged)
 		protected int engineFormat;
 		protected int engineWidth;
 		protected int engineHeight;
-		
-		
+
 		// lifecycle methods - the order of calling (flow) is maintained /////////////////
-		
+
 		public AndroidWallpaperEngine () {
 			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine() " + hashCode());
 		}
 
-		
 		@Override
 		public void onCreate (final SurfaceHolder surfaceHolder) {
-			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onCreate() " + hashCode() + " running: " + engines + ", linked: " + (linkedEngine == this) + ", thread: " + Thread.currentThread().toString());
+			if (DEBUG)
+				Log.d(TAG, " > AndroidWallpaperEngine - onCreate() " + hashCode() + " running: " + engines + ", linked: "
+					+ (linkedEngine == this) + ", thread: " + Thread.currentThread().toString());
 			super.onCreate(surfaceHolder);
 		}
-		
-		
-		/**
-		 * Called before surface holder callbacks (ex for GLSurfaceView)!
-		 * This is called immediately after the surface is first created. Implementations of this should start 
-		 * up whatever rendering code they desire. Note that only one thread can ever draw into a Surface, 
-		 * so you should not draw into the Surface here if your normal rendering will be in another thread.
-		 */
+
+		/** Called before surface holder callbacks (ex for GLSurfaceView)! This is called immediately after the surface is first
+		 * created. Implementations of this should start up whatever rendering code they desire. Note that only one thread can ever
+		 * draw into a Surface, so you should not draw into the Surface here if your normal rendering will be in another thread. */
 		@Override
 		public void onSurfaceCreated (final SurfaceHolder holder) {
-			engines ++;
+			engines++;
 			setLinkedEngine(this);
-			
-			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onSurfaceCreated() " + hashCode() + ", running: " + engines + ", linked: " + (linkedEngine == this));
+
+			if (DEBUG)
+				Log.d(TAG, " > AndroidWallpaperEngine - onSurfaceCreated() " + hashCode() + ", running: " + engines + ", linked: "
+					+ (linkedEngine == this));
 			Log.i(TAG, "engine surface created");
-			
+
 			super.onSurfaceCreated(holder);
-	
+
 			if (engines == 1) {
 				// safeguard: recover attributes that could suffered by unexpected surfaceDestroy event
 				visibleEngines = 0;
 			}
-			
+
 			if (engines == 1 && app == null) {
-				viewFormat = 0;	// must be initialized with zeroes
+				viewFormat = 0; // must be initialized with zeroes
 				viewWidth = 0;
 				viewHeight = 0;
-				
+
 				app = new AndroidLiveWallpaper(AndroidLiveWallpaperService.this);
-				
+
 				onCreateApplication();
 				if (app.graphics == null)
-					throw new Error("You must override 'AndroidLiveWallpaperService.onCreateApplication' method and call 'initialize' from its body.");
+					throw new Error(
+						"You must override 'AndroidLiveWallpaperService.onCreateApplication' method and call 'initialize' from its body.");
 			}
 
 			view = (SurfaceHolder.Callback)app.graphics.view;
-			this.getSurfaceHolder().removeCallback(view);	// we are going to call this events manually
+			this.getSurfaceHolder().removeCallback(view); // we are going to call this events manually
 
 			// inherit format from shared surface view
 			engineFormat = viewFormat;
@@ -333,86 +280,79 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 
 			if (engines == 1) {
 				view.surfaceCreated(holder);
-			}
-			else {
+			} else {
 				// this combination of methods is described in AndroidWallpaperEngine.onResume
 				view.surfaceDestroyed(holder);
 				notifySurfaceChanged(engineFormat, engineWidth, engineHeight, false);
 				view.surfaceCreated(holder);
 			}
-			
+
 			notifyPreviewState();
 			notifyOffsetsChanged();
 			if (!Gdx.graphics.isContinuousRendering()) {
 				Gdx.graphics.requestRendering();
 			}
 		}
-		
-		
-		/**
-		 * This is called immediately after any structural changes (format or size) have been made to the surface. 
-		 * You should at this point update the imagery in the surface. This method is always called at least once, 
-		 * after surfaceCreated(SurfaceHolder).
-		 */
+
+		/** This is called immediately after any structural changes (format or size) have been made to the surface. You should at
+		 * this point update the imagery in the surface. This method is always called at least once, after
+		 * surfaceCreated(SurfaceHolder). */
 		@Override
 		public void onSurfaceChanged (final SurfaceHolder holder, final int format, final int width, final int height) {
-			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onSurfaceChanged() isPreview: " + isPreview() + ", " + hashCode() + ", running: " + engines + ", linked: " + (linkedEngine == this) + ", sufcace valid: " + getSurfaceHolder().getSurface().isValid());
+			if (DEBUG)
+				Log.d(TAG, " > AndroidWallpaperEngine - onSurfaceChanged() isPreview: " + isPreview() + ", " + hashCode()
+					+ ", running: " + engines + ", linked: " + (linkedEngine == this) + ", sufcace valid: "
+					+ getSurfaceHolder().getSurface().isValid());
 			Log.i(TAG, "engine surface changed");
-			
+
 			super.onSurfaceChanged(holder, format, width, height);
-			
+
 			notifySurfaceChanged(format, width, height, true);
-			
+
 			// it shouldn't be required there (as I understand android.service.wallpaper.WallpaperService impl)
-			//notifyPreviewState();
+			// notifyPreviewState();
 		}
 
-		
-		/**
-		 * Notifies shared GLSurfaceView about changed surface format.
+		/** Notifies shared GLSurfaceView about changed surface format.
 		 * @param format
 		 * @param width
 		 * @param height
-		 * @param forceUpdate if false, surface view will be notified only if currently contains expired information
-		 */
-		private void notifySurfaceChanged(final int format, final int width, final int height, boolean forceUpdate)
-		{
+		 * @param forceUpdate if false, surface view will be notified only if currently contains expired information */
+		private void notifySurfaceChanged (final int format, final int width, final int height, boolean forceUpdate) {
 			if (!forceUpdate && format == viewFormat && width == viewWidth && height == viewHeight) {
 				// skip if didn't changed
 				if (DEBUG) Log.d(TAG, " > surface is current, skipping surfaceChanged event");
-			}
-			else {
+			} else {
 				// update engine desired surface format
 				engineFormat = format;
 				engineWidth = width;
 				engineHeight = height;
-				
+
 				// update surface view if engine is linked with it already
 				if (linkedEngine == this) {
 					viewFormat = engineFormat;
 					viewWidth = engineWidth;
 					viewHeight = engineHeight;
 					view.surfaceChanged(this.getSurfaceHolder(), viewFormat, viewWidth, viewHeight);
-				}
-				else {
+				} else {
 					if (DEBUG) Log.d(TAG, " > engine is not active, skipping surfaceChanged event");
 				}
 			}
 		}
-		
 
-		/**
-		 * Called to inform you of the wallpaper becoming visible or hidden. It is very important that 
-		 * a wallpaper only use CPU while it is visible..
-		 */
+		/** Called to inform you of the wallpaper becoming visible or hidden. It is very important that a wallpaper only use CPU
+		 * while it is visible.. */
 		@Override
 		public void onVisibilityChanged (final boolean visible) {
 			boolean reportedVisible = isVisible();
 
-			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onVisibilityChanged(paramVisible: " + visible + " reportedVisible: " + reportedVisible + ") " + hashCode()  + ", sufcace valid: " + getSurfaceHolder().getSurface().isValid());
+			if (DEBUG)
+				Log.d(TAG, " > AndroidWallpaperEngine - onVisibilityChanged(paramVisible: " + visible + " reportedVisible: "
+					+ reportedVisible + ") " + hashCode() + ", sufcace valid: " + getSurfaceHolder().getSurface().isValid());
 			super.onVisibilityChanged(visible);
 
-			// Android WallpaperService sends fake visibility changed events to force some buggy live wallpapers to shut down after onSurfaceChanged when they aren't visible, it can cause problems in current implementation and it is not necessary
+			// Android WallpaperService sends fake visibility changed events to force some buggy live wallpapers to shut down after
+// onSurfaceChanged when they aren't visible, it can cause problems in current implementation and it is not necessary
 			if (reportedVisible == false && visible == true) {
 				if (DEBUG) Log.d(TAG, " > fake visibilityChanged event! Android WallpaperService likes do that!");
 				return;
@@ -421,48 +361,45 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 			notifyVisibilityChanged(visible);
 		}
 
-		
-		private void notifyVisibilityChanged(final boolean visible)
-		{
+		private void notifyVisibilityChanged (final boolean visible) {
 			if (this.engineIsVisible != visible) {
 				this.engineIsVisible = visible;
-				
+
 				if (this.engineIsVisible)
 					onResume();
 				else
 					onPause();
-			}
-			else {
+			} else {
 				if (DEBUG) Log.d(TAG, " > visible state is current, skipping visibilityChanged event!");
 			}
 		}
-		
-		
+
 		public void onResume () {
-			visibleEngines ++;
-			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onResume() " + hashCode() + ", running: " + engines + ", linked: " + (linkedEngine == this) + ", visible: " + visibleEngines);
+			visibleEngines++;
+			if (DEBUG)
+				Log.d(TAG, " > AndroidWallpaperEngine - onResume() " + hashCode() + ", running: " + engines + ", linked: "
+					+ (linkedEngine == this) + ", visible: " + visibleEngines);
 			Log.i(TAG, "engine resumed");
-			
+
 			if (linkedEngine != null) {
 				if (linkedEngine != this) {
 					setLinkedEngine(this);
-					
+
 					// disconnect surface view from previous window
-					view.surfaceDestroyed(this.getSurfaceHolder());	// force gl surface reload, new instance will be created on current surface holder
-					
+					view.surfaceDestroyed(this.getSurfaceHolder()); // force gl surface reload, new instance will be created on current
+// surface holder
+
 					// resize surface to match window associated with current engine
 					notifySurfaceChanged(engineFormat, engineWidth, engineHeight, false);
 
 					// connect surface view to current engine
 					view.surfaceCreated(this.getSurfaceHolder());
-				}
-				else {
+				} else {
 					// update if surface changed when engine wasn't active
 					notifySurfaceChanged(engineFormat, engineWidth, engineHeight, false);
 				}
-				
-				if (visibleEngines == 1)
-					app.onResume();
+
+				if (visibleEngines == 1) app.onResume();
 
 				notifyPreviewState();
 				notifyOffsetsChanged();
@@ -471,96 +408,90 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 				}
 			}
 		}
-		
-		
+
 		public void onPause () {
-			visibleEngines --;
-			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onPause() " + hashCode() + ", running: " + engines + ", linked: " + (linkedEngine == this) + ", visible: " + visibleEngines);
+			visibleEngines--;
+			if (DEBUG)
+				Log.d(TAG, " > AndroidWallpaperEngine - onPause() " + hashCode() + ", running: " + engines + ", linked: "
+					+ (linkedEngine == this) + ", visible: " + visibleEngines);
 			Log.i(TAG, "engine paused");
-			
-			// this shouldn't never happen, but if it will.. live wallpaper will not be stopped when device will pause and lwp will drain battery.. shortly!
+
+			// this shouldn't never happen, but if it will.. live wallpaper will not be stopped when device will pause and lwp will
+// drain battery.. shortly!
 			if (visibleEngines >= engines) {
 				Log.e(AndroidLiveWallpaperService.TAG, "wallpaper lifecycle error, counted too many visible engines! repairing..");
 				visibleEngines = Math.max(engines - 1, 0);
 			}
-			
+
 			if (linkedEngine != null) {
-				if (visibleEngines == 0)
-					app.onPause();
+				if (visibleEngines == 0) app.onPause();
 			}
-			
+
 			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onPause() done!");
 		}
 
-		
-		/**
-		 * Called after surface holder callbacks (ex for GLSurfaceView)!
-		 * This is called immediately before a surface is being destroyed. After returning from this call, 
-		 * you should no longer try to access this surface. If you have a rendering thread that directly 
-		 * accesses the surface, you must ensure that thread is no longer touching the Surface before 
-		 * returning from this function.
+		/** Called after surface holder callbacks (ex for GLSurfaceView)! This is called immediately before a surface is being
+		 * destroyed. After returning from this call, you should no longer try to access this surface. If you have a rendering
+		 * thread that directly accesses the surface, you must ensure that thread is no longer touching the Surface before returning
+		 * from this function.
 		 * 
-		 * Attention!
-		 * In some cases GL context may be shutdown right now! and SurfaceHolder.Surface.isVaild = false
-		 */
+		 * Attention! In some cases GL context may be shutdown right now! and SurfaceHolder.Surface.isVaild = false */
 		@Override
 		public void onSurfaceDestroyed (final SurfaceHolder holder) {
-			engines --;
-			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onSurfaceDestroyed() " + hashCode()  + ", running: " + engines + " ,linked: " + (linkedEngine == this) + ", isVisible: " + engineIsVisible);
+			engines--;
+			if (DEBUG)
+				Log.d(TAG, " > AndroidWallpaperEngine - onSurfaceDestroyed() " + hashCode() + ", running: " + engines + " ,linked: "
+					+ (linkedEngine == this) + ", isVisible: " + engineIsVisible);
 			Log.i(TAG, "engine surface destroyed");
-			
-			// application can be in resumed state at this moment if app surface had been lost just after it was created (wallpaper selected too fast from preview mode etc)
+
+			// application can be in resumed state at this moment if app surface had been lost just after it was created (wallpaper
+// selected too fast from preview mode etc)
 			// it is too late probably - calling on pause causes deadlock
-			//notifyVisibilityChanged(false);
-			
+			// notifyVisibilityChanged(false);
+
 			// it is too late to call app.onDispose, just free native resources
-			if (engines == 0)
-				onDeepPauseApplication();
-			
+			if (engines == 0) onDeepPauseApplication();
+
 			// free surface if it belongs to this engine and if it was initialized
-			if (linkedEngine == this && view != null)
-				view.surfaceDestroyed(holder);
-		
-			//waitingSurfaceChangedEvent = null;
+			if (linkedEngine == this && view != null) view.surfaceDestroyed(holder);
+
+			// waitingSurfaceChangedEvent = null;
 			engineFormat = 0;
 			engineWidth = 0;
 			engineHeight = 0;
-			
+
 			// safeguard for other engine callbacks
-			if (engines == 0)
-				linkedEngine = null;
-			
+			if (engines == 0) linkedEngine = null;
+
 			super.onSurfaceDestroyed(holder);
 		}
-		
-		
+
 		@Override
 		public void onDestroy () {
 			super.onDestroy();
 		}
 
 		// end of lifecycle methods ////////////////////////////////////////////////////////
-		
-		
+
 		// input
-		
+
 		@Override
 		public Bundle onCommand (final String pAction, final int pX, final int pY, final int pZ, final Bundle pExtras,
 			final boolean pResultRequested) {
-			if (DEBUG) Log.d(TAG, " > AndroidWallpaperEngine - onCommand(" + pAction + " " + pX + " " + pY + " " + pZ + " " + pExtras + " " + pResultRequested + ")" + ", linked: " + (linkedEngine == this));
-			
+			if (DEBUG)
+				Log.d(TAG, " > AndroidWallpaperEngine - onCommand(" + pAction + " " + pX + " " + pY + " " + pZ + " " + pExtras + " "
+					+ pResultRequested + ")" + ", linked: " + (linkedEngine == this));
+
 			return super.onCommand(pAction, pX, pY, pZ, pExtras, pResultRequested);
 		}
-		
-		
+
 		@Override
 		public void onTouchEvent (MotionEvent event) {
 			if (linkedEngine == this) {
 				app.input.onTouch(null, event);
 			}
 		}
-		
-		
+
 		// offsets from last onOffsetsChanged
 		boolean offsetsConsumed = true;
 		float xOffset = 0.0f;
@@ -571,13 +502,13 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 		int yPixelOffset = 0;
 
 		@Override
-		public void onOffsetsChanged (final float xOffset, final float yOffset, final float xOffsetStep, final float yOffsetStep, final int xPixelOffset,
-			final int yPixelOffset) {
+		public void onOffsetsChanged (final float xOffset, final float yOffset, final float xOffsetStep, final float yOffsetStep,
+			final int xPixelOffset, final int yPixelOffset) {
 
 			// it spawns too frequent on some devices - its annoying!
-			//if (DEBUG)
-			//	Log.d(TAG, " > AndroidWallpaperEngine - onOffsetChanged(" + xOffset + " " + yOffset + " " + xOffsetStep + " "
-			//		+ yOffsetStep + " " + xPixelOffset + " " + yPixelOffset + ") " + hashCode() + ", linkedApp: " + (linkedApp != null));
+			// if (DEBUG)
+			// Log.d(TAG, " > AndroidWallpaperEngine - onOffsetChanged(" + xOffset + " " + yOffset + " " + xOffsetStep + " "
+			// + yOffsetStep + " " + xPixelOffset + " " + yPixelOffset + ") " + hashCode() + ", linkedApp: " + (linkedApp != null));
 
 			this.offsetsConsumed = false;
 			this.xOffset = xOffset;
@@ -586,41 +517,40 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 			this.yOffsetStep = yOffsetStep;
 			this.xPixelOffset = xPixelOffset;
 			this.yPixelOffset = yPixelOffset;
-			
+
 			// can fail if linkedApp == null, so we repeat it in Engine.onResume
 			notifyOffsetsChanged();
 			if (!Gdx.graphics.isContinuousRendering()) {
 				Gdx.graphics.requestRendering();
 			}
-			
+
 			super.onOffsetsChanged(xOffset, yOffset, xOffsetStep, yOffsetStep, xPixelOffset, yPixelOffset);
 		}
-		
-		
-		protected void notifyOffsetsChanged()
-		{
+
+		protected void notifyOffsetsChanged () {
 			if (linkedEngine == this && app.listener instanceof AndroidWallpaperListener) {
-				if (!offsetsConsumed) {		// no need for more sophisticated synchronization - offsetsChanged can be called multiple times and with various patterns on various devices - user application must be prepared for that
+				if (!offsetsConsumed) { // no need for more sophisticated synchronization - offsetsChanged can be called multiple
+// times and with various patterns on various devices - user application must be prepared for that
 					offsetsConsumed = true;
-					
+
 					app.postRunnable(new Runnable() {
 						@Override
 						public void run () {
 							boolean isCurrent = false;
 							synchronized (sync) {
-								isCurrent = (linkedEngine == AndroidWallpaperEngine.this);		// without this app can crash when fast switching between engines (tested!)
+								isCurrent = (linkedEngine == AndroidWallpaperEngine.this); // without this app can crash when fast
+// switching between engines (tested!)
 							}
 							if (isCurrent)
-								((AndroidWallpaperListener)app.listener).offsetChange(xOffset, yOffset, xOffsetStep, yOffsetStep, xPixelOffset, yPixelOffset);	
+								((AndroidWallpaperListener)app.listener).offsetChange(xOffset, yOffset, xOffsetStep, yOffsetStep,
+									xPixelOffset, yPixelOffset);
 						}
 					});
 				}
 			}
 		}
-		
-		
-		protected void notifyPreviewState()
-		{
+
+		protected void notifyPreviewState () {
 			// notify preview state to app listener
 			if (linkedEngine == this && app.listener instanceof AndroidWallpaperListener) {
 				final boolean currentPreviewState = linkedEngine.isPreview();
@@ -635,9 +565,10 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 								shouldNotify = true;
 							}
 						}
-						
+
 						if (shouldNotify) {
-							AndroidLiveWallpaper currentApp = app;		// without this app can crash when fast switching between engines (tested!)
+							AndroidLiveWallpaper currentApp = app; // without this app can crash when fast switching between engines
+// (tested!)
 							if (currentApp != null)
 								((AndroidWallpaperListener)currentApp.listener).previewStateChange(currentPreviewState);
 						}
@@ -645,5 +576,5 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 				});
 			}
 		}
-	}	
+	}
 }
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidNet.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidNet.java
index 85f5666..11492a3 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidNet.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidNet.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.backends.android;
 
 import android.content.Intent;
@@ -47,7 +48,7 @@ public class AndroidNet implements Net {
 	public void sendHttpRequest (HttpRequest httpRequest, final HttpResponseListener httpResponseListener) {
 		netJavaImpl.sendHttpRequest(httpRequest, httpResponseListener);
 	}
-	
+
 	@Override
 	public void cancelHttpRequest (HttpRequest httpRequest) {
 		netJavaImpl.cancelHttpRequest(httpRequest);
@@ -65,7 +66,7 @@ public class AndroidNet implements Net {
 
 	@Override
 	public void openURI (String URI) {
-		if(app == null) {
+		if (app == null) {
 			Gdx.app.log("AndroidNet", "Can't open browser activity from livewallpaper");
 			return;
 		}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
index 9fa69cd..e3256f3 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
@@ -48,9 +48,8 @@ final class AndroidSound implements Sound {
 	public long play (float volume) {
 		if (streamIds.size == 8) streamIds.pop();
 		int streamId = soundPool.play(soundId, volume, volume, 1, 0, 1);
-		//standardise error code with other backends
-		if (streamId == 0)
-			return -1;
+		// standardise error code with other backends
+		if (streamId == 0) return -1;
 		streamIds.add(streamId);
 		return streamId;
 	}
@@ -64,22 +63,22 @@ final class AndroidSound implements Sound {
 	public void stop (long soundId) {
 		soundPool.stop((int)soundId);
 	}
-	
+
 	@Override
 	public void pause () {
 		soundPool.autoPause();
 	}
-	
+
 	@Override
 	public void pause (long soundId) {
 		soundPool.pause((int)soundId);
 	}
-	
+
 	@Override
 	public void resume () {
 		soundPool.autoResume();
 	}
-	
+
 	@Override
 	public void resume (long soundId) {
 		soundPool.resume((int)soundId);
@@ -104,9 +103,8 @@ final class AndroidSound implements Sound {
 	public long loop (float volume) {
 		if (streamIds.size == 8) streamIds.pop();
 		int streamId = soundPool.play(soundId, volume, volume, 1, -1, 1);
-		//standardise error code with other backends
-		if (streamId == 0)
-			return -1;
+		// standardise error code with other backends
+		if (streamId == 0) return -1;
 		streamIds.add(streamId);
 		return streamId;
 	}
@@ -141,9 +139,8 @@ final class AndroidSound implements Sound {
 			leftVolume *= (1 - Math.abs(pan));
 		}
 		int streamId = soundPool.play(soundId, leftVolume, rightVolume, 1, 0, pitch);
-		//standardise error code with other backends
-		if (streamId == 0)
-			return -1;
+		// standardise error code with other backends
+		if (streamId == 0) return -1;
 		streamIds.add(streamId);
 		return streamId;
 	}
@@ -159,9 +156,8 @@ final class AndroidSound implements Sound {
 			leftVolume *= (1 - Math.abs(pan));
 		}
 		int streamId = soundPool.play(soundId, leftVolume, rightVolume, 1, -1, pitch);
-		//standardise error code with other backends
-		if (streamId == 0)
-			return -1;
+		// standardise error code with other backends
+		if (streamId == 0) return -1;
 		streamIds.add(streamId);
 		return streamId;
 	}
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidVisibilityListener.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidVisibilityListener.java
index 2bcfd8b..1c4179a 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidVisibilityListener.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidVisibilityListener.java
@@ -13,14 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.backends.android;
 
 import android.view.View;
 
-/**
- * Allows immersive mode support while maintaining compatibility with Android versions before API Level 19 (4.4)
- * @author Unkn0wn0ne
- */
+/** Allows immersive mode support while maintaining compatibility with Android versions before API Level 19 (4.4)
+ * @author Unkn0wn0ne */
 public class AndroidVisibilityListener {
 
 	public void createListener (final AndroidApplicationBase application) {
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidWallpaperListener.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidWallpaperListener.java
index 564d0f8..9f4e977 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidWallpaperListener.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidWallpaperListener.java
@@ -16,43 +16,31 @@ package com.badlogic.gdx.backends.android;
 
 import com.badlogic.gdx.ApplicationListener;
 
-/**
- * Implement this listener in your libGDX application additionally to {@link ApplicationListener} if you want 
- * receive live wallpaper specific events, ex:
- * MyApplication implements ApplicationListener, AndroidWallpaperListener
+/** Implement this listener in your libGDX application additionally to {@link ApplicationListener} if you want receive live
+ * wallpaper specific events, ex: MyApplication implements ApplicationListener, AndroidWallpaperListener
  * 
- * Notice!
- * This callbacks will work only if app is running as android live wallpaper: 
- * you have to link application with AndroidLiveWallpaperService from
- * in gdx-android-backend
+ * Notice! This callbacks will work only if app is running as android live wallpaper: you have to link application with
+ * AndroidLiveWallpaperService from in gdx-android-backend
  * 
- * Notice libGDX developers!
- * If you do not like android specific classes in gdx backend, you can rename this class to for example:
- * com.badlogic.gdx.WallpaperListener so it will be 'generic' and not 'android specific', 
- * but besides of point of view the fact is that live wallpapers are available only on android devices so far.
+ * Notice libGDX developers! If you do not like android specific classes in gdx backend, you can rename this class to for example:
+ * com.badlogic.gdx.WallpaperListener so it will be 'generic' and not 'android specific', but besides of point of view the fact is
+ * that live wallpapers are available only on android devices so far.
  * 
- * @author Jaroslaw Wisniewski <j.wisniewski@appsisle.com>
- *
- */
+ * @author Jaroslaw Wisniewski <j.wisniewski@appsisle.com> */
 public interface AndroidWallpaperListener {
 
-	/**
-	 * Called on the rendering thread after the live wallpaper's offset had changed.
+	/** Called on the rendering thread after the live wallpaper's offset had changed.
 	 * @param xOffset
 	 * @param yOffset
 	 * @param xOffsetStep
 	 * @param yOffsetStep
 	 * @param xPixelOffset
-	 * @param yPixelOffset
-	 */
-	abstract void offsetChange (float xOffset, float yOffset, float xOffsetStep, float yOffsetStep, int xPixelOffset, int yPixelOffset);
+	 * @param yPixelOffset */
+	abstract void offsetChange (float xOffset, float yOffset, float xOffsetStep, float yOffsetStep, int xPixelOffset,
+		int yPixelOffset);
 
-	/**
-	 * Called after 'isPreview' state had changed. First time called just after application initialization.
-	 * @param isPreview current status, save this value and update always when this method is called if you want
-	 * track live wallpaper isPreview status.
-	 * 
-	 * 
-	 */
+	/** Called after 'isPreview' state had changed. First time called just after application initialization.
+	 * @param isPreview current status, save this value and update always when this method is called if you want track live
+	 *           wallpaper isPreview status. */
 	abstract void previewStateChange (boolean isPreview);
 }
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/InputProcessorLW.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/InputProcessorLW.java
index 60b0af8..b918d5e 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/InputProcessorLW.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/InputProcessorLW.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.backends.android;
 
 import com.badlogic.gdx.InputProcessor;
 
+public interface InputProcessorLW extends InputProcessor {
+
+	public void touchDrop (int x, int y);
 
-public interface InputProcessorLW extends InputProcessor{
-		
-	public void touchDrop(int x, int y);
-	
 }
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLBaseSurfaceView.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLBaseSurfaceView.java
index 8935765..581b9e0 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLBaseSurfaceView.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLBaseSurfaceView.java
@@ -126,6 +126,7 @@ import android.view.SurfaceHolder;
  * 
  * 
  * 
+ * 
  * </pre> */
 public class GLBaseSurfaceView extends GLSurfaceView implements SurfaceHolder.Callback {
 	private final static boolean LOG_THREADS = false;
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
index ddc193c..c67b292 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
@@ -72,9 +72,10 @@ public class GLSurfaceView20 extends GLSurfaceView {
 			public boolean deleteSurroundingText (int beforeLength, int afterLength) {
 				int sdkVersion = Integer.parseInt(android.os.Build.VERSION.SDK);
 				if (sdkVersion >= 16) {
-					/* In Jelly Bean, they don't send key events for delete.
-					 *  Instead, they send beforeLength = 1, afterLength = 0.
-					 *  So, we'll just simulate what it used to do. */
+					/*
+					 * In Jelly Bean, they don't send key events for delete. Instead, they send beforeLength = 1, afterLength = 0. So,
+					 * we'll just simulate what it used to do.
+					 */
 					if (beforeLength == 1 && afterLength == 0) {
 						sendDownUpKeyEventForBackwardCompatibility(KeyEvent.KEYCODE_DEL);
 						return true;
@@ -82,6 +83,7 @@ public class GLSurfaceView20 extends GLSurfaceView {
 				}
 				return super.deleteSurroundingText(beforeLength, afterLength);
 			}
+
 			private void sendDownUpKeyEventForBackwardCompatibility (final int code) {
 				final long eventTime = SystemClock.uptimeMillis();
 				super.sendKeyEvent(new KeyEvent(eventTime, eventTime, KeyEvent.ACTION_DOWN, code, 0, 0,
@@ -92,7 +94,7 @@ public class GLSurfaceView20 extends GLSurfaceView {
 		};
 		return connection;
 	}
-	
+
 	private void init (boolean translucent, int depth, int stencil) {
 
 		/*
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GdxEglConfigChooser.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GdxEglConfigChooser.java
index e44bcd2..8f47f48 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GdxEglConfigChooser.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GdxEglConfigChooser.java
@@ -49,7 +49,8 @@ public class GdxEglConfigChooser implements GLSurfaceView.EGLConfigChooser {
 		mStencilSize = stencil;
 		mNumSamples = numSamples;
 
-		mConfigAttribs = new int[] {EGL10.EGL_RED_SIZE, 4, EGL10.EGL_GREEN_SIZE, 4, EGL10.EGL_BLUE_SIZE, 4, EGL10.EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT, EGL10.EGL_NONE};
+		mConfigAttribs = new int[] {EGL10.EGL_RED_SIZE, 4, EGL10.EGL_GREEN_SIZE, 4, EGL10.EGL_BLUE_SIZE, 4,
+			EGL10.EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT, EGL10.EGL_NONE};
 	}
 
 	public EGLConfig chooseConfig (EGL10 egl, EGLDisplay display) {
@@ -81,7 +82,7 @@ public class GdxEglConfigChooser implements GLSurfaceView.EGLConfigChooser {
 	public EGLConfig chooseConfig (EGL10 egl, EGLDisplay display, EGLConfig[] configs) {
 		EGLConfig best = null;
 		EGLConfig bestAA = null;
-		EGLConfig safe = null; //default back to 565 when no exact match found
+		EGLConfig safe = null; // default back to 565 when no exact match found
 
 		for (EGLConfig config : configs) {
 			int d = findConfigAttrib(egl, display, config, EGL10.EGL_DEPTH_SIZE, 0);
@@ -139,7 +140,7 @@ public class GdxEglConfigChooser implements GLSurfaceView.EGLConfigChooser {
 
 		if (bestAA != null)
 			return bestAA;
-		else if (best!=null)
+		else if (best != null)
 			return best;
 		else
 			return safe;
diff --git a/backends/gdx-backend-headless/.classpath b/backends/gdx-backend-headless/.classpath
new file mode 100644
index 0000000..6b1f1d7
--- /dev/null
+++ b/backends/gdx-backend-headless/.classpath
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry combineaccessrules="false" exported="true" kind="src" path="/gdx"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/backends/gdx-backend-headless/.project b/backends/gdx-backend-headless/.project
new file mode 100644
index 0000000..a447ff0
--- /dev/null
+++ b/backends/gdx-backend-headless/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>gdx-backend-headless</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/mock/graphics/MockGraphics.java b/backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/mock/graphics/MockGraphics.java
index a99d753..bbe672b 100644
--- a/backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/mock/graphics/MockGraphics.java
+++ b/backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/mock/graphics/MockGraphics.java
@@ -19,7 +19,6 @@ package com.badlogic.gdx.backends.headless.mock.graphics;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 
 /** The headless backend does its best to mock elements. This is intended to make code-sharing between
  * server and client as simple as possible.
@@ -37,11 +36,6 @@ public class MockGraphics implements Graphics {
 	}
 
 	@Override
-	public GLCommon getGLCommon() {
-		return null;
-	}
-
-	@Override
 	public GL20 getGL20() {
 		return null;
 	}
diff --git a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
index 15d6142..77744e1 100644
--- a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
+++ b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
@@ -60,19 +60,18 @@ public class JglfwApplication implements Application {
 	private int foregroundFPS, backgroundFPS, hiddenFPS;
 
 	public JglfwApplication (ApplicationListener listener) {
-		this(listener, listener.getClass().getSimpleName(), 640, 480, false);
+		this(listener, listener.getClass().getSimpleName(), 640, 480);
 	}
 
-	public JglfwApplication (ApplicationListener listener, String title, int width, int height, boolean useGL2) {
-		this(listener, createConfig(title, width, height, useGL2));
+	public JglfwApplication (ApplicationListener listener, String title, int width, int height) {
+		this(listener, createConfig(title, width, height));
 	}
 
-	static private JglfwApplicationConfiguration createConfig (String title, int width, int height, boolean useGL2) {
+	static private JglfwApplicationConfiguration createConfig (String title, int width, int height) {
 		JglfwApplicationConfiguration config = new JglfwApplicationConfiguration();
 		config.title = title;
 		config.width = width;
 		config.height = height;
-		config.useGL20 = useGL2;
 		return config;
 	}
 
diff --git a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
index bdb82de..7c49a80 100644
--- a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
+++ b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
@@ -12,86 +12,84 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.backends.jglfw;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics.DisplayMode;
-import com.badlogic.gdx.backends.jglfw.JglfwGraphics.JglfwDisplayMode;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.utils.Array;
-
-import java.awt.GraphicsDevice;
-import java.awt.GraphicsEnvironment;
-
-/** @author Nathan Sweet */
-public class JglfwApplicationConfiguration {
-	/** Title of application window. **/
-	public String title = "";
-	/** Initial width of the application window. **/
-	public int width = 640;
-	/** Initial height of the application window. **/
-	public int height = 480;
-	/** Intial x coordinate of the application window, -1 for center. **/
-	public int x = -1;
-	/** Intial x coordinate of the application window, -1 for center. **/
-	public int y = -1;
-	/** True to start in fullscreen. **/
-	public boolean fullscreen;
-	/** Monitor index to use for fullscreen. **/
-	public int fullscreenMonitorIndex = -1;
-	/** Number of bits per color channel. **/
-	public int r = 8, g = 8, b = 8, a = 8;
-	/** Number of bits for the depth buffer. **/
-	public int depth = 16;
-	/** Number of bits for the stencil buffer. **/
-	public int stencil = 0;
-	/** Number of samples for MSAA **/
-	public int samples = 0;
-	/** True to enable vsync. **/
-	public boolean vSync = true;
-	/** True if the window is resizable. **/
-	public boolean resizable = true;
-	/** True to attempt to use OpenGL ES 2.0. Note {@link Gdx#gl20} may be null even when this is true. **/
-	public boolean useGL20;
-	/** True to call System.exit() when the main loop is complete. **/
-	public boolean forceExit = true;
-	/** True to have a title and border around the window. **/
-	public boolean undecorated;
-	/** Causes the main loop to run on the EDT instead of a new thread, for easier interoperability with AWT/Swing. Broken on Linux. **/
-	public boolean runOnEDT;
-	/** The color to clear the window immediately after creation. **/
-	public Color initialBackgroundColor = Color.BLACK;
-	/** True to hide the window when it is created. The window must be shown with {@link JglfwGraphics#show()}. **/
-	public boolean hidden;
-	/** Target framerate when the window is in the foreground. The CPU sleeps as needed. Use 0 to never sleep. **/
-	public int foregroundFPS;
-	/** Target framerate when the window is in the background. The CPU sleeps as needed. Use 0 to never sleep, -1 to not render. **/
-	public int backgroundFPS;
-	/** Target framerate when the window is hidden or minimized. The CPU sleeps as needed. Use 0 to never sleep, -1 to not render. **/
-	public int hiddenFPS = -1;
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.jglfw;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Graphics.DisplayMode;
+import com.badlogic.gdx.backends.jglfw.JglfwGraphics.JglfwDisplayMode;
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.utils.Array;
+
+import java.awt.GraphicsDevice;
+import java.awt.GraphicsEnvironment;
+
+/** @author Nathan Sweet */
+public class JglfwApplicationConfiguration {
+	/** Title of application window. **/
+	public String title = "";
+	/** Initial width of the application window. **/
+	public int width = 640;
+	/** Initial height of the application window. **/
+	public int height = 480;
+	/** Intial x coordinate of the application window, -1 for center. **/
+	public int x = -1;
+	/** Intial x coordinate of the application window, -1 for center. **/
+	public int y = -1;
+	/** True to start in fullscreen. **/
+	public boolean fullscreen;
+	/** Monitor index to use for fullscreen. **/
+	public int fullscreenMonitorIndex = -1;
+	/** Number of bits per color channel. **/
+	public int r = 8, g = 8, b = 8, a = 8;
+	/** Number of bits for the depth buffer. **/
+	public int depth = 16;
+	/** Number of bits for the stencil buffer. **/
+	public int stencil = 0;
+	/** Number of samples for MSAA **/
+	public int samples = 0;
+	/** True to enable vsync. **/
+	public boolean vSync = true;
+	/** True if the window is resizable. **/
+	public boolean resizable = true;
+	/** True to call System.exit() when the main loop is complete. **/
+	public boolean forceExit = true;
+	/** True to have a title and border around the window. **/
+	public boolean undecorated;
+	/** Causes the main loop to run on the EDT instead of a new thread, for easier interoperability with AWT/Swing. Broken on Linux. **/
+	public boolean runOnEDT;
+	/** The color to clear the window immediately after creation. **/
+	public Color initialBackgroundColor = Color.BLACK;
+	/** True to hide the window when it is created. The window must be shown with {@link JglfwGraphics#show()}. **/
+	public boolean hidden;
+	/** Target framerate when the window is in the foreground. The CPU sleeps as needed. Use 0 to never sleep. **/
+	public int foregroundFPS;
+	/** Target framerate when the window is in the background. The CPU sleeps as needed. Use 0 to never sleep, -1 to not render. **/
+	public int backgroundFPS;
+	/** Target framerate when the window is hidden or minimized. The CPU sleeps as needed. Use 0 to never sleep, -1 to not render. **/
+	public int hiddenFPS = -1;
 	/** Prefrences location on desktop. Default: current directory + ".prefs" */
 	public String preferencesLocation = ".prefs/";
-	
-	static public DisplayMode[] getDisplayModes () {
-		GraphicsDevice device = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
-		java.awt.DisplayMode desktopMode = device.getDisplayMode();
-		java.awt.DisplayMode[] displayModes = device.getDisplayModes();
-		Array<DisplayMode> modes = new Array();
-		outer:
-		for (java.awt.DisplayMode mode : displayModes) {
-			for (DisplayMode other : modes)
-				if (other.width == mode.getWidth() && other.height == mode.getHeight() && other.bitsPerPixel == mode.getBitDepth())
-					continue outer; // Duplicate.
-			if (mode.getBitDepth() != desktopMode.getBitDepth()) continue;
-			modes.add(new JglfwDisplayMode(mode.getWidth(), mode.getHeight(), mode.getRefreshRate(), mode.getBitDepth()));
-		}
-		return modes.toArray(DisplayMode.class);
-	}
-
-	static public DisplayMode getDesktopDisplayMode () {
-		java.awt.DisplayMode mode = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode();
-		return new JglfwDisplayMode(mode.getWidth(), mode.getHeight(), mode.getRefreshRate(), mode.getBitDepth());
-	}
-}
\ No newline at end of file
+
+	static public DisplayMode[] getDisplayModes () {
+		GraphicsDevice device = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
+		java.awt.DisplayMode desktopMode = device.getDisplayMode();
+		java.awt.DisplayMode[] displayModes = device.getDisplayModes();
+		Array<DisplayMode> modes = new Array();
+		outer:
+		for (java.awt.DisplayMode mode : displayModes) {
+			for (DisplayMode other : modes)
+				if (other.width == mode.getWidth() && other.height == mode.getHeight() && other.bitsPerPixel == mode.getBitDepth())
+					continue outer; // Duplicate.
+			if (mode.getBitDepth() != desktopMode.getBitDepth()) continue;
+			modes.add(new JglfwDisplayMode(mode.getWidth(), mode.getHeight(), mode.getRefreshRate(), mode.getBitDepth()));
+		}
+		return modes.toArray(DisplayMode.class);
+	}
+
+	static public DisplayMode getDesktopDisplayMode () {
+		java.awt.DisplayMode mode = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode();
+		return new JglfwDisplayMode(mode.getWidth(), mode.getHeight(), mode.getRefreshRate(), mode.getBitDepth());
+	}
+}
diff --git a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGL20.java b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGL20.java
index 2c14a1c..0ec45a4 100644
--- a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGL20.java
+++ b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGL20.java
@@ -12,597 +12,597 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.backends.jglfw;
-
-import static com.badlogic.jglfw.utils.Memory.*;
-
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.jglfw.gl.GL;
-
-import java.nio.Buffer;
-import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
-
-public class JglfwGL20 implements GL20 {
-	public void glActiveTexture (int texture) {
-		GL.glActiveTexture(texture);
-	}
-
-	public void glBindTexture (int target, int texture) {
-		GL.glBindTexture(target, texture);
-	}
-
-	public void glBlendFunc (int sfactor, int dfactor) {
-		GL.glBlendFunc(sfactor, dfactor);
-	}
-
-	public void glClear (int mask) {
-		GL.glClear(mask);
-	}
-
-	public void glClearColor (float red, float green, float blue, float alpha) {
-		GL.glClearColor(red, green, blue, alpha);
-	}
-
-	public void glClearDepthf (float depth) {
-		GL.glClearDepthf(depth);
-	}
-
-	public void glClearStencil (int s) {
-		GL.glClearStencil(s);
-	}
-
-	public void glColorMask (boolean red, boolean green, boolean blue, boolean alpha) {
-		GL.glColorMask(red, green, blue, alpha);
-	}
-
-	public void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border,
-		int imageSize, Buffer data) {
-		GL.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data, getPosition(data));
-	}
-
-	public void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format,
-		int imageSize, Buffer data) {
-		GL.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data, getPosition(data));
-	}
-
-	public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {
-		GL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
-	}
-
-	public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
-		GL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
-	}
-
-	public void glCullFace (int mode) {
-		GL.glCullFace(mode);
-	}
-
-	public void glDeleteTextures (int n, IntBuffer textures) {
-		GL.glDeleteTextures(n, textures, getPosition(textures));
-	}
-
-	public void glDepthFunc (int func) {
-		GL.glDepthFunc(func);
-	}
-
-	public void glDepthMask (boolean flag) {
-		GL.glDepthMask(flag);
-	}
-
-	public void glDepthRangef (float zNear, float zFar) {
-		GL.glDepthRangef(zNear, zFar);
-	}
-
-	public void glDisable (int cap) {
-		GL.glDisable(cap);
-	}
-
-	public void glDrawArrays (int mode, int first, int count) {
-		GL.glDrawArrays(mode, first, count);
-	}
-
-	public void glDrawElements (int mode, int count, int type, Buffer indices) {
-		GL.glDrawElements(mode, count, type, indices, getPosition(indices));
-	}
-
-	public void glEnable (int cap) {
-		GL.glEnable(cap);
-	}
-
-	public void glFinish () {
-		GL.glFinish();
-	}
-
-	public void glFlush () {
-		GL.glFlush();
-	}
-
-	public void glFrontFace (int mode) {
-		GL.glFrontFace(mode);
-	}
-
-	public void glGenTextures (int n, IntBuffer textures) {
-		GL.glGenTextures(n, textures, getPosition(textures));
-	}
-
-	public int glGetError () {
-		return GL.glGetError();
-	}
-
-	public void glGetIntegerv (int pname, IntBuffer params) {
-		GL.glGetIntegerv(pname, params, getPosition(params));
-	}
-
-	public String glGetString (int name) {
-		return GL.glGetString(name);
-	}
-
-	public void glHint (int target, int mode) {
-		GL.glHint(target, mode);
-	}
-
-	public void glLineWidth (float width) {
-		GL.glLineWidth(width);
-	}
-
-	public void glPixelStorei (int pname, int param) {
-		GL.glPixelStorei(pname, param);
-	}
-
-	public void glPolygonOffset (float factor, float units) {
-		GL.glPolygonOffset(factor, units);
-	}
-
-	public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
-		GL.glReadPixels(x, y, width, height, format, type, pixels, getPosition(pixels));
-	}
-
-	public void glScissor (int x, int y, int width, int height) {
-		GL.glScissor(x, y, width, height);
-	}
-
-	public void glStencilFunc (int func, int ref, int mask) {
-		GL.glStencilFunc(func, ref, mask);
-	}
-
-	public void glStencilMask (int mask) {
-		GL.glStencilMask(mask);
-	}
-
-	public void glStencilOp (int fail, int zfail, int zpass) {
-		GL.glStencilOp(fail, zfail, zpass);
-	}
-
-	public void glTexImage2D (int target, int level, int internalFormat, int width, int height, int border, int format, int type,
-		Buffer pixels) {
-		GL.glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels, getPosition(pixels));
-	}
-
-	public void glTexParameterf (int target, int pname, float param) {
-		GL.glTexParameterf(target, pname, param);
-	}
-
-	public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
-		Buffer pixels) {
-		GL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, getPosition(pixels));
-	}
-
-	public void glViewport (int x, int y, int width, int height) {
-		GL.glViewport(x, y, width, height);
-	}
-
-	public void glGetFloatv (int pname, FloatBuffer params) {
-		GL.glGetFloatv(pname, params, getPosition(params));
-	}
-
-	public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {
-		GL.glGetTexParameterfv(target, pname, params, getPosition(params));
-	}
-
-	public void glTexParameterfv (int target, int pname, FloatBuffer params) {
-		GL.glTexParameterfv(target, pname, params, getPosition(params));
-	}
-
-	public void glBindBuffer (int target, int buffer) {
-		GL.glBindBuffer(target, buffer);
-	}
-
-	public void glBufferData (int target, int size, Buffer data, int usage) {
-		GL.glBufferData(target, size, data, getPosition(data), usage);
-	}
-
-	public void glBufferSubData (int target, int offset, int size, Buffer data) {
-		GL.glBufferSubData(target, offset, size, data, getPosition(data));
-	}
-
-	public void glDeleteBuffers (int n, IntBuffer buffers) {
-		GL.glDeleteBuffers(n, buffers, getPosition(buffers));
-	}
-
-	public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {
-		GL.glGetBufferParameteriv(target, pname, params, getPosition(params));
-	}
-
-	public void glGenBuffers (int n, IntBuffer buffers) {
-		GL.glGenBuffers(n, buffers, getPosition(buffers));
-	}
-
-	public void glGetTexParameteriv (int target, int pname, IntBuffer params) {
-		GL.glGetTexParameteriv(target, pname, params, getPosition(params));
-	}
-
-	public boolean glIsBuffer (int buffer) {
-		return GL.glIsBuffer(buffer);
-	}
-
-	public boolean glIsEnabled (int cap) {
-		return GL.glIsEnabled(cap);
-	}
-
-	public boolean glIsTexture (int texture) {
-		return GL.glIsTexture(texture);
-	}
-
-	public void glTexParameteri (int target, int pname, int param) {
-		GL.glTexParameteri(target, pname, param);
-	}
-
-	public void glTexParameteriv (int target, int pname, IntBuffer params) {
-		GL.glTexParameteriv(target, pname, params, getPosition(params));
-	}
-
-	public void glDrawElements (int mode, int count, int type, int indices) {
-		GL.glDrawElements(mode, count, type, indices);
-	}
-
-	public void glAttachShader (int program, int shader) {
-		GL.glAttachShader(program, shader);
-	}
-
-	public void glBindAttribLocation (int program, int index, String name) {
-		GL.glBindAttribLocation(program, index, name);
-	}
-
-	public void glBindFramebuffer (int target, int framebuffer) {
-		GL.glBindFramebufferEXT(target, framebuffer);
-	}
-
-	public void glBindRenderbuffer (int target, int renderbuffer) {
-		GL.glBindRenderbufferEXT(target, renderbuffer);
-	}
-
-	public void glBlendColor (float red, float green, float blue, float alpha) {
-		GL.glBlendColor(red, green, blue, alpha);
-	}
-
-	public void glBlendEquation (int mode) {
-		GL.glBlendEquation(mode);
-	}
-
-	public void glBlendEquationSeparate (int modeRGB, int modeAlpha) {
-		GL.glBlendEquationSeparate(modeRGB, modeAlpha);
-	}
-
-	public void glBlendFuncSeparate (int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
-		GL.glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
-	}
-
-	public int glCheckFramebufferStatus (int target) {
-		return GL.glCheckFramebufferStatusEXT(target);
-	}
-
-	public void glCompileShader (int shader) {
-		GL.glCompileShader(shader);
-	}
-
-	public int glCreateProgram () {
-		return GL.glCreateProgram();
-	}
-
-	public int glCreateShader (int type) {
-		return GL.glCreateShader(type);
-	}
-
-	public void glDeleteFramebuffers (int n, IntBuffer framebuffers) {
-		GL.glDeleteFramebuffersEXT(n, framebuffers, getPosition(framebuffers));
-	}
-
-	public void glDeleteProgram (int program) {
-		GL.glDeleteProgram(program);
-	}
-
-	public void glDeleteRenderbuffers (int n, IntBuffer renderbuffers) {
-		GL.glDeleteRenderbuffersEXT(n, renderbuffers, getPosition(renderbuffers));
-	}
-
-	public void glDeleteShader (int shader) {
-		GL.glDeleteShader(shader);
-	}
-
-	public void glDetachShader (int program, int shader) {
-		GL.glDetachShader(program, shader);
-	}
-
-	public void glDisableVertexAttribArray (int index) {
-		GL.glDisableVertexAttribArray(index);
-	}
-
-	public void glEnableVertexAttribArray (int index) {
-		GL.glEnableVertexAttribArray(index);
-	}
-
-	public void glFramebufferRenderbuffer (int target, int attachment, int renderbuffertarget, int renderbuffer) {
-		GL.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
-	}
-
-	public void glFramebufferTexture2D (int target, int attachment, int textarget, int texture, int level) {
-		GL.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
-	}
-
-	public void glGenerateMipmap (int target) {
-		GL.glGenerateMipmapEXT(target);
-	}
-
-	public void glGenFramebuffers (int n, IntBuffer framebuffers) {
-		GL.glGenFramebuffersEXT(n, framebuffers, getPosition(framebuffers));
-	}
-
-	public void glGenRenderbuffers (int n, IntBuffer renderbuffers) {
-		GL.glGenRenderbuffersEXT(n, renderbuffers, getPosition(renderbuffers));
-	}
-
-	public String glGetActiveAttrib (int program, int index, IntBuffer size, Buffer type) {
-		return GL.glGetActiveAttrib(program, index, size, getPosition(size), type, getPosition(type));
-	}
-
-	public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer type) {
-		return GL.glGetActiveUniform(program, index, size, getPosition(size), type, getPosition(type));
-	}
-
-	public void glGetAttachedShaders (int program, int maxcount, Buffer count, IntBuffer shaders) {
-		GL.glGetAttachedShaders(program, maxcount, count, getPosition(count), shaders, getPosition(shaders));
-	}
-
-	public int glGetAttribLocation (int program, String name) {
-		return GL.glGetAttribLocation(program, name);
-	}
-
-	public void glGetBooleanv (int pname, Buffer params) {
-		GL.glGetBooleanv(pname, params, getPosition(params));
-	}
-
-	public void glGetFramebufferAttachmentParameteriv (int target, int attachment, int pname, IntBuffer params) {
-		GL.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params, getPosition(params));
-	}
-
-	public void glGetProgramiv (int program, int pname, IntBuffer params) {
-		GL.glGetProgramiv(program, pname, params, getPosition(params));
-	}
-
-	public String glGetProgramInfoLog (int program) {
-		return GL.glGetProgramInfoLog(program);
-	}
-
-	public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {
-		GL.glGetRenderbufferParameterivEXT(target, pname, params, getPosition(params));
-	}
-
-	public void glGetShaderiv (int shader, int pname, IntBuffer params) {
-		GL.glGetShaderiv(shader, pname, params, getPosition(params));
-	}
-
-	public String glGetShaderInfoLog (int shader) {
-		return GL.glGetShaderInfoLog(shader);
-	}
-
-	public void glGetShaderPrecisionFormat (int shadertype, int precisiontype, IntBuffer range, IntBuffer precision) {
-		GL.glGetShaderPrecisionFormat(shadertype, precisiontype, range, getPosition(range), precision, getPosition(precision));
-	}
-
-	public void glGetShaderSource (int shader, int bufsize, Buffer length, String source) {
-		throw new UnsupportedOperationException("Not implemented");
-	}
-
-	public void glGetUniformfv (int program, int location, FloatBuffer params) {
-		GL.glGetUniformfv(program, location, params, getPosition(params));
-	}
-
-	public void glGetUniformiv (int program, int location, IntBuffer params) {
-		GL.glGetUniformiv(program, location, params, getPosition(params));
-	}
-
-	public int glGetUniformLocation (int program, String name) {
-		return GL.glGetUniformLocation(program, name);
-	}
-
-	public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {
-		GL.glGetVertexAttribfv(index, pname, params, getPosition(params));
-	}
-
-	public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {
-		GL.glGetVertexAttribiv(index, pname, params, getPosition(params));
-	}
-
-	public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
-		GL.glGetVertexAttribPointerv(index, pname, pointer, getPosition(pointer));
-	}
-
-	public boolean glIsFramebuffer (int framebuffer) {
-		return GL.glIsFramebufferEXT(framebuffer);
-	}
-
-	public boolean glIsProgram (int program) {
-		return GL.glIsProgram(program);
-	}
-
-	public boolean glIsRenderbuffer (int renderbuffer) {
-		return GL.glIsRenderbufferEXT(renderbuffer);
-	}
-
-	public boolean glIsShader (int shader) {
-		return GL.glIsShader(shader);
-	}
-
-	public void glLinkProgram (int program) {
-		GL.glLinkProgram(program);
-	}
-
-	public void glReleaseShaderCompiler () {
-		GL.glReleaseShaderCompiler();
-	}
-
-	public void glRenderbufferStorage (int target, int internalformat, int width, int height) {
-		GL.glRenderbufferStorageEXT(target, internalformat, width, height);
-	}
-
-	public void glSampleCoverage (float value, boolean invert) {
-		GL.glSampleCoverage(value, invert);
-	}
-
-	public void glShaderBinary (int n, IntBuffer shaders, int binaryformat, Buffer binary, int length) {
-		GL.glShaderBinary(n, shaders, getPosition(shaders), binaryformat, binary, getPosition(binary), length);
-	}
-
-	public void glShaderSource (int shader, String string) {
-		GL.glShaderSource(shader, string);
-	}
-
-	public void glStencilFuncSeparate (int face, int func, int ref, int mask) {
-		GL.glStencilFuncSeparate(face, func, ref, mask);
-	}
-
-	public void glStencilMaskSeparate (int face, int mask) {
-		GL.glStencilMaskSeparate(face, mask);
-	}
-
-	public void glStencilOpSeparate (int face, int fail, int zfail, int zpass) {
-		GL.glStencilOpSeparate(face, fail, zfail, zpass);
-	}
-
-	public void glUniform1f (int location, float x) {
-		GL.glUniform1f(location, x);
-	}
-
-	public void glUniform1fv (int location, int count, FloatBuffer v) {
-		GL.glUniform1fv(location, count, v, getPosition(v));
-	}
-
-	public void glUniform1i (int location, int x) {
-		GL.glUniform1i(location, x);
-	}
-
-	public void glUniform1iv (int location, int count, IntBuffer v) {
-		GL.glUniform1iv(location, count, v, getPosition(v));
-	}
-
-	public void glUniform2f (int location, float x, float y) {
-		GL.glUniform2f(location, x, y);
-	}
-
-	public void glUniform2fv (int location, int count, FloatBuffer v) {
-		GL.glUniform2fv(location, count, v, getPosition(v));
-	}
-
-	public void glUniform2i (int location, int x, int y) {
-		GL.glUniform2i(location, x, y);
-	}
-
-	public void glUniform2iv (int location, int count, IntBuffer v) {
-		GL.glUniform2iv(location, count, v, getPosition(v));
-	}
-
-	public void glUniform3f (int location, float x, float y, float z) {
-		GL.glUniform3f(location, x, y, z);
-	}
-
-	public void glUniform3fv (int location, int count, FloatBuffer v) {
-		GL.glUniform3fv(location, count, v, getPosition(v));
-	}
-
-	public void glUniform3i (int location, int x, int y, int z) {
-		GL.glUniform3i(location, x, y, z);
-	}
-
-	public void glUniform3iv (int location, int count, IntBuffer v) {
-		GL.glUniform3iv(location, count, v, getPosition(v));
-	}
-
-	public void glUniform4f (int location, float x, float y, float z, float w) {
-		GL.glUniform4f(location, x, y, z, w);
-	}
-
-	public void glUniform4fv (int location, int count, FloatBuffer v) {
-		GL.glUniform4fv(location, count, v, getPosition(v));
-	}
-
-	public void glUniform4i (int location, int x, int y, int z, int w) {
-		GL.glUniform4i(location, x, y, z, w);
-	}
-
-	public void glUniform4iv (int location, int count, IntBuffer v) {
-		GL.glUniform4iv(location, count, v, getPosition(v));
-	}
-
-	public void glUniformMatrix2fv (int location, int count, boolean transpose, FloatBuffer value) {
-		GL.glUniformMatrix2fv(location, count, transpose, value, getPosition(value));
-	}
-
-	public void glUniformMatrix3fv (int location, int count, boolean transpose, FloatBuffer value) {
-		GL.glUniformMatrix3fv(location, count, transpose, value, getPosition(value));
-	}
-
-	public void glUniformMatrix4fv (int location, int count, boolean transpose, FloatBuffer value) {
-		GL.glUniformMatrix4fv(location, count, transpose, value, getPosition(value));
-	}
-
-	public void glUseProgram (int program) {
-		GL.glUseProgram(program);
-	}
-
-	public void glValidateProgram (int program) {
-		GL.glValidateProgram(program);
-	}
-
-	public void glVertexAttrib1f (int indx, float x) {
-		GL.glVertexAttrib1f(indx, x);
-	}
-
-	public void glVertexAttrib1fv (int indx, FloatBuffer values) {
-		GL.glVertexAttrib1fv(indx, values, getPosition(values));
-	}
-
-	public void glVertexAttrib2f (int indx, float x, float y) {
-		GL.glVertexAttrib2f(indx, x, y);
-	}
-
-	public void glVertexAttrib2fv (int indx, FloatBuffer values) {
-		GL.glVertexAttrib2fv(indx, values, getPosition(values));
-	}
-
-	public void glVertexAttrib3f (int indx, float x, float y, float z) {
-		GL.glVertexAttrib3f(indx, x, y, z);
-	}
-
-	public void glVertexAttrib3fv (int indx, FloatBuffer values) {
-		GL.glVertexAttrib3fv(indx, values, getPosition(values));
-	}
-
-	public void glVertexAttrib4f (int indx, float x, float y, float z, float w) {
-		GL.glVertexAttrib4f(indx, x, y, z, w);
-	}
-
-	public void glVertexAttrib4fv (int indx, FloatBuffer values) {
-		GL.glVertexAttrib4fv(indx, values, getPosition(values));
-	}
-
-	public void glVertexAttribPointer (int indx, int size, int type, boolean normalized, int stride, Buffer ptr) {
-		GL.glVertexAttribPointer(indx, size, type, normalized, stride, ptr, getPosition(ptr));
-	}
-
-	public void glVertexAttribPointer (int indx, int size, int type, boolean normalized, int stride, int ptr) {
-		GL.glVertexAttribPointer(indx, size, type, normalized, stride, ptr);
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.jglfw;
+
+import static com.badlogic.jglfw.utils.Memory.*;
+
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.jglfw.gl.GL;
+
+import java.nio.Buffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
+public class JglfwGL20 implements GL20 {
+	public void glActiveTexture (int texture) {
+		GL.glActiveTexture(texture);
+	}
+
+	public void glBindTexture (int target, int texture) {
+		GL.glBindTexture(target, texture);
+	}
+
+	public void glBlendFunc (int sfactor, int dfactor) {
+		GL.glBlendFunc(sfactor, dfactor);
+	}
+
+	public void glClear (int mask) {
+		GL.glClear(mask);
+	}
+
+	public void glClearColor (float red, float green, float blue, float alpha) {
+		GL.glClearColor(red, green, blue, alpha);
+	}
+
+	public void glClearDepthf (float depth) {
+		GL.glClearDepthf(depth);
+	}
+
+	public void glClearStencil (int s) {
+		GL.glClearStencil(s);
+	}
+
+	public void glColorMask (boolean red, boolean green, boolean blue, boolean alpha) {
+		GL.glColorMask(red, green, blue, alpha);
+	}
+
+	public void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border,
+		int imageSize, Buffer data) {
+		GL.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data, getPosition(data));
+	}
+
+	public void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format,
+		int imageSize, Buffer data) {
+		GL.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data, getPosition(data));
+	}
+
+	public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {
+		GL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
+	}
+
+	public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
+		GL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
+	}
+
+	public void glCullFace (int mode) {
+		GL.glCullFace(mode);
+	}
+
+	public void glDeleteTextures (int n, IntBuffer textures) {
+		GL.glDeleteTextures(n, textures, getPosition(textures));
+	}
+
+	public void glDepthFunc (int func) {
+		GL.glDepthFunc(func);
+	}
+
+	public void glDepthMask (boolean flag) {
+		GL.glDepthMask(flag);
+	}
+
+	public void glDepthRangef (float zNear, float zFar) {
+		GL.glDepthRangef(zNear, zFar);
+	}
+
+	public void glDisable (int cap) {
+		GL.glDisable(cap);
+	}
+
+	public void glDrawArrays (int mode, int first, int count) {
+		GL.glDrawArrays(mode, first, count);
+	}
+
+	public void glDrawElements (int mode, int count, int type, Buffer indices) {
+		GL.glDrawElements(mode, count, type, indices, getPosition(indices));
+	}
+
+	public void glEnable (int cap) {
+		GL.glEnable(cap);
+	}
+
+	public void glFinish () {
+		GL.glFinish();
+	}
+
+	public void glFlush () {
+		GL.glFlush();
+	}
+
+	public void glFrontFace (int mode) {
+		GL.glFrontFace(mode);
+	}
+
+	public void glGenTextures (int n, IntBuffer textures) {
+		GL.glGenTextures(n, textures, getPosition(textures));
+	}
+
+	public int glGetError () {
+		return GL.glGetError();
+	}
+
+	public void glGetIntegerv (int pname, IntBuffer params) {
+		GL.glGetIntegerv(pname, params, getPosition(params));
+	}
+
+	public String glGetString (int name) {
+		return GL.glGetString(name);
+	}
+
+	public void glHint (int target, int mode) {
+		GL.glHint(target, mode);
+	}
+
+	public void glLineWidth (float width) {
+		GL.glLineWidth(width);
+	}
+
+	public void glPixelStorei (int pname, int param) {
+		GL.glPixelStorei(pname, param);
+	}
+
+	public void glPolygonOffset (float factor, float units) {
+		GL.glPolygonOffset(factor, units);
+	}
+
+	public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
+		GL.glReadPixels(x, y, width, height, format, type, pixels, getPosition(pixels));
+	}
+
+	public void glScissor (int x, int y, int width, int height) {
+		GL.glScissor(x, y, width, height);
+	}
+
+	public void glStencilFunc (int func, int ref, int mask) {
+		GL.glStencilFunc(func, ref, mask);
+	}
+
+	public void glStencilMask (int mask) {
+		GL.glStencilMask(mask);
+	}
+
+	public void glStencilOp (int fail, int zfail, int zpass) {
+		GL.glStencilOp(fail, zfail, zpass);
+	}
+
+	public void glTexImage2D (int target, int level, int internalFormat, int width, int height, int border, int format, int type,
+		Buffer pixels) {
+		GL.glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels, getPosition(pixels));
+	}
+
+	public void glTexParameterf (int target, int pname, float param) {
+		GL.glTexParameterf(target, pname, param);
+	}
+
+	public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
+		Buffer pixels) {
+		GL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, getPosition(pixels));
+	}
+
+	public void glViewport (int x, int y, int width, int height) {
+		GL.glViewport(x, y, width, height);
+	}
+
+	public void glGetFloatv (int pname, FloatBuffer params) {
+		GL.glGetFloatv(pname, params, getPosition(params));
+	}
+
+	public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {
+		GL.glGetTexParameterfv(target, pname, params, getPosition(params));
+	}
+
+	public void glTexParameterfv (int target, int pname, FloatBuffer params) {
+		GL.glTexParameterfv(target, pname, params, getPosition(params));
+	}
+
+	public void glBindBuffer (int target, int buffer) {
+		GL.glBindBuffer(target, buffer);
+	}
+
+	public void glBufferData (int target, int size, Buffer data, int usage) {
+		GL.glBufferData(target, size, data, getPosition(data), usage);
+	}
+
+	public void glBufferSubData (int target, int offset, int size, Buffer data) {
+		GL.glBufferSubData(target, offset, size, data, getPosition(data));
+	}
+
+	public void glDeleteBuffers (int n, IntBuffer buffers) {
+		GL.glDeleteBuffers(n, buffers, getPosition(buffers));
+	}
+
+	public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {
+		GL.glGetBufferParameteriv(target, pname, params, getPosition(params));
+	}
+
+	public void glGenBuffers (int n, IntBuffer buffers) {
+		GL.glGenBuffers(n, buffers, getPosition(buffers));
+	}
+
+	public void glGetTexParameteriv (int target, int pname, IntBuffer params) {
+		GL.glGetTexParameteriv(target, pname, params, getPosition(params));
+	}
+
+	public boolean glIsBuffer (int buffer) {
+		return GL.glIsBuffer(buffer);
+	}
+
+	public boolean glIsEnabled (int cap) {
+		return GL.glIsEnabled(cap);
+	}
+
+	public boolean glIsTexture (int texture) {
+		return GL.glIsTexture(texture);
+	}
+
+	public void glTexParameteri (int target, int pname, int param) {
+		GL.glTexParameteri(target, pname, param);
+	}
+
+	public void glTexParameteriv (int target, int pname, IntBuffer params) {
+		GL.glTexParameteriv(target, pname, params, getPosition(params));
+	}
+
+	public void glDrawElements (int mode, int count, int type, int indices) {
+		GL.glDrawElements(mode, count, type, indices);
+	}
+
+	public void glAttachShader (int program, int shader) {
+		GL.glAttachShader(program, shader);
+	}
+
+	public void glBindAttribLocation (int program, int index, String name) {
+		GL.glBindAttribLocation(program, index, name);
+	}
+
+	public void glBindFramebuffer (int target, int framebuffer) {
+		GL.glBindFramebufferEXT(target, framebuffer);
+	}
+
+	public void glBindRenderbuffer (int target, int renderbuffer) {
+		GL.glBindRenderbufferEXT(target, renderbuffer);
+	}
+
+	public void glBlendColor (float red, float green, float blue, float alpha) {
+		GL.glBlendColor(red, green, blue, alpha);
+	}
+
+	public void glBlendEquation (int mode) {
+		GL.glBlendEquation(mode);
+	}
+
+	public void glBlendEquationSeparate (int modeRGB, int modeAlpha) {
+		GL.glBlendEquationSeparate(modeRGB, modeAlpha);
+	}
+
+	public void glBlendFuncSeparate (int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
+		GL.glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
+	}
+
+	public int glCheckFramebufferStatus (int target) {
+		return GL.glCheckFramebufferStatusEXT(target);
+	}
+
+	public void glCompileShader (int shader) {
+		GL.glCompileShader(shader);
+	}
+
+	public int glCreateProgram () {
+		return GL.glCreateProgram();
+	}
+
+	public int glCreateShader (int type) {
+		return GL.glCreateShader(type);
+	}
+
+	public void glDeleteFramebuffers (int n, IntBuffer framebuffers) {
+		GL.glDeleteFramebuffersEXT(n, framebuffers, getPosition(framebuffers));
+	}
+
+	public void glDeleteProgram (int program) {
+		GL.glDeleteProgram(program);
+	}
+
+	public void glDeleteRenderbuffers (int n, IntBuffer renderbuffers) {
+		GL.glDeleteRenderbuffersEXT(n, renderbuffers, getPosition(renderbuffers));
+	}
+
+	public void glDeleteShader (int shader) {
+		GL.glDeleteShader(shader);
+	}
+
+	public void glDetachShader (int program, int shader) {
+		GL.glDetachShader(program, shader);
+	}
+
+	public void glDisableVertexAttribArray (int index) {
+		GL.glDisableVertexAttribArray(index);
+	}
+
+	public void glEnableVertexAttribArray (int index) {
+		GL.glEnableVertexAttribArray(index);
+	}
+
+	public void glFramebufferRenderbuffer (int target, int attachment, int renderbuffertarget, int renderbuffer) {
+		GL.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
+	}
+
+	public void glFramebufferTexture2D (int target, int attachment, int textarget, int texture, int level) {
+		GL.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
+	}
+
+	public void glGenerateMipmap (int target) {
+		GL.glGenerateMipmapEXT(target);
+	}
+
+	public void glGenFramebuffers (int n, IntBuffer framebuffers) {
+		GL.glGenFramebuffersEXT(n, framebuffers, getPosition(framebuffers));
+	}
+
+	public void glGenRenderbuffers (int n, IntBuffer renderbuffers) {
+		GL.glGenRenderbuffersEXT(n, renderbuffers, getPosition(renderbuffers));
+	}
+
+	public String glGetActiveAttrib (int program, int index, IntBuffer size, Buffer type) {
+		return GL.glGetActiveAttrib(program, index, size, getPosition(size), type, getPosition(type));
+	}
+
+	public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer type) {
+		return GL.glGetActiveUniform(program, index, size, getPosition(size), type, getPosition(type));
+	}
+
+	public void glGetAttachedShaders (int program, int maxcount, Buffer count, IntBuffer shaders) {
+		GL.glGetAttachedShaders(program, maxcount, count, getPosition(count), shaders, getPosition(shaders));
+	}
+
+	public int glGetAttribLocation (int program, String name) {
+		return GL.glGetAttribLocation(program, name);
+	}
+
+	public void glGetBooleanv (int pname, Buffer params) {
+		GL.glGetBooleanv(pname, params, getPosition(params));
+	}
+
+	public void glGetFramebufferAttachmentParameteriv (int target, int attachment, int pname, IntBuffer params) {
+		GL.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params, getPosition(params));
+	}
+
+	public void glGetProgramiv (int program, int pname, IntBuffer params) {
+		GL.glGetProgramiv(program, pname, params, getPosition(params));
+	}
+
+	public String glGetProgramInfoLog (int program) {
+		return GL.glGetProgramInfoLog(program);
+	}
+
+	public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {
+		GL.glGetRenderbufferParameterivEXT(target, pname, params, getPosition(params));
+	}
+
+	public void glGetShaderiv (int shader, int pname, IntBuffer params) {
+		GL.glGetShaderiv(shader, pname, params, getPosition(params));
+	}
+
+	public String glGetShaderInfoLog (int shader) {
+		return GL.glGetShaderInfoLog(shader);
+	}
+
+	public void glGetShaderPrecisionFormat (int shadertype, int precisiontype, IntBuffer range, IntBuffer precision) {
+		GL.glGetShaderPrecisionFormat(shadertype, precisiontype, range, getPosition(range), precision, getPosition(precision));
+	}
+
+	public void glGetShaderSource (int shader, int bufsize, Buffer length, String source) {
+		throw new UnsupportedOperationException("Not implemented");
+	}
+
+	public void glGetUniformfv (int program, int location, FloatBuffer params) {
+		GL.glGetUniformfv(program, location, params, getPosition(params));
+	}
+
+	public void glGetUniformiv (int program, int location, IntBuffer params) {
+		GL.glGetUniformiv(program, location, params, getPosition(params));
+	}
+
+	public int glGetUniformLocation (int program, String name) {
+		return GL.glGetUniformLocation(program, name);
+	}
+
+	public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {
+		GL.glGetVertexAttribfv(index, pname, params, getPosition(params));
+	}
+
+	public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {
+		GL.glGetVertexAttribiv(index, pname, params, getPosition(params));
+	}
+
+	public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
+		GL.glGetVertexAttribPointerv(index, pname, pointer, getPosition(pointer));
+	}
+
+	public boolean glIsFramebuffer (int framebuffer) {
+		return GL.glIsFramebufferEXT(framebuffer);
+	}
+
+	public boolean glIsProgram (int program) {
+		return GL.glIsProgram(program);
+	}
+
+	public boolean glIsRenderbuffer (int renderbuffer) {
+		return GL.glIsRenderbufferEXT(renderbuffer);
+	}
+
+	public boolean glIsShader (int shader) {
+		return GL.glIsShader(shader);
+	}
+
+	public void glLinkProgram (int program) {
+		GL.glLinkProgram(program);
+	}
+
+	public void glReleaseShaderCompiler () {
+		GL.glReleaseShaderCompiler();
+	}
+
+	public void glRenderbufferStorage (int target, int internalformat, int width, int height) {
+		GL.glRenderbufferStorageEXT(target, internalformat, width, height);
+	}
+
+	public void glSampleCoverage (float value, boolean invert) {
+		GL.glSampleCoverage(value, invert);
+	}
+
+	public void glShaderBinary (int n, IntBuffer shaders, int binaryformat, Buffer binary, int length) {
+		GL.glShaderBinary(n, shaders, getPosition(shaders), binaryformat, binary, getPosition(binary), length);
+	}
+
+	public void glShaderSource (int shader, String string) {
+		GL.glShaderSource(shader, string);
+	}
+
+	public void glStencilFuncSeparate (int face, int func, int ref, int mask) {
+		GL.glStencilFuncSeparate(face, func, ref, mask);
+	}
+
+	public void glStencilMaskSeparate (int face, int mask) {
+		GL.glStencilMaskSeparate(face, mask);
+	}
+
+	public void glStencilOpSeparate (int face, int fail, int zfail, int zpass) {
+		GL.glStencilOpSeparate(face, fail, zfail, zpass);
+	}
+
+	public void glUniform1f (int location, float x) {
+		GL.glUniform1f(location, x);
+	}
+
+	public void glUniform1fv (int location, int count, FloatBuffer v) {
+		GL.glUniform1fv(location, count, v, getPosition(v));
+	}
+
+	public void glUniform1i (int location, int x) {
+		GL.glUniform1i(location, x);
+	}
+
+	public void glUniform1iv (int location, int count, IntBuffer v) {
+		GL.glUniform1iv(location, count, v, getPosition(v));
+	}
+
+	public void glUniform2f (int location, float x, float y) {
+		GL.glUniform2f(location, x, y);
+	}
+
+	public void glUniform2fv (int location, int count, FloatBuffer v) {
+		GL.glUniform2fv(location, count, v, getPosition(v));
+	}
+
+	public void glUniform2i (int location, int x, int y) {
+		GL.glUniform2i(location, x, y);
+	}
+
+	public void glUniform2iv (int location, int count, IntBuffer v) {
+		GL.glUniform2iv(location, count, v, getPosition(v));
+	}
+
+	public void glUniform3f (int location, float x, float y, float z) {
+		GL.glUniform3f(location, x, y, z);
+	}
+
+	public void glUniform3fv (int location, int count, FloatBuffer v) {
+		GL.glUniform3fv(location, count, v, getPosition(v));
+	}
+
+	public void glUniform3i (int location, int x, int y, int z) {
+		GL.glUniform3i(location, x, y, z);
+	}
+
+	public void glUniform3iv (int location, int count, IntBuffer v) {
+		GL.glUniform3iv(location, count, v, getPosition(v));
+	}
+
+	public void glUniform4f (int location, float x, float y, float z, float w) {
+		GL.glUniform4f(location, x, y, z, w);
+	}
+
+	public void glUniform4fv (int location, int count, FloatBuffer v) {
+		GL.glUniform4fv(location, count, v, getPosition(v));
+	}
+
+	public void glUniform4i (int location, int x, int y, int z, int w) {
+		GL.glUniform4i(location, x, y, z, w);
+	}
+
+	public void glUniform4iv (int location, int count, IntBuffer v) {
+		GL.glUniform4iv(location, count, v, getPosition(v));
+	}
+
+	public void glUniformMatrix2fv (int location, int count, boolean transpose, FloatBuffer value) {
+		GL.glUniformMatrix2fv(location, count, transpose, value, getPosition(value));
+	}
+
+	public void glUniformMatrix3fv (int location, int count, boolean transpose, FloatBuffer value) {
+		GL.glUniformMatrix3fv(location, count, transpose, value, getPosition(value));
+	}
+
+	public void glUniformMatrix4fv (int location, int count, boolean transpose, FloatBuffer value) {
+		GL.glUniformMatrix4fv(location, count, transpose, value, getPosition(value));
+	}
+
+	public void glUseProgram (int program) {
+		GL.glUseProgram(program);
+	}
+
+	public void glValidateProgram (int program) {
+		GL.glValidateProgram(program);
+	}
+
+	public void glVertexAttrib1f (int indx, float x) {
+		GL.glVertexAttrib1f(indx, x);
+	}
+
+	public void glVertexAttrib1fv (int indx, FloatBuffer values) {
+		GL.glVertexAttrib1fv(indx, values, getPosition(values));
+	}
+
+	public void glVertexAttrib2f (int indx, float x, float y) {
+		GL.glVertexAttrib2f(indx, x, y);
+	}
+
+	public void glVertexAttrib2fv (int indx, FloatBuffer values) {
+		GL.glVertexAttrib2fv(indx, values, getPosition(values));
+	}
+
+	public void glVertexAttrib3f (int indx, float x, float y, float z) {
+		GL.glVertexAttrib3f(indx, x, y, z);
+	}
+
+	public void glVertexAttrib3fv (int indx, FloatBuffer values) {
+		GL.glVertexAttrib3fv(indx, values, getPosition(values));
+	}
+
+	public void glVertexAttrib4f (int indx, float x, float y, float z, float w) {
+		GL.glVertexAttrib4f(indx, x, y, z, w);
+	}
+
+	public void glVertexAttrib4fv (int indx, FloatBuffer values) {
+		GL.glVertexAttrib4fv(indx, values, getPosition(values));
+	}
+
+	public void glVertexAttribPointer (int indx, int size, int type, boolean normalized, int stride, Buffer ptr) {
+		GL.glVertexAttribPointer(indx, size, type, normalized, stride, ptr, getPosition(ptr));
+	}
+
+	public void glVertexAttribPointer (int indx, int size, int type, boolean normalized, int stride, int ptr) {
+		GL.glVertexAttribPointer(indx, size, type, normalized, stride, ptr);
+	}
+}
diff --git a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
index 0b2975f..44ee30d 100644
--- a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
+++ b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
@@ -12,46 +12,11 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.backends.jglfw;
-
-import static com.badlogic.jglfw.Glfw.GLFW_ALPHA_BITS;
-import static com.badlogic.jglfw.Glfw.GLFW_BLUE_BITS;
-import static com.badlogic.jglfw.Glfw.GLFW_CURSOR_CAPTURED;
-import static com.badlogic.jglfw.Glfw.GLFW_CURSOR_MODE;
-import static com.badlogic.jglfw.Glfw.GLFW_CURSOR_NORMAL;
-import static com.badlogic.jglfw.Glfw.GLFW_DEPTH_BITS;
-import static com.badlogic.jglfw.Glfw.GLFW_GREEN_BITS;
-import static com.badlogic.jglfw.Glfw.GLFW_RED_BITS;
-import static com.badlogic.jglfw.Glfw.GLFW_RESIZABLE;
-import static com.badlogic.jglfw.Glfw.GLFW_SAMPLES;
-import static com.badlogic.jglfw.Glfw.GLFW_STENCIL_BITS;
-import static com.badlogic.jglfw.Glfw.GLFW_UNDECORATED;
-import static com.badlogic.jglfw.Glfw.GLFW_VISIBLE;
-import static com.badlogic.jglfw.Glfw.glfwCreateWindow;
-import static com.badlogic.jglfw.Glfw.glfwDestroyWindow;
-import static com.badlogic.jglfw.Glfw.glfwExtensionSupported;
-import static com.badlogic.jglfw.Glfw.glfwGetInputMode;
-import static com.badlogic.jglfw.Glfw.glfwGetMonitors;
-import static com.badlogic.jglfw.Glfw.glfwGetPrimaryMonitor;
-import static com.badlogic.jglfw.Glfw.glfwGetVideoMode;
-import static com.badlogic.jglfw.Glfw.glfwGetVideoModes;
-import static com.badlogic.jglfw.Glfw.glfwGetWindowMonitor;
-import static com.badlogic.jglfw.Glfw.glfwHideWindow;
-import static com.badlogic.jglfw.Glfw.glfwIconifyWindow;
-import static com.badlogic.jglfw.Glfw.glfwMakeContextCurrent;
-import static com.badlogic.jglfw.Glfw.glfwRestoreWindow;
-import static com.badlogic.jglfw.Glfw.glfwSetInputMode;
-import static com.badlogic.jglfw.Glfw.glfwSetWindowPos;
-import static com.badlogic.jglfw.Glfw.glfwSetWindowSize;
-import static com.badlogic.jglfw.Glfw.glfwSetWindowTitle;
-import static com.badlogic.jglfw.Glfw.glfwShowWindow;
-import static com.badlogic.jglfw.Glfw.glfwSwapBuffers;
-import static com.badlogic.jglfw.Glfw.glfwSwapInterval;
-import static com.badlogic.jglfw.Glfw.glfwWindowHint;
+ ******************************************************************************/
 
-import java.awt.Toolkit;
+package com.badlogic.gdx.backends.jglfw;
+
+import static com.badlogic.jglfw.Glfw.*;
 
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
@@ -59,358 +24,362 @@ import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.jglfw.GlfwVideoMode;
 import com.badlogic.jglfw.gl.GL;
-
-/** An implementation of the {@link Graphics} interface based on GLFW.
- * @author Nathan Sweet */
-public class JglfwGraphics implements Graphics {
-	static int glMajorVersion, glMinorVersion;
-
-	long window;
-	private boolean fullscreen;
-	private long fullscreenMonitor;
-	private String title;
-	private boolean resizable, undecorated;
-	private BufferFormat bufferFormat;
-	private boolean vSync;
-	private int x, y, width, height;
-	private boolean visible;
-	private Color initialBackgroundColor;
-	private volatile boolean isContinuous = true, renderRequested;
-	volatile boolean foreground, minimized;
-
-	private float deltaTime;
-	private long frameStart, lastTime = -1;
-	private int frames, fps;
-
-	private GLCommon gl;
+
+import java.awt.Toolkit;
+
+/** An implementation of the {@link Graphics} interface based on GLFW.
+ * @author Nathan Sweet */
+public class JglfwGraphics implements Graphics {
+	static int glMajorVersion, glMinorVersion;
+
+	long window;
+	private boolean fullscreen;
+	private long fullscreenMonitor;
+	private String title;
+	private boolean resizable, undecorated;
+	private BufferFormat bufferFormat;
+	private boolean vSync;
+	private int x, y, width, height;
+	private boolean visible;
+	private Color initialBackgroundColor;
+	private volatile boolean isContinuous = true, renderRequested;
+	volatile boolean foreground, minimized;
+
+	private float deltaTime;
+	private long frameStart, lastTime = -1;
+	private int frames, fps;
+
 	private JglfwGL20 gl20;
-
-	public JglfwGraphics (JglfwApplicationConfiguration config) {
-		// Store values from config.
-		bufferFormat = new BufferFormat(config.r, config.g, config.b, config.a, config.depth, config.stencil, config.samples, false);
-		title = config.title;
-		resizable = config.resizable;
-		undecorated = config.undecorated;
-		x = config.x;
-		y = config.y;
-		vSync = config.vSync;
-		initialBackgroundColor = config.initialBackgroundColor;
-		if (config.fullscreenMonitorIndex != -1) { // Use monitor specified in config if it is valid.
-			long[] monitors = glfwGetMonitors();
-			if (config.fullscreenMonitorIndex < monitors.length) fullscreenMonitor = monitors[config.fullscreenMonitorIndex];
-		}
-
-		// Create window.
-		if (!createWindow(config.width, config.height, config.fullscreen)) {
-			throw new GdxRuntimeException("Unable to create window: " + config.width + "x" + config.height + ", fullscreen: "
-				+ config.fullscreen);
-		}
-
-		// Create GL.
-		String version = GL.glGetString(GL20.GL_VERSION);
-		glMajorVersion = Integer.parseInt("" + version.charAt(0));
+
+	public JglfwGraphics (JglfwApplicationConfiguration config) {
+		// Store values from config.
+		bufferFormat = new BufferFormat(config.r, config.g, config.b, config.a, config.depth, config.stencil, config.samples, false);
+		title = config.title;
+		resizable = config.resizable;
+		undecorated = config.undecorated;
+		x = config.x;
+		y = config.y;
+		vSync = config.vSync;
+		initialBackgroundColor = config.initialBackgroundColor;
+		if (config.fullscreenMonitorIndex != -1) { // Use monitor specified in config if it is valid.
+			long[] monitors = glfwGetMonitors();
+			if (config.fullscreenMonitorIndex < monitors.length) fullscreenMonitor = monitors[config.fullscreenMonitorIndex];
+		}
+
+		// Create window.
+		if (!createWindow(config.width, config.height, config.fullscreen)) {
+			throw new GdxRuntimeException("Unable to create window: " + config.width + "x" + config.height + ", fullscreen: "
+				+ config.fullscreen);
+		}
+
+		// Create GL.
+		String version = GL.glGetString(GL20.GL_VERSION);
+		glMajorVersion = Integer.parseInt("" + version.charAt(0));
 		glMinorVersion = Integer.parseInt("" + version.charAt(2));
-		if(glMajorVersion < 2)  throw new RuntimeException("Libgdx requires OpenGL ES 2.0");
-		gl20 = new JglfwGL20();
-		gl = gl20;
-		Gdx.gl = gl;
-		Gdx.gl20 = gl20;
-
-		if (!config.hidden) show();
-	}
-
-	private boolean createWindow (int width, int height, boolean fullscreen) {
-		if (fullscreen && fullscreenMonitor == 0) fullscreenMonitor = getWindowMonitor();
-
-		glfwWindowHint(GLFW_VISIBLE, 0);
-		glfwWindowHint(GLFW_RESIZABLE, resizable ? 1 : 0);
-		glfwWindowHint(GLFW_UNDECORATED, undecorated ? 1 : 0);
-		glfwWindowHint(GLFW_RED_BITS, bufferFormat.r);
-		glfwWindowHint(GLFW_GREEN_BITS, bufferFormat.g);
-		glfwWindowHint(GLFW_BLUE_BITS, bufferFormat.b);
-		glfwWindowHint(GLFW_ALPHA_BITS, bufferFormat.a);
-		glfwWindowHint(GLFW_DEPTH_BITS, bufferFormat.depth);
-		glfwWindowHint(GLFW_STENCIL_BITS, bufferFormat.stencil);
-		glfwWindowHint(GLFW_SAMPLES, bufferFormat.samples);
-
-		boolean mouseCaptured = window != 0 && glfwGetInputMode(window, GLFW_CURSOR_MODE) == GLFW_CURSOR_CAPTURED;
-
-		long oldWindow = window;
-		long newWindow = glfwCreateWindow(width, height, title, fullscreen ? fullscreenMonitor : 0, oldWindow);
-		if (newWindow == 0) return false;
-		if (oldWindow != 0) glfwDestroyWindow(oldWindow);
-		window = newWindow;
-		this.width = Math.max(1, width);
-		this.height = Math.max(1, height);
-
-		this.fullscreen = fullscreen;
-		if (!fullscreen) {
-			if (x == -1 || y == -1) {
-				DisplayMode mode = getDesktopDisplayMode();
-				x = (mode.width - width) / 2;
-				y = (mode.height - height) / 2;
-			}
-			glfwSetWindowPos(window, x, y);
-		}
-
-		if (!mouseCaptured) glfwSetInputMode(window, GLFW_CURSOR_MODE, GLFW_CURSOR_NORMAL); // Prevent fullscreen from taking mouse.
-
-		glfwMakeContextCurrent(newWindow);
-		setVSync(vSync);
-		if (visible) glfwShowWindow(window);
-
-		return true;
-	}
-
-	void frameStart (long time) {
-		if (lastTime == -1) lastTime = time;
-		deltaTime = (time - lastTime) / 1000000000.0f;
-		lastTime = time;
-
-		if (time - frameStart >= 1000000000) {
-			fps = frames;
-			frames = 0;
-			frameStart = time;
-		}
-		frames++;
-	}
-
-	void sizeChanged (int width, int height) {
-		glfwShowWindow(window); // This is required to refresh the NSOpenGLContext on OSX!
-		width = Math.max(1, width);
-		height = Math.max(1, height);
-		this.width = width;
-		this.height = height;
-		Gdx.gl.glViewport(0, 0, width, height);
-		ApplicationListener listener = Gdx.app.getApplicationListener();
-		if (listener != null) listener.resize(width, height);
-		requestRendering();
-	}
-
-	void positionChanged (int x, int y) {
-		this.x = x;
-		this.y = y;
-	}
-
-	public boolean isGL20Available () {
-		return gl20 != null;
-	}
-
-	public GLCommon getGLCommon () {
-		return gl;
-	}
-
-	public GL20 getGL20 () {
-		return gl20;
-	}
-
-	public int getWidth () {
-		return width;
-	}
-
-	public int getHeight () {
-		return height;
-	}
-
-	public float getDeltaTime () {
-		return deltaTime;
-	}
-
-	public float getRawDeltaTime () {
-		return deltaTime;
-	}
-
-	public int getFramesPerSecond () {
-		return fps;
-	}
-
-	public GraphicsType getType () {
-		return GraphicsType.JGLFW;
-	}
-
-	public float getPpiX () {
-		// return getWidth() / (glfwGetMonitorPhysicalWidth(getWindowMonitor()) * 0.03937f); // mm to inches
-		return Toolkit.getDefaultToolkit().getScreenResolution();
-	}
-
-	public float getPpiY () {
-		// return getHeight() / (glfwGetMonitorPhysicalHeight(getWindowMonitor()) * 0.03937f); // mm to inches
-		return Toolkit.getDefaultToolkit().getScreenResolution();
-	}
-
-	public float getPpcX () {
-		// return getWidth() / (glfwGetMonitorPhysicalWidth(getWindowMonitor()) / 10); // mm to cm
-		return Toolkit.getDefaultToolkit().getScreenResolution() / 2.54f;
-	}
-
-	public float getPpcY () {
-		// return getHeight() / (glfwGetMonitorPhysicalHeight(getWindowMonitor()) / 10); // mm to cm
-		return Toolkit.getDefaultToolkit().getScreenResolution() / 2.54f;
-	}
-
-	public float getDensity () {
-		// long monitor = getWindowMonitor();
-		// float mmWidth = glfwGetMonitorPhysicalWidth(monitor);
-		// float mmHeight = glfwGetMonitorPhysicalHeight(monitor);
-		// float inches = (float)Math.sqrt(mmWidth * mmWidth + mmHeight * mmHeight) * 0.03937f; // mm to inches
-		// float pixelWidth = getWidth();
-		// float pixelHeight = getHeight();
-		// float pixels = (float)Math.sqrt(pixelWidth * pixelWidth + pixelHeight * pixelHeight);
-		// float diagonalPpi = pixels / inches;
-		// return diagonalPpi / 160f;
-		return Toolkit.getDefaultToolkit().getScreenResolution() / 160f;
-	}
-
-	public boolean supportsDisplayModeChange () {
-		return true;
-	}
-
-	private long getWindowMonitor () {
-		if (window != 0) {
-			long monitor = glfwGetWindowMonitor(window);
-			if (monitor != 0) return monitor;
-		}
-		return glfwGetPrimaryMonitor();
-	}
-
-	public DisplayMode[] getDisplayModes () {
-		Array<DisplayMode> modes = new Array();
-		for (GlfwVideoMode mode : glfwGetVideoModes(getWindowMonitor()))
-			modes.add(new JglfwDisplayMode(mode.width, mode.height, 0, mode.redBits + mode.greenBits + mode.blueBits));
-		return modes.toArray(DisplayMode.class);
-	}
-
-	public DisplayMode getDesktopDisplayMode () {
-		GlfwVideoMode mode = glfwGetVideoMode(getWindowMonitor());
-		return new JglfwDisplayMode(mode.width, mode.height, 0, mode.redBits + mode.greenBits + mode.blueBits);
-	}
-
-	public boolean setDisplayMode (DisplayMode displayMode) {
-		bufferFormat = new BufferFormat( //
-			displayMode.bitsPerPixel == 16 ? 5 : 8, //
-			displayMode.bitsPerPixel == 16 ? 6 : 8, //
-			displayMode.bitsPerPixel == 16 ? 6 : 8, //
-			bufferFormat.a, bufferFormat.depth, bufferFormat.stencil, bufferFormat.samples, false);
-		boolean success = createWindow(displayMode.width, displayMode.height, fullscreen);
-		if (success && fullscreen) sizeChanged(displayMode.width, displayMode.height);
-		return success;
-	}
-
-	public boolean setDisplayMode (int width, int height, boolean fullscreen) {
-		if (fullscreen || this.fullscreen) {
-			boolean success = createWindow(width, height, fullscreen);
-			if (success && fullscreen) sizeChanged(width, height);
-			return success;
-		}
-
-		glfwSetWindowSize(window, width, height);
-		return true;
-	}
-
-	public void setTitle (String title) {
-		if (title == null) title = "";
-		glfwSetWindowTitle(window, title);
-		this.title = title;
-	}
-
-	public void setVSync (boolean vsync) {
-		this.vSync = vsync;
-		glfwSwapInterval(vsync ? 1 : 0);
-	}
-
-	public BufferFormat getBufferFormat () {
-		return bufferFormat;
-	}
-
-	public boolean supportsExtension (String extension) {
-		return glfwExtensionSupported(extension);
-	}
-
-	public void setContinuousRendering (boolean isContinuous) {
-		this.isContinuous = isContinuous;
-	}
-
-	public boolean isContinuousRendering () {
-		return isContinuous;
-	}
-
-	public void requestRendering () {
-		renderRequested = true;
-	}
-
-	public boolean isFullscreen () {
-		return fullscreen;
-	}
-
-	/** Returns the JGLFW window handle. Note this should not be stored externally as it may change if the window is recreated to
-	 * enter/exit fullscreen. */
-	public long getWindow () {
-		return window;
-	}
-
-	public int getX () {
-		return x;
-	}
-
-	public int getY () {
-		return y;
-	}
-
-	public void setPosition (int x, int y) {
-		glfwSetWindowPos(window, x, y);
-	}
-
-	public void hide () {
-		visible = false;
-		glfwHideWindow(window);
-	}
-
-	public void show () {
-		visible = true;
-		glfwShowWindow(window);
-
-		Gdx.gl.glClearColor(initialBackgroundColor.r, initialBackgroundColor.g, initialBackgroundColor.b, initialBackgroundColor.a);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		glfwSwapBuffers(window);
-	}
-
-	public boolean isHidden () {
-		return !visible;
-	}
-
-	public boolean isMinimized () {
-		return minimized;
-	}
-
-	public boolean isForeground () {
-		return foreground;
-	}
-
-	public void minimize () {
-		glfwIconifyWindow(window);
-	}
-
-	public void restore () {
-		glfwRestoreWindow(window);
-	}
-
-	boolean shouldRender () {
-		try {
-			return renderRequested || isContinuous;
-		} finally {
-			renderRequested = false;
-		}
-	}
-
-	static class JglfwDisplayMode extends DisplayMode {
-		protected JglfwDisplayMode (int width, int height, int refreshRate, int bitsPerPixel) {
-			super(width, height, refreshRate, bitsPerPixel);
-		}
+
+		if (glMajorVersion <= 1)
+			throw new GdxRuntimeException("OpenGL 2.0 or higher with the FBO extension is required. OpenGL version: " + version);
+		if (glMajorVersion == 2 || version.contains("2.1")) {
+			if (!supportsExtension("GL_EXT_framebuffer_object") && !supportsExtension("GL_ARB_framebuffer_object")) {
+				throw new GdxRuntimeException("OpenGL 2.0 or higher with the FBO extension is required. OpenGL version: " + version
+					+ ", FBO extension: false");
+			}
+		}
+
+		gl20 = new JglfwGL20();
+		Gdx.gl = gl20;
+		Gdx.gl20 = gl20;
+
+		if (!config.hidden) show();
+	}
+
+	private boolean createWindow (int width, int height, boolean fullscreen) {
+		if (fullscreen && fullscreenMonitor == 0) fullscreenMonitor = getWindowMonitor();
+
+		glfwWindowHint(GLFW_VISIBLE, 0);
+		glfwWindowHint(GLFW_RESIZABLE, resizable ? 1 : 0);
+		glfwWindowHint(GLFW_UNDECORATED, undecorated ? 1 : 0);
+		glfwWindowHint(GLFW_RED_BITS, bufferFormat.r);
+		glfwWindowHint(GLFW_GREEN_BITS, bufferFormat.g);
+		glfwWindowHint(GLFW_BLUE_BITS, bufferFormat.b);
+		glfwWindowHint(GLFW_ALPHA_BITS, bufferFormat.a);
+		glfwWindowHint(GLFW_DEPTH_BITS, bufferFormat.depth);
+		glfwWindowHint(GLFW_STENCIL_BITS, bufferFormat.stencil);
+		glfwWindowHint(GLFW_SAMPLES, bufferFormat.samples);
+
+		boolean mouseCaptured = window != 0 && glfwGetInputMode(window, GLFW_CURSOR_MODE) == GLFW_CURSOR_CAPTURED;
+
+		long oldWindow = window;
+		long newWindow = glfwCreateWindow(width, height, title, fullscreen ? fullscreenMonitor : 0, oldWindow);
+		if (newWindow == 0) return false;
+		if (oldWindow != 0) glfwDestroyWindow(oldWindow);
+		window = newWindow;
+		this.width = Math.max(1, width);
+		this.height = Math.max(1, height);
+
+		this.fullscreen = fullscreen;
+		if (!fullscreen) {
+			if (x == -1 || y == -1) {
+				DisplayMode mode = getDesktopDisplayMode();
+				x = (mode.width - width) / 2;
+				y = (mode.height - height) / 2;
+			}
+			glfwSetWindowPos(window, x, y);
+		}
+
+		if (!mouseCaptured) glfwSetInputMode(window, GLFW_CURSOR_MODE, GLFW_CURSOR_NORMAL); // Prevent fullscreen from taking mouse.
+
+		glfwMakeContextCurrent(newWindow);
+		setVSync(vSync);
+		if (visible) glfwShowWindow(window);
+
+		return true;
+	}
+
+	void frameStart (long time) {
+		if (lastTime == -1) lastTime = time;
+		deltaTime = (time - lastTime) / 1000000000.0f;
+		lastTime = time;
+
+		if (time - frameStart >= 1000000000) {
+			fps = frames;
+			frames = 0;
+			frameStart = time;
+		}
+		frames++;
+	}
+
+	void sizeChanged (int width, int height) {
+		glfwShowWindow(window); // This is required to refresh the NSOpenGLContext on OSX!
+		width = Math.max(1, width);
+		height = Math.max(1, height);
+		this.width = width;
+		this.height = height;
+		Gdx.gl.glViewport(0, 0, width, height);
+		ApplicationListener listener = Gdx.app.getApplicationListener();
+		if (listener != null) listener.resize(width, height);
+		requestRendering();
+	}
+
+	void positionChanged (int x, int y) {
+		this.x = x;
+		this.y = y;
+	}
+
+	public boolean isGL20Available () {
+		return gl20 != null;
+	}
+
+	public GL20 getGL20 () {
+		return gl20;
+	}
+
+	public int getWidth () {
+		return width;
+	}
+
+	public int getHeight () {
+		return height;
+	}
+
+	public float getDeltaTime () {
+		return deltaTime;
+	}
+
+	public float getRawDeltaTime () {
+		return deltaTime;
+	}
+
+	public int getFramesPerSecond () {
+		return fps;
+	}
+
+	public GraphicsType getType () {
+		return GraphicsType.JGLFW;
+	}
+
+	public float getPpiX () {
+		// return getWidth() / (glfwGetMonitorPhysicalWidth(getWindowMonitor()) * 0.03937f); // mm to inches
+		return Toolkit.getDefaultToolkit().getScreenResolution();
+	}
+
+	public float getPpiY () {
+		// return getHeight() / (glfwGetMonitorPhysicalHeight(getWindowMonitor()) * 0.03937f); // mm to inches
+		return Toolkit.getDefaultToolkit().getScreenResolution();
+	}
+
+	public float getPpcX () {
+		// return getWidth() / (glfwGetMonitorPhysicalWidth(getWindowMonitor()) / 10); // mm to cm
+		return Toolkit.getDefaultToolkit().getScreenResolution() / 2.54f;
+	}
+
+	public float getPpcY () {
+		// return getHeight() / (glfwGetMonitorPhysicalHeight(getWindowMonitor()) / 10); // mm to cm
+		return Toolkit.getDefaultToolkit().getScreenResolution() / 2.54f;
+	}
+
+	public float getDensity () {
+		// long monitor = getWindowMonitor();
+		// float mmWidth = glfwGetMonitorPhysicalWidth(monitor);
+		// float mmHeight = glfwGetMonitorPhysicalHeight(monitor);
+		// float inches = (float)Math.sqrt(mmWidth * mmWidth + mmHeight * mmHeight) * 0.03937f; // mm to inches
+		// float pixelWidth = getWidth();
+		// float pixelHeight = getHeight();
+		// float pixels = (float)Math.sqrt(pixelWidth * pixelWidth + pixelHeight * pixelHeight);
+		// float diagonalPpi = pixels / inches;
+		// return diagonalPpi / 160f;
+		return Toolkit.getDefaultToolkit().getScreenResolution() / 160f;
+	}
+
+	public boolean supportsDisplayModeChange () {
+		return true;
+	}
+
+	private long getWindowMonitor () {
+		if (window != 0) {
+			long monitor = glfwGetWindowMonitor(window);
+			if (monitor != 0) return monitor;
+		}
+		return glfwGetPrimaryMonitor();
+	}
+
+	public DisplayMode[] getDisplayModes () {
+		Array<DisplayMode> modes = new Array();
+		for (GlfwVideoMode mode : glfwGetVideoModes(getWindowMonitor()))
+			modes.add(new JglfwDisplayMode(mode.width, mode.height, 0, mode.redBits + mode.greenBits + mode.blueBits));
+		return modes.toArray(DisplayMode.class);
+	}
+
+	public DisplayMode getDesktopDisplayMode () {
+		GlfwVideoMode mode = glfwGetVideoMode(getWindowMonitor());
+		return new JglfwDisplayMode(mode.width, mode.height, 0, mode.redBits + mode.greenBits + mode.blueBits);
+	}
+
+	public boolean setDisplayMode (DisplayMode displayMode) {
+		bufferFormat = new BufferFormat( //
+			displayMode.bitsPerPixel == 16 ? 5 : 8, //
+			displayMode.bitsPerPixel == 16 ? 6 : 8, //
+			displayMode.bitsPerPixel == 16 ? 6 : 8, //
+			bufferFormat.a, bufferFormat.depth, bufferFormat.stencil, bufferFormat.samples, false);
+		boolean success = createWindow(displayMode.width, displayMode.height, fullscreen);
+		if (success && fullscreen) sizeChanged(displayMode.width, displayMode.height);
+		return success;
+	}
+
+	public boolean setDisplayMode (int width, int height, boolean fullscreen) {
+		if (fullscreen || this.fullscreen) {
+			boolean success = createWindow(width, height, fullscreen);
+			if (success && fullscreen) sizeChanged(width, height);
+			return success;
+		}
+
+		glfwSetWindowSize(window, width, height);
+		return true;
+	}
+
+	public void setTitle (String title) {
+		if (title == null) title = "";
+		glfwSetWindowTitle(window, title);
+		this.title = title;
+	}
+
+	public void setVSync (boolean vsync) {
+		this.vSync = vsync;
+		glfwSwapInterval(vsync ? 1 : 0);
+	}
+
+	public BufferFormat getBufferFormat () {
+		return bufferFormat;
+	}
+
+	public boolean supportsExtension (String extension) {
+		return glfwExtensionSupported(extension);
+	}
+
+	public void setContinuousRendering (boolean isContinuous) {
+		this.isContinuous = isContinuous;
+	}
+
+	public boolean isContinuousRendering () {
+		return isContinuous;
+	}
+
+	public void requestRendering () {
+		renderRequested = true;
+	}
+
+	public boolean isFullscreen () {
+		return fullscreen;
+	}
+
+	/** Returns the JGLFW window handle. Note this should not be stored externally as it may change if the window is recreated to
+	 * enter/exit fullscreen. */
+	public long getWindow () {
+		return window;
+	}
+
+	public int getX () {
+		return x;
+	}
+
+	public int getY () {
+		return y;
+	}
+
+	public void setPosition (int x, int y) {
+		glfwSetWindowPos(window, x, y);
+	}
+
+	public void hide () {
+		visible = false;
+		glfwHideWindow(window);
+	}
+
+	public void show () {
+		visible = true;
+		glfwShowWindow(window);
+
+		Gdx.gl.glClearColor(initialBackgroundColor.r, initialBackgroundColor.g, initialBackgroundColor.b, initialBackgroundColor.a);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		glfwSwapBuffers(window);
+	}
+
+	public boolean isHidden () {
+		return !visible;
+	}
+
+	public boolean isMinimized () {
+		return minimized;
+	}
+
+	public boolean isForeground () {
+		return foreground;
+	}
+
+	public void minimize () {
+		glfwIconifyWindow(window);
+	}
+
+	public void restore () {
+		glfwRestoreWindow(window);
+	}
+
+	boolean shouldRender () {
+		try {
+			return renderRequested || isContinuous;
+		} finally {
+			renderRequested = false;
+		}
+	}
+
+	static class JglfwDisplayMode extends DisplayMode {
+		protected JglfwDisplayMode (int width, int height, int refreshRate, int bitsPerPixel) {
+			super(width, height, refreshRate, bitsPerPixel);
+		}
 	}
 
 	@Override
@@ -421,5 +390,5 @@ public class JglfwGraphics implements Graphics {
 	@Override
 	public GL30 getGL30 () {
 		return null;
-	}
-}
\ No newline at end of file
+	}
+}
diff --git a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwInput.java b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwInput.java
index 039fb3e..b4ebc70 100644
--- a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwInput.java
+++ b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwInput.java
@@ -265,11 +265,11 @@ public class JglfwInput implements Input {
 		glfwSetCursorPos(app.graphics.window, x, y);
 	}
 
-  @Override
-  public void setCursorImage (Pixmap pixmap, int xHotspot, int yHotspot) {
-  }
+	@Override
+	public void setCursorImage (Pixmap pixmap, int xHotspot, int yHotspot) {
+	}
 
-  public void getTextInput (final TextInputListener listener, final String title, final String text) {
+	public void getTextInput (final TextInputListener listener, final String title, final String text) {
 		SwingUtilities.invokeLater(new Runnable() {
 			public void run () {
 				final String output = JOptionPane.showInputDialog(null, title, text);
diff --git a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwNet.java b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwNet.java
index 023fbb6..18959fd 100644
--- a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwNet.java
+++ b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwNet.java
@@ -38,7 +38,7 @@ public class JglfwNet implements Net {
 	public void sendHttpRequest (HttpRequest httpRequest, HttpResponseListener httpResponseListener) {
 		netJavaImpl.sendHttpRequest(httpRequest, httpResponseListener);
 	}
-	
+
 	@Override
 	public void cancelHttpRequest (HttpRequest httpRequest) {
 		netJavaImpl.cancelHttpRequest(httpRequest);
diff --git a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwUtil.java b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwUtil.java
index 0d6f4b7..a276ba5 100644
--- a/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwUtil.java
+++ b/backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwUtil.java
@@ -12,66 +12,66 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.backends.jglfw;
-
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
-
-class JglfwUtil {
-	static private ByteBuffer buffer = ByteBuffer.allocateDirect(8 * 4).order(ByteOrder.nativeOrder());
-	static private IntBuffer bufferInt = buffer.asIntBuffer();
-	static private FloatBuffer bufferFloat = buffer.asFloatBuffer();
-
-	static private void ensureSize (int n) {
-		if (buffer.capacity() < n) {
-			buffer = ByteBuffer.allocateDirect(n).order(ByteOrder.nativeOrder());
-			bufferInt = buffer.asIntBuffer();
-			bufferFloat = buffer.asFloatBuffer();
-		}
-	}
-
-	static ByteBuffer toBuffer (boolean[] src, int offset) {
-		int n = src.length - offset;
-		ensureSize(n);
-		buffer.position(0);
-		for (boolean value : src)
-			buffer.put(value ? (byte)1 : 0);
-		return buffer;
-	}
-
-	static IntBuffer toBuffer (int[] src, int offset) {
-		int n = src.length - offset;
-		ensureSize(n * 4);
-		bufferInt.position(0);
-		bufferInt.put(src, offset, n);
-		return bufferInt;
-	}
-
-	static FloatBuffer toBuffer (float[] src, int offset) {
-		int n = src.length - offset;
-		ensureSize(n * 4);
-		bufferFloat.position(0);
-		bufferFloat.put(src, offset, n);
-		return bufferFloat;
-	}
-
-	static void toArray (ByteBuffer src, boolean[] dst, int offset) {
-		for (int i = 0; i < dst.length - offset; i++) {
-			dst[i + offset] = src.get(i) != 0;
-		}
-	}
-
-	static void toArray (IntBuffer src, int[] dst, int offset) {
-		src.position(0);
-		src.get(dst, offset, dst.length - offset);
-	}
-
-	static void toArray (FloatBuffer src, float[] dst, int offset) {
-		src.position(0);
-		src.get(dst, offset, dst.length - offset);
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.jglfw;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
+class JglfwUtil {
+	static private ByteBuffer buffer = ByteBuffer.allocateDirect(8 * 4).order(ByteOrder.nativeOrder());
+	static private IntBuffer bufferInt = buffer.asIntBuffer();
+	static private FloatBuffer bufferFloat = buffer.asFloatBuffer();
+
+	static private void ensureSize (int n) {
+		if (buffer.capacity() < n) {
+			buffer = ByteBuffer.allocateDirect(n).order(ByteOrder.nativeOrder());
+			bufferInt = buffer.asIntBuffer();
+			bufferFloat = buffer.asFloatBuffer();
+		}
+	}
+
+	static ByteBuffer toBuffer (boolean[] src, int offset) {
+		int n = src.length - offset;
+		ensureSize(n);
+		buffer.position(0);
+		for (boolean value : src)
+			buffer.put(value ? (byte)1 : 0);
+		return buffer;
+	}
+
+	static IntBuffer toBuffer (int[] src, int offset) {
+		int n = src.length - offset;
+		ensureSize(n * 4);
+		bufferInt.position(0);
+		bufferInt.put(src, offset, n);
+		return bufferInt;
+	}
+
+	static FloatBuffer toBuffer (float[] src, int offset) {
+		int n = src.length - offset;
+		ensureSize(n * 4);
+		bufferFloat.position(0);
+		bufferFloat.put(src, offset, n);
+		return bufferFloat;
+	}
+
+	static void toArray (ByteBuffer src, boolean[] dst, int offset) {
+		for (int i = 0; i < dst.length - offset; i++) {
+			dst[i + offset] = src.get(i) != 0;
+		}
+	}
+
+	static void toArray (IntBuffer src, int[] dst, int offset) {
+		src.position(0);
+		src.get(dst, offset, dst.length - offset);
+	}
+
+	static void toArray (FloatBuffer src, float[] dst, int offset) {
+		src.position(0);
+		src.get(dst, offset, dst.length - offset);
+	}
+}
diff --git a/backends/gdx-backend-lwjgl/libs/gdx-backend-lwjgl-natives.jar b/backends/gdx-backend-lwjgl/libs/gdx-backend-lwjgl-natives.jar
index fdb7ffa..4253dff 100644
Binary files a/backends/gdx-backend-lwjgl/libs/gdx-backend-lwjgl-natives.jar and b/backends/gdx-backend-lwjgl/libs/gdx-backend-lwjgl-natives.jar differ
diff --git a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
index d70f4202..650c086 100644
--- a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
+++ b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
@@ -86,7 +86,7 @@ public class LwjglApplication implements Application {
 		net = new LwjglNet();
 		this.listener = listener;
 		this.preferencesdir = config.preferencesDirectory;
-		
+
 		Gdx.app = this;
 		Gdx.graphics = graphics;
 		Gdx.audio = audio;
@@ -375,7 +375,7 @@ public class LwjglApplication implements Application {
 	}
 
 	@Override
-	public int getLogLevel() {
+	public int getLogLevel () {
 		return logLevel;
 	}
 
@@ -402,4 +402,4 @@ public class LwjglApplication implements Application {
 			lifecycleListeners.removeValue(listener, true);
 		}
 	}
-}
+}
diff --git a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
index 8363053..d558de2 100644
--- a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
+++ b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
@@ -16,6 +16,14 @@
 
 package com.badlogic.gdx.backends.lwjgl;
 
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Graphics;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.GL30;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.Pixmap.Format;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
 import java.awt.Canvas;
 import java.awt.Toolkit;
 import java.nio.ByteBuffer;
@@ -26,21 +34,11 @@ import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.PixelFormat;
 
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
-import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Pixmap.Format;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
 /** An implementation of the {@link Graphics} interface based on Lwjgl.
  * @author mzechner */
 public class LwjglGraphics implements Graphics {
 	static int major, minor;
 
-	GLCommon gl;
 	GL20 gl20;
 	GL30 gl30;
 	float deltaTime = 0;
@@ -112,11 +110,6 @@ public class LwjglGraphics implements Graphics {
 		return fps;
 	}
 
-	@Override
-	public GLCommon getGLCommon () {
-		return gl;
-	}
-
 	void updateTime () {
 		long time = System.nanoTime();
 		deltaTime = (time - lastTime) / 1000000000.0f;
@@ -168,19 +161,23 @@ public class LwjglGraphics implements Graphics {
 
 	private void createDisplayPixelFormat () {
 		try {
-			if(config.useGL30) {
+			if (config.useGL30) {
 				ContextAttribs context = new ContextAttribs(3, 2).withForwardCompatible(false).withProfileCore(true);
 				try {
-					Display.create(new PixelFormat(config.r + config.g + config.b, config.a, config.depth, config.stencil, config.samples));
-				} catch(Exception e) {
-					Display.create(new PixelFormat(config.r + config.g + config.b, config.a, config.depth, config.stencil, config.samples));
+					Display.create(new PixelFormat(config.r + config.g + config.b, config.a, config.depth, config.stencil,
+						config.samples));
+				} catch (Exception e) {
+					Display.create(new PixelFormat(config.r + config.g + config.b, config.a, config.depth, config.stencil,
+						config.samples));
 					System.out.println("LwjglGraphics: couldn't create OpenGL 3.2+ core profile context");
 				}
 				System.out.println("LwjglGraphics: created OpenGL 3.2+ core profile context. This is experimental!");
 			} else {
-				Display.create(new PixelFormat(config.r + config.g + config.b, config.a, config.depth, config.stencil, config.samples));
+				Display
+					.create(new PixelFormat(config.r + config.g + config.b, config.a, config.depth, config.stencil, config.samples));
 			}
-			bufferFormat = new BufferFormat(config.r, config.g, config.b, config.a, config.depth, config.stencil, config.samples, false);
+			bufferFormat = new BufferFormat(config.r, config.g, config.b, config.a, config.depth, config.stencil, config.samples,
+				false);
 		} catch (Exception ex) {
 			Display.destroy();
 			try {
@@ -214,7 +211,14 @@ public class LwjglGraphics implements Graphics {
 							createDisplayPixelFormat();
 							return;
 						}
-						throw new GdxRuntimeException("OpenGL is not supported by the video driver.", ex3);
+						String glInfo = ".";
+						try {
+							glInfo = ": " + GL11.glGetString(GL11.GL_VENDOR) + " " //
+								+ GL11.glGetString(GL11.GL_RENDERER) + " " //
+								+ GL11.glGetString(GL11.GL_VERSION);
+						} catch (Throwable ignored) {
+						}
+						throw new GdxRuntimeException("OpenGL is not supported by the video driver" + glInfo, ex3);
 					}
 					throw new GdxRuntimeException("Unable to create OpenGL display.", ex3);
 				}
@@ -236,12 +240,18 @@ public class LwjglGraphics implements Graphics {
 		major = Integer.parseInt("" + version.charAt(0));
 		minor = Integer.parseInt("" + version.charAt(2));
 
-		if(!(major >= 2 || version.contains("2.1"))) throw new RuntimeException("Libgdx requires OpenGL 2.1"); 
-		
 		gl20 = new LwjglGL20();
-		gl = gl20;
 
-		Gdx.gl = gl;
+		if (major <= 1)
+			throw new GdxRuntimeException("OpenGL 2.0 or higher with the FBO extension is required. OpenGL version: " + version);
+		if (major == 2 || version.contains("2.1")) {
+			if (!supportsExtension("GL_EXT_framebuffer_object") && !supportsExtension("GL_ARB_framebuffer_object")) {
+				throw new GdxRuntimeException("OpenGL 2.0 or higher with the FBO extension is required. OpenGL version: " + version
+					+ ", FBO extension: false");
+			}
+		}
+
+		Gdx.gl = gl20;
 		Gdx.gl20 = gl20;
 	}
 
@@ -403,7 +413,7 @@ public class LwjglGraphics implements Graphics {
 
 	@Override
 	public boolean supportsExtension (String extension) {
-		if (extensions == null) extensions = Gdx.gl.glGetString(GL20.GL_EXTENSIONS);
+		if (extensions == null) extensions = gl20.glGetString(GL20.GL_EXTENSIONS);
 		return extensions.contains(extension);
 	}
 
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
index b1e36ce..b1394f3 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
@@ -21,10 +21,8 @@ import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 
-
-public class IOSGLES20 implements GL20, GLCommon
+public class IOSGLES20 implements GL20
 {	
 	public IOSGLES20() {
 		init();
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
index 3a89d79..0bf51f2 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
@@ -45,7 +45,6 @@ import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.LifecycleListener;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.utils.Array;
 
 // FIXME add GL 1.x support by ripping Android's classes
@@ -321,12 +320,6 @@ public class IOSGraphics extends NSObject implements Graphics, GLKViewDelegate,
 		}
 	}
 
-
-	@Override
-	public GLCommon getGLCommon () {
-		return gl20;
-	}
-
 	@Override
 	public GL20 getGL20 () {
 		return gl20;
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
index dba2c8b..2c84bdf 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
@@ -29,7 +29,7 @@ import com.badlogic.gdx.backends.iosrobovm.objectal.OALAudioTrack;
  */
 public class IOSMusic implements Music {
 	private final OALAudioTrack track;
-	private OnCompletionListener onCompletionListener;
+	OnCompletionListener onCompletionListener;
 
 	public IOSMusic(OALAudioTrack track) {
 		this.track = track;
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
index f9c5c92..b0c7c3c 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
@@ -164,7 +164,7 @@ public abstract class GwtApplication implements EntryPoint, Application {
 		Gdx.audio = new GwtAudio();
 		Gdx.graphics = graphics;
 		Gdx.gl20 = graphics.getGL20();
-		Gdx.gl = graphics.getGLCommon();
+		Gdx.gl = Gdx.gl20;
 		Gdx.files = new GwtFiles(preloader);
 		this.input = new GwtInput(graphics.canvas);
 		Gdx.input = this.input;
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
index 1ba22e5..77466ea 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.google.gwt.canvas.client.Canvas;
 import com.google.gwt.dom.client.CanvasElement;
@@ -66,11 +65,6 @@ public class GwtGraphics implements Graphics {
 	}
 
 	@Override
-	public GLCommon getGLCommon () {
-		return gl;
-	}
-
-	@Override
 	public GL20 getGL20 () {
 		return gl;
 	}
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtNet.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtNet.java
index 6b182f5..f13a130 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtNet.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtNet.java
@@ -45,8 +45,8 @@ import com.google.gwt.user.client.Window;
 
 public class GwtNet implements Net {
 
-	private ObjectMap<HttpRequest, Request> requests;
-	private ObjectMap<HttpRequest, HttpResponseListener> listeners;
+	ObjectMap<HttpRequest, Request> requests;
+	ObjectMap<HttpRequest, HttpResponseListener> listeners;
 
 	private final class HttpClientResponse implements HttpResponse {
 
@@ -106,7 +106,7 @@ public class GwtNet implements Net {
 	}
 
 	@Override
-	public void sendHttpRequest (HttpRequest httpRequest, final HttpResponseListener httpResultListener) {
+	public void sendHttpRequest (final HttpRequest httpRequest, final HttpResponseListener httpResultListener) {
 		if (httpRequest.getUrl() == null) {
 			httpResultListener.failed(new GdxRuntimeException("can't process a HTTP request without URL set"));
 			return;
@@ -115,8 +115,17 @@ public class GwtNet implements Net {
 		final boolean is_get = (httpRequest.getMethod() == HttpMethods.GET);
 		final String value = httpRequest.getContent();
 
-		final RequestBuilder builder = is_get ? new RequestBuilder(RequestBuilder.GET, httpRequest.getUrl() + "?" + value)
-			: new RequestBuilder(RequestBuilder.POST, httpRequest.getUrl());
+		RequestBuilder builder;
+		
+		String url = httpRequest.getUrl();
+		if (is_get) {
+			if (value != null) {
+				url += "?" + value;
+			}
+			builder = new RequestBuilder(RequestBuilder.GET, url);
+		} else {
+			builder = new RequestBuilder(RequestBuilder.POST, url);
+		}
 
 		Map<String, String> content = httpRequest.getHeaders();
 		Set<String> keySet = content.keySet();
@@ -130,28 +139,19 @@ public class GwtNet implements Net {
 			Request request = builder.sendRequest(is_get ? null : value, new RequestCallback() {
 
 				@Override
-				public void onResponseReceived (Request request, Response response) {
-					HttpRequest httpRequest = requests.findKey(requests, true);
-
-					if (httpRequest != null) {
+				public void onResponseReceived (Request request, Response response) {					
 						httpResultListener.handleHttpResponse(new HttpClientResponse(response));
 						requests.remove(httpRequest);
 						listeners.remove(httpRequest);
-					}
 				}
 
 				@Override
 				public void onError (Request request, Throwable exception) {
-					HttpRequest httpRequest = requests.findKey(requests, true);
-
-					if (httpRequest != null) {
 						httpResultListener.failed(exception);
 						requests.remove(httpRequest);
 						listeners.remove(httpRequest);
-					}
 				}
 			});
-
 			requests.put(httpRequest, request);
 			listeners.put(httpRequest, httpResultListener);
 
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
index caa19e6..722846c 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
@@ -474,6 +474,12 @@ public class Matrix4 implements Serializable {
 			+ val[M10] * val[M21] * val[M02] * val[M33] + val[M20] * val[M01] * val[M12] * val[M33] - val[M00] * val[M21] * val[M12]
 			* val[M33] - val[M10] * val[M01] * val[M22] * val[M33] + val[M00] * val[M11] * val[M22] * val[M33];
 	}
+	
+	/** @return The determinant of the 3x3 upper left matrix */
+	public float det3x3 () {
+		return val[M00] * val[M11] * val[M22] + val[M01] * val[M12] * val[M20] + val[M02] * val[M10] * val[M21] - val[M00]
+			* val[M12] * val[M21] - val[M01] * val[M10] * val[M22] - val[M02] * val[M11] * val[M20];
+	}
 
 	/** Sets the matrix to a projection matrix with a near- and far plane, a field of view in degrees and an aspect ratio.
 	 * 
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvaders.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvaders.java
index a304c68..f4cbb19 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvaders.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvaders.java
@@ -27,11 +27,11 @@ import com.badlogic.gdxinvaders.screens.InvadersScreen;
 import com.badlogic.gdxinvaders.screens.MainMenu;
 
 public class GdxInvaders extends Game {
-	
+
 	/** Music needs to be a class property to prevent being disposed. */
 	private Music music;
 	private FPSLogger fps;
-	
+
 	@Override
 	public void render () {
 		InvadersScreen currentScreen = getScreen();
@@ -62,7 +62,7 @@ public class GdxInvaders extends Game {
 				}
 			}
 		}
-		
+
 		fps.log();
 	}
 
@@ -81,7 +81,7 @@ public class GdxInvaders extends Game {
 				return true;
 			}
 		});
-		
+
 		fps = new FPSLogger();
 	}
 
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
index 457bd65..18c4e5e 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
@@ -16,7 +16,6 @@ package com.badlogic.gdxinvaders;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture;
@@ -63,14 +62,14 @@ public class Renderer {
 	Environment lights;
 
 	ModelBatch modelBatch;
-	
+
 	final Vector3 tmpV = new Vector3();
 
 	public Renderer () {
 		try {
 			lights = new Environment();
 			lights.add(new DirectionalLight().set(Color.WHITE, new Vector3(-1, -0.5f, 0).nor()));
-			
+
 			spriteBatch = new SpriteBatch();
 			modelBatch = new ModelBatch();
 
@@ -88,22 +87,21 @@ public class Renderer {
 	public void render (Simulation simulation, float delta) {
 		// We explicitly require GL10, otherwise we could've used the GLCommon
 		// interface via Gdx.gl
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 		renderBackground();
 		gl.glEnable(GL20.GL_DEPTH_TEST);
 		gl.glEnable(GL20.GL_CULL_FACE);
 		setProjectionAndCamera(simulation.ship);
-		
+
 		modelBatch.begin(camera);
 		modelBatch.render(simulation.explosions);
-		if (!simulation.ship.isExploding)
-			modelBatch.render(simulation.ship, lights);
+		if (!simulation.ship.isExploding) modelBatch.render(simulation.ship, lights);
 		modelBatch.render(simulation.invaders, lights);
 		modelBatch.render(simulation.blocks);
 		modelBatch.render(simulation.shots);
 		modelBatch.end();
-		
+
 		gl.glDisable(GL20.GL_CULL_FACE);
 		gl.glDisable(GL20.GL_DEPTH_TEST);
 
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java
index 2736563..439db95 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java
@@ -29,22 +29,23 @@ public class GameLoop extends InvadersScreen implements SimulationListener {
 	private final Sound explosion;
 	/** shot sound **/
 	private final Sound shot;
+
 	/** controller **/
-//	private Controller controller;
-//	private int buttonsPressed = 0;
-//	private ControllerListener listener = new ControllerAdapter() {
-//		@Override
-//		public boolean buttonDown (Controller controller, int buttonIndex) {
-//			buttonsPressed++;
-//			return true;
-//		}
+// private Controller controller;
+// private int buttonsPressed = 0;
+// private ControllerListener listener = new ControllerAdapter() {
+// @Override
+// public boolean buttonDown (Controller controller, int buttonIndex) {
+// buttonsPressed++;
+// return true;
+// }
 //
-//		@Override
-//		public boolean buttonUp (Controller controller, int buttonIndex) {
-//			buttonsPressed--;
-//			return true;
-//		}
-//	};
+// @Override
+// public boolean buttonUp (Controller controller, int buttonIndex) {
+// buttonsPressed--;
+// return true;
+// }
+// };
 
 	public GameLoop () {
 		simulation = new Simulation();
@@ -52,16 +53,16 @@ public class GameLoop extends InvadersScreen implements SimulationListener {
 		renderer = new Renderer();
 		explosion = Gdx.audio.newSound(Gdx.files.internal("data/explosion.wav"));
 		shot = Gdx.audio.newSound(Gdx.files.internal("data/shot.wav"));
-		
+
 		// check for attached controllers and if we are on
 		// Ouya, take the first controller. Doesn't handle disconnects :D
-//		if(Controllers.getControllers().size > 0) {
-//			Controller controller = Controllers.getControllers().get(0);
-//			if(Ouya.ID.equals(controller.getName())) {
-//				this.controller = controller;
-//				controller.addListener(listener);
-//			}
-//		}
+// if(Controllers.getControllers().size > 0) {
+// Controller controller = Controllers.getControllers().get(0);
+// if(Ouya.ID.equals(controller.getName())) {
+// this.controller = controller;
+// controller.addListener(listener);
+// }
+// }
 	}
 
 	@Override
@@ -69,8 +70,8 @@ public class GameLoop extends InvadersScreen implements SimulationListener {
 		renderer.dispose();
 		shot.dispose();
 		explosion.dispose();
-//		if (controller != null)
-//			controller.removeListener(listener);
+// if (controller != null)
+// controller.removeListener(listener);
 		simulation.dispose();
 	}
 
@@ -93,21 +94,21 @@ public class GameLoop extends InvadersScreen implements SimulationListener {
 			simulation.moveShipLeft(delta, Math.abs(accelerometerY) / 10);
 		else
 			simulation.moveShipRight(delta, Math.abs(accelerometerY) / 10);
-		
-//		if(controller != null) {
-//			// if any button is pressed, we shoot.
-//			if(buttonsPressed > 0) simulation.shot();
-//			
-//			// if the left stick moved, move the ship
-//			float axisValue = controller.getAxis(Ouya.AXIS_LEFT_X) * 0.5f;
-//			if(Math.abs(axisValue) > 0.25f) {
-//				if(axisValue > 0) {
-//					simulation.moveShipRight(delta, axisValue);
-//				} else {
-//					simulation.moveShipLeft(delta, -axisValue);
-//				}
-//			}
-//		}
+
+// if(controller != null) {
+// // if any button is pressed, we shoot.
+// if(buttonsPressed > 0) simulation.shot();
+//
+// // if the left stick moved, move the ship
+// float axisValue = controller.getAxis(Ouya.AXIS_LEFT_X) * 0.5f;
+// if(Math.abs(axisValue) > 0.25f) {
+// if(axisValue > 0) {
+// simulation.moveShipRight(delta, axisValue);
+// } else {
+// simulation.moveShipLeft(delta, -axisValue);
+// }
+// }
+// }
 
 		if (Gdx.input.isKeyPressed(Keys.DPAD_LEFT) || Gdx.input.isKeyPressed(Keys.A)) simulation.moveShipLeft(delta, 0.5f);
 		if (Gdx.input.isKeyPressed(Keys.DPAD_RIGHT) || Gdx.input.isKeyPressed(Keys.D)) simulation.moveShipRight(delta, 0.5f);
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameOver.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameOver.java
index f39109f..1782b9c 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameOver.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameOver.java
@@ -52,19 +52,19 @@ public class GameOver extends InvadersScreen {
 		logo.setFilter(TextureFilter.Linear, TextureFilter.Linear);
 
 		font = new BitmapFont(Gdx.files.internal("data/font16.fnt"), Gdx.files.internal("data/font16.png"), false);
-		
-//		if(Controllers.getControllers().size > 0) {
-//			Controller controller = Controllers.getControllers().get(0);
-//			if(Ouya.ID.equals(controller.getName())) {
-//				controller.addListener(new ControllerAdapter() {
-//					@Override
-//					public boolean buttonUp (Controller controller, int buttonIndex) {
-//						isDone = true;
-//						return false;
-//					}
-//				});
-//			}
-//		}
+
+// if(Controllers.getControllers().size > 0) {
+// Controller controller = Controllers.getControllers().get(0);
+// if(Ouya.ID.equals(controller.getName())) {
+// controller.addListener(new ControllerAdapter() {
+// @Override
+// public boolean buttonUp (Controller controller, int buttonIndex) {
+// isDone = true;
+// return false;
+// }
+// });
+// }
+// }
 	}
 
 	@Override
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java
index c7ebb8c..3491d1c 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java
@@ -51,21 +51,21 @@ public class MainMenu extends InvadersScreen {
 		logo.setFilter(TextureFilter.Linear, TextureFilter.Linear);
 
 		font = new BitmapFont(Gdx.files.internal("data/font16.fnt"), Gdx.files.internal("data/font16.png"), false);
-		
+
 		// check for attached controllers and if we are on
 		// Ouya.
-//		if(Controllers.getControllers().size > 0) {
-//			Controller controller = Controllers.getControllers().get(0);
-//			if(Ouya.ID.equals(controller.getName())) {
-//				controller.addListener(new ControllerAdapter() {
-//					@Override
-//					public boolean buttonUp (Controller controller, int buttonIndex) {
-//						isDone = true;
-//						return false;
-//					}
-//				});
-//			}
-//		}
+// if(Controllers.getControllers().size > 0) {
+// Controller controller = Controllers.getControllers().get(0);
+// if(Ouya.ID.equals(controller.getName())) {
+// controller.addListener(new ControllerAdapter() {
+// @Override
+// public boolean buttonUp (Controller controller, int buttonIndex) {
+// isDone = true;
+// return false;
+// }
+// });
+// }
+// }
 	}
 
 	@Override
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java
index 129f474..cda9cb0 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java
@@ -21,6 +21,6 @@ public class Block extends ModelInstance {
 	public final static float BLOCK_RADIUS = 0.5f;
 
 	public Block (Model model, float x, float y, float z) {
-		super(model, x,y,z);
+		super(model, x, y, z);
 	}
 }
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java
index 490e336..9d09dda 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java
@@ -32,11 +32,11 @@ public class Explosion extends ModelInstance {
 	public void update (float delta) {
 		aliveTime += delta;
 	}
-	
+
 	@Override
 	public void getRenderables (Array<Renderable> renderables, Pool<Renderable> pool) {
 		super.getRenderables(renderables, pool);
-		Renderable r = renderables.get(renderables.size-1);
+		Renderable r = renderables.get(renderables.size - 1);
 		r.meshPartOffset = 6 * (int)(15 * aliveTime / EXPLOSION_LIVE_TIME);
 		r.meshPartSize = 6;
 	}
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java
index d2c0c0b..c5a2f95 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java
@@ -53,7 +53,7 @@ public class Invader extends ModelInstance {
 			}
 		}
 		if (state == STATE_MOVE_DOWN) {
-			transform.trn(0,0,delta * INVADER_VELOCITY * speedMultiplier);
+			transform.trn(0, 0, delta * INVADER_VELOCITY * speedMultiplier);
 			if (movedDistance > 1) {
 				if (wasLastStateLeft)
 					state = STATE_MOVE_RIGHT;
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java
index b963d53..15103e4 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java
@@ -23,8 +23,8 @@ public class Ship extends ModelInstance {
 	public int lives = 3;
 	public boolean isExploding = false;
 	public float explodeTime = 0;
-	
-	public Ship(Model model) {
+
+	public Ship (Model model) {
 		super(model);
 	}
 
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
index e731f4a..e0f5d86 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
@@ -55,10 +55,10 @@ public class Simulation implements Disposable {
 	public Model blockModel;
 	public Model shotModel;
 	public Model explosionModel;
-	
+
 	private ArrayList<Shot> removedShots = new ArrayList<Shot>();
 	private ArrayList<Explosion> removedExplosions = new ArrayList<Explosion>();
-	
+
 	private final Vector3 tmpV1 = new Vector3();
 	private final Vector3 tmpV2 = new Vector3();
 
@@ -72,23 +72,23 @@ public class Simulation implements Disposable {
 		invaderModel = objLoader.loadModel(Gdx.files.internal("data/invader.obj"));
 		blockModel = objLoader.loadModel(Gdx.files.internal("data/block.obj"));
 		shotModel = objLoader.loadModel(Gdx.files.internal("data/shot.obj"));
-		
+
 		final Texture shipTexture = new Texture(Gdx.files.internal("data/ship.png"), Format.RGB565, true);
 		shipTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
 		final Texture invaderTexture = new Texture(Gdx.files.internal("data/invader.png"), Format.RGB565, true);
 		invaderTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
 		shipModel.materials.get(0).set(TextureAttribute.createDiffuse(shipTexture));
 		invaderModel.materials.get(0).set(TextureAttribute.createDiffuse(invaderTexture));
-		
+
 		((ColorAttribute)blockModel.materials.get(0).get(ColorAttribute.Diffuse)).color.set(0, 0, 1, 0.5f);
 		blockModel.materials.get(0).set(new BlendingAttribute(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA));
-		
+
 		shotModel.materials.get(0).set(ColorAttribute.createDiffuse(1, 1, 0, 1f));
-		
+
 		final Texture explosionTexture = new Texture(Gdx.files.internal("data/explode.png"), Format.RGBA4444, true);
 		explosionTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
 
-		final Mesh explosionMesh = new Mesh(true, 4 * 16, 6 * 16, new VertexAttribute(Usage.Position, 3, "a_position"), 
+		final Mesh explosionMesh = new Mesh(true, 4 * 16, 6 * 16, new VertexAttribute(Usage.Position, 3, "a_position"),
 			new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoord0"));
 
 		float[] vertices = new float[4 * 16 * (3 + 2)];
@@ -120,24 +120,23 @@ public class Simulation implements Disposable {
 				vertices[idx++] = 0;
 				vertices[idx++] = 0.25f + column * 0.25f;
 				vertices[idx++] = 0.25f + row * 0.25f;
-				
-				final int t = (4*row+column)*4;
+
+				final int t = (4 * row + column) * 4;
 				indices[index++] = (short)(t);
-				indices[index++] = (short)(t+1);
-				indices[index++] = (short)(t+2);
+				indices[index++] = (short)(t + 1);
+				indices[index++] = (short)(t + 2);
 				indices[index++] = (short)(t);
-				indices[index++] = (short)(t+2);
-				indices[index++] = (short)(t+3);
+				indices[index++] = (short)(t + 2);
+				indices[index++] = (short)(t + 3);
 			}
 		}
 
 		explosionMesh.setVertices(vertices);
 		explosionMesh.setIndices(indices);
-		
-		explosionModel = ModelBuilder.createFromMesh(explosionMesh, GL20.GL_TRIANGLES, 
-			new Material(new BlendingAttribute(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA), 
-				TextureAttribute.createDiffuse(explosionTexture)));
-		
+
+		explosionModel = ModelBuilder.createFromMesh(explosionMesh, GL20.GL_TRIANGLES, new Material(new BlendingAttribute(
+			GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA), TextureAttribute.createDiffuse(explosionTexture)));
+
 		ship = new Ship(shipModel);
 		ship.transform.rotate(0, 1, 0, 180);
 
@@ -311,7 +310,7 @@ public class Simulation implements Disposable {
 
 		ship.transform.trn(-delta * Ship.SHIP_VELOCITY * scale, 0, 0);
 		ship.transform.getTranslation(tmpV1);
-		if (tmpV1.x < PLAYFIELD_MIN_X) ship.transform.trn(PLAYFIELD_MIN_X - tmpV1.x, 0,0);
+		if (tmpV1.x < PLAYFIELD_MIN_X) ship.transform.trn(PLAYFIELD_MIN_X - tmpV1.x, 0, 0);
 	}
 
 	public void moveShipRight (float delta, float scale) {
@@ -319,7 +318,7 @@ public class Simulation implements Disposable {
 
 		ship.transform.trn(+delta * Ship.SHIP_VELOCITY * scale, 0, 0);
 		ship.transform.getTranslation(tmpV1);
-		if (tmpV1.x > PLAYFIELD_MAX_X) ship.transform.trn(tmpV1.x - PLAYFIELD_MAX_X, 0,0);
+		if (tmpV1.x > PLAYFIELD_MAX_X) ship.transform.trn(tmpV1.x - PLAYFIELD_MAX_X, 0, 0);
 	}
 
 	public void shot () {
diff --git a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/GameScreen.java b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/GameScreen.java
index 17f4bd3..f643d15 100644
--- a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/GameScreen.java
+++ b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/GameScreen.java
@@ -22,11 +22,11 @@ import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.math.Vector3;
+
 import com.badlogicgames.superjumper.World.WorldListener;
 
 public class GameScreen implements Screen {
@@ -191,7 +191,7 @@ public class GameScreen implements Screen {
 	}
 
 	public void draw () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		renderer.render();
diff --git a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen.java b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen.java
index f7086ae..05b79fc 100644
--- a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen.java
+++ b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -62,7 +61,7 @@ public class HelpScreen implements Screen {
 	}
 
 	public void draw () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
diff --git a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen2.java b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen2.java
index 05c52cb..2aa36b6 100644
--- a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen2.java
+++ b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen2.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -62,7 +61,7 @@ public class HelpScreen2 implements Screen {
 	}
 
 	public void draw () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
diff --git a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen3.java b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen3.java
index bb15a6b..e2a4f7e 100644
--- a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen3.java
+++ b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen3.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -62,7 +61,7 @@ public class HelpScreen3 implements Screen {
 	}
 
 	public void draw () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
diff --git a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen4.java b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen4.java
index 579bdee..a715b6d 100644
--- a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen4.java
+++ b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen4.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -62,7 +61,7 @@ public class HelpScreen4 implements Screen {
 	}
 
 	public void draw () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
diff --git a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen5.java b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen5.java
index 71e3135..6e043eb 100644
--- a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen5.java
+++ b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen5.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -62,7 +61,7 @@ public class HelpScreen5 implements Screen {
 	}
 
 	public void draw () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
diff --git a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HighscoresScreen.java b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HighscoresScreen.java
index 41ee3f4..f4a5672 100644
--- a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HighscoresScreen.java
+++ b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HighscoresScreen.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.Rectangle;
@@ -65,7 +64,7 @@ public class HighscoresScreen implements Screen {
 	}
 
 	public void draw () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
diff --git a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/MainMenuScreen.java b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/MainMenuScreen.java
index 92a93c4..a40c8eb 100644
--- a/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/MainMenuScreen.java
+++ b/demos/superjumper/superjumper/src/com/badlogicgames/superjumper/MainMenuScreen.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.Rectangle;
@@ -84,7 +83,7 @@ public class MainMenuScreen implements Screen {
 	long last = TimeUtils.nanoTime();
 
 	public void draw () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glClearColor(1, 0, 0, 1);
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
diff --git a/demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/Bouncy.java b/demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/Bouncy.java
index 3cdd4b5..83495e7 100644
--- a/demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/Bouncy.java
+++ b/demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/Bouncy.java
@@ -5,10 +5,10 @@ import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputAdapter;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.math.WindowedMean;
 import com.badlogic.gdx.utils.TimeUtils;
+
 import com.dozingcatsoftware.bouncy.elements.FieldElement;
 
 public class Bouncy extends InputAdapter implements ApplicationListener {
@@ -36,7 +36,7 @@ public class Bouncy extends InputAdapter implements ApplicationListener {
 
 	@Override
 	public void render () {
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 
 		long startPhysics = TimeUtils.nanoTime();
 		field.tick((long)(Gdx.graphics.getDeltaTime() * 3000), 4);
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/collision_wrap.cpp b/extensions/gdx-bullet/jni/swig-src/collision/collision_wrap.cpp
index a298a9f..1606a95 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/collision_wrap.cpp
+++ b/extensions/gdx-bullet/jni/swig-src/collision/collision_wrap.cpp
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #define SWIGJAVA
@@ -66,28 +66,28 @@ template <typename T> T SwigValueInit() {
 #ifndef SWIGUNUSED
 # if defined(__GNUC__)
 #   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
-#     define SWIGUNUSED __attribute__ ((__unused__))
+#     define SWIGUNUSED __attribute__ ((__unused__)) 
 #   else
 #     define SWIGUNUSED
 #   endif
 # elif defined(__ICC)
-#   define SWIGUNUSED __attribute__ ((__unused__))
+#   define SWIGUNUSED __attribute__ ((__unused__)) 
 # else
-#   define SWIGUNUSED
+#   define SWIGUNUSED 
 # endif
 #endif
 
 #ifndef SWIG_MSC_UNSUPPRESS_4505
 # if defined(_MSC_VER)
 #   pragma warning(disable : 4505) /* unreferenced local function has been removed */
-# endif
+# endif 
 #endif
 
 #ifndef SWIGUNUSEDPARM
 # ifdef __cplusplus
 #   define SWIGUNUSEDPARM(p)
 # else
-#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
+#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
 # endif
 #endif
 
@@ -130,7 +130,7 @@ template <typename T> T SwigValueInit() {
 #   define SWIGSTDCALL __stdcall
 # else
 #   define SWIGSTDCALL
-# endif
+# endif 
 #endif
 
 /* Deal with Microsoft's attempt at deprecating C standard runtime functions */
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/collision_wrap.h b/extensions/gdx-bullet/jni/swig-src/collision/collision_wrap.h
index 8c96e35..9ef226a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/collision_wrap.h
+++ b/extensions/gdx-bullet/jni/swig-src/collision/collision_wrap.h
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #ifndef SWIG_Collision_WRAP_H_
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/AllHitsRayResultCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/AllHitsRayResultCallback.java
index e252e5b..15035e7 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/AllHitsRayResultCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/AllHitsRayResultCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BroadphaseNativeTypes.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BroadphaseNativeTypes.java
index 0fa6e1a..f96796f 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BroadphaseNativeTypes.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BroadphaseNativeTypes.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestConvexResultCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestConvexResultCallback.java
index 96b19f8..0845ffd 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestConvexResultCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestConvexResultCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeConvexResultCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeConvexResultCallback.java
index 2a6b09e..6654272 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeConvexResultCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeConvexResultCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeRayResultCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeRayResultCallback.java
index 64a3785..3a73183 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeRayResultCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeRayResultCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestPointInput.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestPointInput.java
index 3a82d8c..8ce897a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestPointInput.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestPointInput.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestRayResultCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestRayResultCallback.java
index a3e4ad0..c18e2ff 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestRayResultCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestRayResultCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Collision.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Collision.java
index f24d694..aa169bd 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Collision.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Collision.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionConstants.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionConstants.java
index 46aa605..aa92e9e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionConstants.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionConstants.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java
index 5fde8ee..a6b6275 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCache.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCache.java
index 98ac069..b1a7e3b 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCache.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCache.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCallbackEvent.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCallbackEvent.java
index acd2740..7fa7d71 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCallbackEvent.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCallbackEvent.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactListener.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactListener.java
index 98cc8b3..fc46fa0 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactListener.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactListener.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactResultCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactResultCallback.java
index fe91d99..cffadfa 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactResultCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactResultCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ConvexResultCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ConvexResultCallback.java
index ada76bbf..9ec166c 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ConvexResultCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ConvexResultCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GdxCollisionObjectBridge.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GdxCollisionObjectBridge.java
index a75069a..9a3fe96 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GdxCollisionObjectBridge.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GdxCollisionObjectBridge.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalConvexResult.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalConvexResult.java
index a8b6894..ce599a1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalConvexResult.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalConvexResult.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalRayResult.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalRayResult.java
index 7a08628..6378ddf 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalRayResult.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalRayResult.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalShapeInfo.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalShapeInfo.java
index b9813dc..4b2226f 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalShapeInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalShapeInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/PHY_ScalarType.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/PHY_ScalarType.java
index 152e0a7..521e5e6 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/PHY_ScalarType.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/PHY_ScalarType.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/RayResultCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/RayResultCallback.java
index bb2aeca..19e174e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/RayResultCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/RayResultCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Result.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Result.java
index 5a61e00..3a30022 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Result.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Result.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_PHY_ScalarType.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_PHY_ScalarType.java
index e17eb80..4ed94d5 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_PHY_ScalarType.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_PHY_ScalarType.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t.java
index 6666bc7..b7d98a3 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t.java
index 5b5713f..75ab2b6 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.java
index ea67ddc..1348e29 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.java
index 876a8ea..2534be2 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.java
index 44d9c46..119e5b5 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btFace_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btFace_t.java
index 9d80ad1..82492ab 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btFace_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btFace_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t.java
index ef6733d..9e60f64 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t.java
index 25d1665..68c0644 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t.java
index 64e7553..7b8275d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
index ad47e7e..2fa0fe4 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAxisSweep3InternalT_unsigned_int_t__Handle.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAxisSweep3InternalT_unsigned_int_t__Handle.java
index 5f74ec6..1ce73d1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAxisSweep3InternalT_unsigned_int_t__Handle.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAxisSweep3InternalT_unsigned_int_t__Handle.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAxisSweep3InternalT_unsigned_short_t__Handle.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAxisSweep3InternalT_unsigned_short_t__Handle.java
index 6edb618..0dc359b 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAxisSweep3InternalT_unsigned_short_t__Handle.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAxisSweep3InternalT_unsigned_short_t__Handle.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btConvexCast__CastResult.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btConvexCast__CastResult.java
index 0c0b3df..cf22937 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btConvexCast__CastResult.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btConvexCast__CastResult.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__IClone.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__IClone.java
index bb7df14..3b95935 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__IClone.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__IClone.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__ICollide.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__ICollide.java
index 979d3e2..0c6ef78 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__ICollide.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__ICollide.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__IWriter.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__IWriter.java
index 5442497..ce8bea1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__IWriter.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__IWriter.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__sStkNPS.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__sStkNPS.java
index 8c3ec2e..e19a8e1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__sStkNPS.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDbvt__sStkNPS.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result.java
index a0561eb..942e423 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btGjkEpaSolver2__sResults.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btGjkEpaSolver2__sResults.java
index db0e682..462b2fa 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btGjkEpaSolver2__sResults.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btGjkEpaSolver2__sResults.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy.java
index d2d7908..fa3d8de 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSerializer.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSerializer.java
index f064295..f360311 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSerializer.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSerializer.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSimulationIslandManager__IslandCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSimulationIslandManager__IslandCallback.java
index 377ca25..1e772ff 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSimulationIslandManager__IslandCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSimulationIslandManager__IslandCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool.java
index 6becc7b..3b1de9f 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.java
index db487cc..f1c82d6 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool.java
index d8498d0..f857ffc 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_float.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_float.java
index 23f4fb2..341ddc6 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_float.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_float.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_int.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_int.java
index 4ba305c..c761c32 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_int.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_int.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btCollisionObject.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btCollisionObject.java
index 3c6f82a..c365e3d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btCollisionObject.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btCollisionObject.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtProxy.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtProxy.java
index fd1ec64..fa41155 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtProxy.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtProxy.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btPersistentManifold.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btPersistentManifold.java
index a6109ea..6766691 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btPersistentManifold.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btPersistentManifold.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btVector3.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btVector3.java
index 7ae376c..b051541 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btVector3.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btVector3.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_unsigned_char.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_unsigned_char.java
index 1ce3536..f277118 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_unsigned_char.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_unsigned_char.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SphereTriangleDetector.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SphereTriangleDetector.java
index b1b1160..a76f6eb 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SphereTriangleDetector.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SphereTriangleDetector.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/bt32BitAxisSweep3.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/bt32BitAxisSweep3.java
index 6d87908..2ec966f 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/bt32BitAxisSweep3.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/bt32BitAxisSweep3.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btActivatingCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btActivatingCollisionAlgorithm.java
index fa389ae..10f7cf9 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btActivatingCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btActivatingCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3.java
index 0d34a8e..c3ee3f5 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalInt.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalInt.java
index 525fc43..c1f8531 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalInt.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalInt.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalShort.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalShort.java
index f4f9096..6730022 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalShort.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalShort.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBU_Simplex1to4.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBU_Simplex1to4.java
index 8fa70bc..15e813a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBU_Simplex1to4.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBU_Simplex1to4.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dBox2dCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dBox2dCollisionAlgorithm.java
index a5313c9..0c2be0f 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dBox2dCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dBox2dCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dShape.java
index 6374420..6789aef 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxCollisionAlgorithm.java
index 6ba63b6..d826cb2 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxDetector.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxDetector.java
index febf0a9..c678a25 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxDetector.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxDetector.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxShape.java
index cd1a00d..b2be491 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseAabbCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseAabbCallback.java
index a397c1a..7556b66 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseAabbCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseAabbCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseInterface.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseInterface.java
index bd5e80f..2c141b4 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseInterface.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseInterface.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePair.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePair.java
index 488667e..16821e2 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePair.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePair.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java
index bcd0b00..e297fee 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairSortPredicate.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairSortPredicate.java
index 35e2e21..9f42c29 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairSortPredicate.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairSortPredicate.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseProxy.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseProxy.java
index b434c23..df94dbc 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseProxy.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseProxy.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseRayCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseRayCallback.java
index 2858a83..f417f05 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseRayCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseRayCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfo.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfo.java
index 82328df..afd646d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfoData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfoData.java
index 03c647c..d7ed3cd 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfoData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfoData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTriangleMeshShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTriangleMeshShape.java
index 11f9493..829db31 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTriangleMeshShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTriangleMeshShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShape.java
index 6f785cd..1de7dff 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeData.java
index dd2d7f9..d739385 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeX.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeX.java
index 8d9f20a..62b1f57 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeX.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeX.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeZ.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeZ.java
index a3d9acf..e9a36ba 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeZ.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeZ.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCharIndexTripletData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCharIndexTripletData.java
index ac6af97..63fb656 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCharIndexTripletData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCharIndexTripletData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithm.java
index a96c8bd..438e60e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmConstructionInfo.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmConstructionInfo.java
index 43fb415..2ed4730 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmConstructionInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmConstructionInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmCreateFunc.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmCreateFunc.java
index d17cb3e..596d1cc 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmCreateFunc.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmCreateFunc.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionConfiguration.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionConfiguration.java
index 7e46753..755e7ec 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionConfiguration.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionConfiguration.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionDispatcher.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionDispatcher.java
index dc2e321..70cc762 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionDispatcher.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionDispatcher.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObject.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObject.java
index 102a6db..7f965ec 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObject.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObject.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectArray.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectArray.java
index 576f467..b9030e9 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectArray.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectConstArray.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectConstArray.java
index 20c14c5..a260e5d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectConstArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectConstArray.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectDoubleData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectDoubleData.java
index fb25dd2..1792dd7 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectFloatData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectFloatData.java
index c66e77c..ca24355 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectWrapper.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectWrapper.java
index 1bbfd6f..0b2be67 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectWrapper.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectWrapper.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShape.java
index dd64fba..ad99912 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShapeData.java
index bf394f9..e4c271f 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionWorld.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionWorld.java
index f162f97..7267e91 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionWorld.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionWorld.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCollisionAlgorithm.java
index ca40341..3b4778b 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCompoundCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCompoundCollisionAlgorithm.java
index 89621a9..f4d22ee 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCompoundCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCompoundCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShape.java
index af49e6a..795c205 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChild.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChild.java
index c79c603..5ecdd53 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChild.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChild.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChildData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChildData.java
index 8471bd7..058a964 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChildData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChildData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeData.java
index 25ff03b..bd9471c 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConcaveShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConcaveShape.java
index 34a187d..29f9c55 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConcaveShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConcaveShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShape.java
index 1683bd4..908a034 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeData.java
index 04c919e..4789edc 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeX.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeX.java
index cca3779..285ba73 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeX.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeX.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeZ.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeZ.java
index 846e12b..eb4c306 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeZ.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeZ.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConstraintRow.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConstraintRow.java
index aabb9e4..054aa10 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConstraintRow.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConstraintRow.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactManifoldTypes.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactManifoldTypes.java
index 3cfba96..86cbef2 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactManifoldTypes.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactManifoldTypes.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContinuousConvexCollision.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContinuousConvexCollision.java
index 095c0cf..0dedac8 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContinuousConvexCollision.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContinuousConvexCollision.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dConvex2dAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dConvex2dAlgorithm.java
index a259214..f331595 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dConvex2dAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dConvex2dAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dShape.java
index 1de52d0..8fa953d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexCast.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexCast.java
index 2d5a0b6..8f795ee 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexCast.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexCast.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConcaveCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConcaveCollisionAlgorithm.java
index 5d5ff36..8d18825 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConcaveCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConcaveCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConvexAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConvexAlgorithm.java
index 28d3e42..8f68d6b 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConvexAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConvexAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShape.java
index 73c629b..ee6563a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShapeData.java
index efbe068..f7eedca 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalAabbCachingShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalAabbCachingShape.java
index 85751b6..0b5747c 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalAabbCachingShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalAabbCachingShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShape.java
index e7eb49b..edfde14 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShapeData.java
index 820c365..14a8529 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPenetrationDepthSolver.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPenetrationDepthSolver.java
index 174dad9..6a29d2d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPenetrationDepthSolver.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPenetrationDepthSolver.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPlaneCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPlaneCollisionAlgorithm.java
index 13c7047..55a0e99 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPlaneCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPlaneCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPointCloudShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPointCloudShape.java
index 085d472..1465972 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPointCloudShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPointCloudShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPolyhedron.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPolyhedron.java
index 113f269..362cf4e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPolyhedron.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPolyhedron.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexShape.java
index 9f13d31..ebdcfa1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleCallback.java
index f74fa1e..1e51e35 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleMeshShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleMeshShape.java
index 28d9b2f..0699241d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleMeshShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleMeshShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShape.java
index d33b8c1..944cd88 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeData.java
index a5d7027..0d85945 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeX.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeX.java
index ff14378..9f88e30 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeX.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeX.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeZ.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeZ.java
index 597b26a..ead9126 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeZ.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeZ.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvt.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvt.java
index 042addc..1817b3d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvt.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvt.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtAabbMm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtAabbMm.java
index b1f480d..b140eef 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtAabbMm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtAabbMm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtBroadphase.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtBroadphase.java
index 8425f06..175fa3a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtBroadphase.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtBroadphase.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtNode.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtNode.java
index dd450b8..53f3ebb 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtNode.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtNode.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtProxy.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtProxy.java
index adf66ee..3f2023a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtProxy.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtProxy.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConfiguration.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConfiguration.java
index b0da002..9f63751 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConfiguration.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConfiguration.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConstructionInfo.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConstructionInfo.java
index aa41f79..fe110f7 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConstructionInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConstructionInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcher.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcher.java
index c1a3a7a..5b3dca3 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcher.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcher.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcherInfo.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcherInfo.java
index da22046..661b574 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcherInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcherInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btElement.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btElement.java
index eca5b2f..428c7ec 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btElement.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btElement.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyAlgorithm.java
index ec1a314..0a3a264 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyShape.java
index 20d3d81..9fe5bb3 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btFace.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btFace.java
index 21bfbe9..84895d7 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btFace.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btFace.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostObject.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostObject.java
index 97e98f7..e2030cd 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostObject.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostObject.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostPairCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostPairCallback.java
index 7492b1c..6b301a6 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostPairCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostPairCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkConvexCast.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkConvexCast.java
index 4530116..d8e5701 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkConvexCast.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkConvexCast.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaPenetrationDepthSolver.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaPenetrationDepthSolver.java
index 71f063c..faf9adc 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaPenetrationDepthSolver.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaPenetrationDepthSolver.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaSolver2.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaSolver2.java
index 34fbc44..2babd9e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaSolver2.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaSolver2.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkPairDetector.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkPairDetector.java
index a519c05..1519dc6 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkPairDetector.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkPairDetector.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedOverlappingPairCache.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedOverlappingPairCache.java
index 2da1f4d..7022491 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedOverlappingPairCache.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedOverlappingPairCache.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedSimplePairCache.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedSimplePairCache.java
index 154e683..6ecd2ff 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedSimplePairCache.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedSimplePairCache.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHeightfieldTerrainShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHeightfieldTerrainShape.java
index db53994..8b5d668 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHeightfieldTerrainShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHeightfieldTerrainShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
index 52646f9..ed32136 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -8,12 +8,11 @@
 
 package com.badlogic.gdx.physics.bullet.collision;
 
-import com.badlogic.gdx.physics.bullet.BulletBase;
-import com.badlogic.gdx.physics.bullet.linearmath.*;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.g3d.model.MeshPart;
+import com.badlogic.gdx.physics.bullet.BulletBase;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
@@ -128,7 +127,7 @@ public class btIndexedMesh extends BulletBase {
 	 * The specified mesh must be indexed and triangulated and must outlive this btIndexedMesh.
 	 * The buffers for the vertices and indices are shared amonst both. */
 	public void set(final MeshPart meshPart) {
-		if (meshPart.primitiveType != com.badlogic.gdx.graphics.GL10.GL_TRIANGLES)
+		if (meshPart.primitiveType != com.badlogic.gdx.graphics.GL20.GL_TRIANGLES)
 			throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh must be indexed and triangulated");
 		set(meshPart.mesh, meshPart.indexOffset, meshPart.numVertices);
 		this.meshPart = meshPart;
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIntIndexData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIntIndexData.java
index c86532f..8124a6a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIntIndexData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIntIndexData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalEdgeAdjustFlags.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalEdgeAdjustFlags.java
index 589e5f2..175033d 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalEdgeAdjustFlags.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalEdgeAdjustFlags.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalTriangleIndexCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalTriangleIndexCallback.java
index fb1ef19..d213025 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalTriangleIndexCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalTriangleIndexCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldPoint.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldPoint.java
index 098ea40..95a31af 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldPoint.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldPoint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldResult.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldResult.java
index cae7bc8..43b69cd 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldResult.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldResult.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterial.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterial.java
index 42e2e26..21867b1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterial.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterial.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterialProperties.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterialProperties.java
index fcc8352..bbe0314 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterialProperties.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterialProperties.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMeshPartData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMeshPartData.java
index b2202c8..8e5547e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMeshPartData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMeshPartData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiPenetrationDepthSolver.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiPenetrationDepthSolver.java
index d010fb4..f825b9a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiPenetrationDepthSolver.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiPenetrationDepthSolver.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiSumShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiSumShape.java
index ed3918f..eb1a3a1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiSumShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiSumShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSapBroadphase.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSapBroadphase.java
index d813d29..72930e3 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSapBroadphase.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSapBroadphase.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShape.java
index 7afa23c..989a444 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShapeData.java
index 91a5d75..d423a1a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultimaterialTriangleMeshShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultimaterialTriangleMeshShape.java
index 412719e..3c8e273 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultimaterialTriangleMeshShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultimaterialTriangleMeshShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNodeOverlapCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNodeOverlapCallback.java
index 437b6d9..cecfbde 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNodeOverlapCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNodeOverlapCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNullPairCache.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNullPairCache.java
index 931515f..3289119 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNullPairCache.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNullPairCache.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvh.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvh.java
index 862e3fe..b8f940e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvh.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvh.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNode.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNode.java
index 46e0826..cc347cb 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNode.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNode.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeDoubleData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeDoubleData.java
index a1eddaf..9676bfb 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeFloatData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeFloatData.java
index 95a3c96..58a4bc1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapCallback.java
index f52eea2..8a63702 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapFilterCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapFilterCallback.java
index ba0e800..6000ef5 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapFilterCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapFilterCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCache.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCache.java
index 0cad1b9..587e644 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCache.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCache.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCallback.java
index 925af19..677bdd6 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairCachingGhostObject.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairCachingGhostObject.java
index 0a88810..5a1ab6f 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairCachingGhostObject.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairCachingGhostObject.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifold.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifold.java
index b1d6789..c6c4292 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifold.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifold.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifoldArray.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifoldArray.java
index 99914c6..58afbf3 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifoldArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifoldArray.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPointCollector.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPointCollector.java
index 6b19f31..de28b2f 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPointCollector.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPointCollector.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralContactClipping.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralContactClipping.java
index 0a8c544..68c8780 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralContactClipping.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralContactClipping.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexAabbCachingShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexAabbCachingShape.java
index 241ae70..ff13ef8 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexAabbCachingShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexAabbCachingShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexShape.java
index 7979193..cb07ce1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPositionAndRadius.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPositionAndRadius.java
index 5ba276f..f26a4a0 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPositionAndRadius.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPositionAndRadius.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvh.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvh.java
index fe9e1f7..83a4876 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvh.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvh.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhDoubleData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhDoubleData.java
index 03b6281..93185b6 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhFloatData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhFloatData.java
index c7fcb33..453efb9 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNode.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNode.java
index 107e738..5aacddf 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNode.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNode.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNodeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNodeData.java
index 51e56d9..29fb5b1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNodeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNodeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledBvhTriangleMeshShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledBvhTriangleMeshShape.java
index 9ab42a9..e190c32 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledBvhTriangleMeshShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledBvhTriangleMeshShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledTriangleMeshShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledTriangleMeshShapeData.java
index e15d7a7..c90c89c 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledTriangleMeshShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledTriangleMeshShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShapeHull.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShapeHull.java
index caba29d..021e6e3 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShapeHull.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShapeHull.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexData.java
index e070570..737f190 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexTripletData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexTripletData.java
index 2f9f273..04508ac 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexTripletData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexTripletData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphase.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphase.java
index 281e713..4aa698c 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphase.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphase.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphaseProxy.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphaseProxy.java
index 796ec57..a9ca874 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphaseProxy.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphaseProxy.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimplePair.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimplePair.java
index 0a0cbab..10924b0 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimplePair.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimplePair.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimulationIslandManager.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimulationIslandManager.java
index 090a157..7850390 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimulationIslandManager.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimulationIslandManager.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSortedOverlappingPairCache.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSortedOverlappingPairCache.java
index 18ebb2f..41fced1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSortedOverlappingPairCache.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSortedOverlappingPairCache.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereBoxCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereBoxCollisionAlgorithm.java
index 26b0fe7..1f1eb4e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereBoxCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereBoxCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereShape.java
index c5c0b80..a33989e 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereSphereCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereSphereCollisionAlgorithm.java
index dc8572c..498cf33 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereSphereCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereSphereCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereTriangleCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereTriangleCollisionAlgorithm.java
index b74d42c..6d721f7 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereTriangleCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereTriangleCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShape.java
index f543c8e..c2a3d7b 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShapeData.java
index 5f8757a..e874ee1 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterface.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterface.java
index 74df588..40a55d8 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterface.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterface.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterfaceData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterfaceData.java
index 2b10217..af4baf2 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterfaceData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterfaceData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubSimplexClosestResult.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubSimplexClosestResult.java
index 018d849..dc804a9 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubSimplexClosestResult.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubSimplexClosestResult.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubsimplexConvexCast.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubsimplexConvexCast.java
index 139cae7..361d50b 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubsimplexConvexCast.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubsimplexConvexCast.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangle.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangle.java
index b126390..8585cc8 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangle.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangle.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleBuffer.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleBuffer.java
index 045f8c0..4ce69c9 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleBuffer.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleBuffer.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleCallback.java
index d0f2661..fb99559 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleConvexcastCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleConvexcastCallback.java
index 47c73cf..c33bcd8 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleConvexcastCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleConvexcastCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexArray.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexArray.java
index 97ee0a6..d1b7da5 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexArray.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexMaterialArray.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexMaterialArray.java
index c970199..d5cd9d0 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexMaterialArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexMaterialArray.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfo.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfo.java
index b562611..251b341 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoData.java
index 1221ba1..6b91d83 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMap.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMap.java
index f4d7b6f..0d28ce9 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMap.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMap.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMapData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMapData.java
index 9e18dcf..7abec26 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMapData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMapData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMesh.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMesh.java
index 091fb28..b3520f5 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMesh.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMesh.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShape.java
index 7de9d3e..c6f053b 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShapeData.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShapeData.java
index 55fc355..f531554 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShapeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShapeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleRaycastCallback.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleRaycastCallback.java
index 3e85e94..e16340a 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleRaycastCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleRaycastCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShape.java
index 0dd56a3..55d5d0c 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUniformScalingShape.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUniformScalingShape.java
index ad27e1d..c2d0ce5 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUniformScalingShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUniformScalingShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUnionFind.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUnionFind.java
index 05a4144..442062b 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUnionFind.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUnionFind.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUsageBitfield.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUsageBitfield.java
index ee791b1..1ed61ab 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUsageBitfield.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUsageBitfield.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btVoronoiSimplexSolver.java b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btVoronoiSimplexSolver.java
index b1aafb3..3c4733c 100644
--- a/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btVoronoiSimplexSolver.java
+++ b/extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btVoronoiSimplexSolver.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/Dynamics.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/Dynamics.java
index 6252438..54ca0e2 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/Dynamics.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/Dynamics.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsConstants.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsConstants.java
index 0fc6c47..bef95af 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsConstants.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsConstants.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsJNI.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsJNI.java
index 84f760a..feb5b84 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsJNI.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsJNI.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/InternalTickCallback.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/InternalTickCallback.java
index 61a99ee..c57efb3 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/InternalTickCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/InternalTickCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.java
index 51d27c1..86cca3d 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.java
index 00cd95c..ca1531e 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3DoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3DoubleData.java
index 37d1bae..a84bdea 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3DoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3DoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3FloatData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3FloatData.java
index 727b634..30abd42 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3FloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3FloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btSerializer.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btSerializer.java
index d2f9e74..e19226d 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btSerializer.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btSerializer.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.java
index 0fd9b56..9b7075c 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btVehicleRaycaster__btVehicleRaycasterResult.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btVehicleRaycaster__btVehicleRaycasterResult.java
index 3e5f055..e245d5b 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btVehicleRaycaster__btVehicleRaycasterResult.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btVehicleRaycaster__btVehicleRaycasterResult.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btWheelInfo__RaycastInfo.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btWheelInfo__RaycastInfo.java
index b549fad..ed7aa60 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btWheelInfo__RaycastInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btWheelInfo__RaycastInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_p_btDynamicsWorld_float__void.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_p_btDynamicsWorld_float__void.java
index a945041..d095ed7 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_p_btDynamicsWorld_float__void.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_p_btDynamicsWorld_float__void.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_float.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_float.java
index 8001b28..99379c6 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_float.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_float.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_int.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_int.java
index 6816756..a5cc436 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_int.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_int.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btCollisionObject.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btCollisionObject.java
index 38f61a9..47b66f5 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btCollisionObject.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btCollisionObject.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btPersistentManifold.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btPersistentManifold.java
index 8eecec0..9940a92 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btPersistentManifold.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btPersistentManifold.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btTypedConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btTypedConstraint.java
index b93b3a7..8c762e4 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btTypedConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btTypedConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags.java
index d47e8ca..855e274 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btActionInterface.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btActionInterface.java
index 5b371b9..a544325 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btActionInterface.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btActionInterface.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btAngularLimit.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btAngularLimit.java
index 8410a31..2a08335 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btAngularLimit.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btAngularLimit.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btCharacterControllerInterface.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btCharacterControllerInterface.java
index 00cb5a0..618b1ad 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btCharacterControllerInterface.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btCharacterControllerInterface.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraint.java
index 727be83f..f0336cd 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintData.java
index ea5e833..69a0bcc 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintDoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintDoubleData.java
index c9e5ce6..f826375 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistFlags.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistFlags.java
index 18fb00a..505f299 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistFlags.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistFlags.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintInfo2.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintInfo2.java
index 43a3c49..671d06e 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintInfo2.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintInfo2.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintParams.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintParams.java
index 55d6ade..c0ffd73 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintParams.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintParams.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSetting.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSetting.java
index ff55287..dd8b630 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSetting.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSetting.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolver.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolver.java
index b9aa366..7e83fed 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolver.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolver.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolverType.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolverType.java
index d8db4f4..216265f 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolverType.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolverType.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactConstraint.java
index 1d147d2..69f9861 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfo.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfo.java
index 3908841..cb0f8b4 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoData.java
index ca83f0b..e3068d6 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoDoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoDoubleData.java
index 63648e9..798144e 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoFloatData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoFloatData.java
index 785e7c7..533c726 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDefaultVehicleRaycaster.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDefaultVehicleRaycaster.java
index 60bf444..bfa1049 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDefaultVehicleRaycaster.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDefaultVehicleRaycaster.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDiscreteDynamicsWorld.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDiscreteDynamicsWorld.java
index 35243b5..20389a9 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDiscreteDynamicsWorld.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDiscreteDynamicsWorld.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorld.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorld.java
index aae3313..da72f80 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorld.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorld.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldDoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldDoubleData.java
index 739f676..504104d 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldFloatData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldFloatData.java
index 627d4fd..159dc96 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldType.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldType.java
index 85f3579..c8df616 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldType.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldType.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraint.java
index 8fddda0..69d4aba 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintData.java
index c74f7e8..39c4a36 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintDoubleData2.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintDoubleData2.java
index 756c12a..f067260 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintDoubleData2.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintDoubleData2.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraint.java
index 53b831a..bf547d7 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintData.java
index 6d2eb71..db12e15 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintDoubleData2.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintDoubleData2.java
index 5ddfd13..20734bc 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintDoubleData2.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintDoubleData2.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHinge2Constraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHinge2Constraint.java
index 9377f56..753c627 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHinge2Constraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHinge2Constraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraint.java
index 4ce0dce..a9189a9 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData.java
index 4506894..82421de 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData2.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData2.java
index a9adef3..e779b86 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData2.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData2.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintFloatData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintFloatData.java
index 74a77cf..645fdf7 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeFlags.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeFlags.java
index bc2577c..d830a37 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeFlags.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeFlags.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJacobianEntry.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJacobianEntry.java
index caa73f6..914522b 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJacobianEntry.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJacobianEntry.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJointFeedback.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJointFeedback.java
index 558e57c..62ef379 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJointFeedback.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJointFeedback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btKinematicCharacterController.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btKinematicCharacterController.java
index feb27a0..daf2f0d 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btKinematicCharacterController.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btKinematicCharacterController.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraint.java
index 8d2d9ba..b7922d9 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData.java
index 34c062e..df892b7 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData2.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData2.java
index 0df4de6..943fd46 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData2.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData2.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintFloatData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintFloatData.java
index 37bc867..bfd40a9 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointFlags.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointFlags.java
index caf7891..9cebe37 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointFlags.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointFlags.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRaycastVehicle.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRaycastVehicle.java
index cdff5e5..1e2a777 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRaycastVehicle.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRaycastVehicle.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBody.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBody.java
index 3318beb..892b15d 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBody.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBody.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyConstructionInfo.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyConstructionInfo.java
index ce1186d..92b83b0 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyConstructionInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyConstructionInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyDoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyDoubleData.java
index 3f7d118..3950bb8 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyFlags.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyFlags.java
index baa0068..c48a5f6 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyFlags.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyFlags.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyFloatData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyFloatData.java
index eeee785..d19206d 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRigidBodyFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRotationalLimitMotor.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRotationalLimitMotor.java
index 499c662..cb720cc 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRotationalLimitMotor.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRotationalLimitMotor.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSequentialImpulseConstraintSolver.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSequentialImpulseConstraintSolver.java
index 7bdd6b6..f9b8fad 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSequentialImpulseConstraintSolver.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSequentialImpulseConstraintSolver.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSimpleDynamicsWorld.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSimpleDynamicsWorld.java
index 6435200..7f433be 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSimpleDynamicsWorld.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSimpleDynamicsWorld.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraint.java
index 2bb957d..4aa4133 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraintData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraintData.java
index 3cb0ddc..f37994b 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraintData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraintData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraintDoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraintDoubleData.java
index 0d8ef1a..246261b 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraintDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderConstraintDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderFlags.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderFlags.java
index 59c47f7..2197734 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderFlags.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSliderFlags.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolve2LinearConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolve2LinearConstraint.java
index 00f29b3..643420c 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolve2LinearConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolve2LinearConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverBody.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverBody.java
index bafeddd..e0563c2 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverBody.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverBody.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverConstraint.java
index 270fbb8..4bbbccf 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverMode.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverMode.java
index a0fac52..241421b 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverMode.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverMode.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTranslationalLimitMotor.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTranslationalLimitMotor.java
index 28acdef..aea80ff 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTranslationalLimitMotor.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTranslationalLimitMotor.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraint.java
index e5959ac..ae1db04 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintData.java
index dfe3e4e..68eb632 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintDoubleData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintDoubleData.java
index 1e1f505..14bba15 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintFloatData.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintFloatData.java
index d12da1a..fddac11 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintType.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintType.java
index 40baa92..4782cbc 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintType.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btTypedConstraintType.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btUniversalConstraint.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btUniversalConstraint.java
index 50cd07e..d4ae74f 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btUniversalConstraint.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btUniversalConstraint.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btVehicleRaycaster.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btVehicleRaycaster.java
index 5fc51ce..16877b5 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btVehicleRaycaster.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btVehicleRaycaster.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btVehicleTuning.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btVehicleTuning.java
index 9748746..5504a64 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btVehicleTuning.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btVehicleTuning.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btWheelInfo.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btWheelInfo.java
index ab714f2..004d668 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btWheelInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btWheelInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btWheelInfoConstructionInfo.java b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btWheelInfoConstructionInfo.java
index da0616f..dc2216c 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btWheelInfoConstructionInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btWheelInfoConstructionInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/dynamics_wrap.cpp b/extensions/gdx-bullet/jni/swig-src/dynamics/dynamics_wrap.cpp
index 00f2897..ca532c3 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/dynamics_wrap.cpp
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/dynamics_wrap.cpp
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #define SWIGJAVA
@@ -66,28 +66,28 @@ template <typename T> T SwigValueInit() {
 #ifndef SWIGUNUSED
 # if defined(__GNUC__)
 #   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
-#     define SWIGUNUSED __attribute__ ((__unused__))
+#     define SWIGUNUSED __attribute__ ((__unused__)) 
 #   else
 #     define SWIGUNUSED
 #   endif
 # elif defined(__ICC)
-#   define SWIGUNUSED __attribute__ ((__unused__))
+#   define SWIGUNUSED __attribute__ ((__unused__)) 
 # else
-#   define SWIGUNUSED
+#   define SWIGUNUSED 
 # endif
 #endif
 
 #ifndef SWIG_MSC_UNSUPPRESS_4505
 # if defined(_MSC_VER)
 #   pragma warning(disable : 4505) /* unreferenced local function has been removed */
-# endif
+# endif 
 #endif
 
 #ifndef SWIGUNUSEDPARM
 # ifdef __cplusplus
 #   define SWIGUNUSEDPARM(p)
 # else
-#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
+#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
 # endif
 #endif
 
@@ -130,7 +130,7 @@ template <typename T> T SwigValueInit() {
 #   define SWIGSTDCALL __stdcall
 # else
 #   define SWIGSTDCALL
-# endif
+# endif 
 #endif
 
 /* Deal with Microsoft's attempt at deprecating C standard runtime functions */
diff --git a/extensions/gdx-bullet/jni/swig-src/dynamics/dynamics_wrap.h b/extensions/gdx-bullet/jni/swig-src/dynamics/dynamics_wrap.h
index 27792d7..4dc39c0 100644
--- a/extensions/gdx-bullet/jni/swig-src/dynamics/dynamics_wrap.h
+++ b/extensions/gdx-bullet/jni/swig-src/dynamics/dynamics_wrap.h
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #ifndef SWIG_Dynamics_WRAP_H_
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/Extras.java b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/Extras.java
index b7db4e2..0f5c396 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/Extras.java
+++ b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/Extras.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/ExtrasJNI.java b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/ExtrasJNI.java
index 8002b8c..265a2a9 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/ExtrasJNI.java
+++ b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/ExtrasJNI.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/SWIGTYPE_p_bParse__btBulletFile.java b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/SWIGTYPE_p_bParse__btBulletFile.java
index 142b693..ba25669 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/SWIGTYPE_p_bParse__btBulletFile.java
+++ b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/SWIGTYPE_p_bParse__btBulletFile.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/SWIGTYPE_p_btGImpactMeshShape.java b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/SWIGTYPE_p_btGImpactMeshShape.java
index 520c037..29b1aac 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/SWIGTYPE_p_btGImpactMeshShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/SWIGTYPE_p_btGImpactMeshShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btBulletWorldImporter.java b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btBulletWorldImporter.java
index ce5244b..3b20475 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btBulletWorldImporter.java
+++ b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btBulletWorldImporter.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btStringArray.java b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btStringArray.java
index f372de9..a72b461 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btStringArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btStringArray.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btWorldImporter.java b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btWorldImporter.java
index de14c98..139b197 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btWorldImporter.java
+++ b/extensions/gdx-bullet/jni/swig-src/extras/com/badlogic/gdx/physics/bullet/extras/btWorldImporter.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/extras_wrap.cpp b/extensions/gdx-bullet/jni/swig-src/extras/extras_wrap.cpp
index 83e8e6d..377dda3 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/extras_wrap.cpp
+++ b/extensions/gdx-bullet/jni/swig-src/extras/extras_wrap.cpp
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #define SWIGJAVA
@@ -66,28 +66,28 @@ template <typename T> T SwigValueInit() {
 #ifndef SWIGUNUSED
 # if defined(__GNUC__)
 #   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
-#     define SWIGUNUSED __attribute__ ((__unused__))
+#     define SWIGUNUSED __attribute__ ((__unused__)) 
 #   else
 #     define SWIGUNUSED
 #   endif
 # elif defined(__ICC)
-#   define SWIGUNUSED __attribute__ ((__unused__))
+#   define SWIGUNUSED __attribute__ ((__unused__)) 
 # else
-#   define SWIGUNUSED
+#   define SWIGUNUSED 
 # endif
 #endif
 
 #ifndef SWIG_MSC_UNSUPPRESS_4505
 # if defined(_MSC_VER)
 #   pragma warning(disable : 4505) /* unreferenced local function has been removed */
-# endif
+# endif 
 #endif
 
 #ifndef SWIGUNUSEDPARM
 # ifdef __cplusplus
 #   define SWIGUNUSEDPARM(p)
 # else
-#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
+#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
 # endif
 #endif
 
@@ -130,7 +130,7 @@ template <typename T> T SwigValueInit() {
 #   define SWIGSTDCALL __stdcall
 # else
 #   define SWIGSTDCALL
-# endif
+# endif 
 #endif
 
 /* Deal with Microsoft's attempt at deprecating C standard runtime functions */
diff --git a/extensions/gdx-bullet/jni/swig-src/extras/extras_wrap.h b/extensions/gdx-bullet/jni/swig-src/extras/extras_wrap.h
index 2b4c22f..6295330 100644
--- a/extensions/gdx-bullet/jni/swig-src/extras/extras_wrap.h
+++ b/extensions/gdx-bullet/jni/swig-src/extras/extras_wrap.h
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #ifndef SWIG_Extras_WRAP_H_
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/ConvexH.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/ConvexH.java
index 8af4a0a..a3cee31 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/ConvexH.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/ConvexH.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/GrahamVector3.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/GrahamVector3.java
index 73b0119..22a3dbd 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/GrahamVector3.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/GrahamVector3.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullDesc.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullDesc.java
index 6707bfc..19049b6 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullDesc.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullDesc.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullError.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullError.java
index 0c37fe1..b01e05b 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullError.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullError.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullFlag.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullFlag.java
index ccfc8b1..425a299 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullFlag.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullFlag.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullLibrary.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullLibrary.java
index 5d216a5..c6ee1e7 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullLibrary.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullLibrary.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullResult.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullResult.java
index ae32ffc..e4e023a 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullResult.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/HullResult.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMath.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMath.java
index 5d4e0e9..03ad0cc 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMath.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMath.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMathConstants.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMathConstants.java
index 3cc0b71..ddd4d54 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMathConstants.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMathConstants.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMathJNI.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMathJNI.java
index 2cae924..4ea610c 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMathJNI.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/LinearMathJNI.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/PHullResult.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/PHullResult.java
index 6c52191..f344fb6 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/PHullResult.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/PHullResult.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t.java
index 8f68a9b..e743db2 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t.java
index 495f5b3..e11ed5c 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t.java
index c65eee7..7c147f6 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t.java
index 84f558d..2a69691 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
index 627300d..1ff380d 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t.java
index 09cdcc4..0798003 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btMatrix3x3DoubleData.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btMatrix3x3DoubleData.java
index b4fb536..049bf74 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btMatrix3x3DoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btMatrix3x3DoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btMatrix3x3FloatData.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btMatrix3x3FloatData.java
index dbad49c..bf2f688 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btMatrix3x3FloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_btMatrix3x3FloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_p_void__void.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_p_void__void.java
index ccfcb5b..3127882 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_p_void__void.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_p_void__void.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_size_t__p_void.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_size_t__p_void.java
index a829353..f2ccf40 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_size_t__p_void.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_size_t__p_void.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_size_t_int__p_void.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_size_t_int__p_void.java
index 3e2780d..94f6dfd 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_size_t_int__p_void.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_f_size_t_int__p_void.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_float.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_float.java
index 28f20a9..3dcbfb5 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_float.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/SWIGTYPE_p_float.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btAngleCompareFunc.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btAngleCompareFunc.java
index 82da354..afc6cd6 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btAngleCompareFunc.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btAngleCompareFunc.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btBlock.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btBlock.java
index 18e90e2..7aa57f5 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btBlock.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btBlock.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btConvexHullComputer.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btConvexHullComputer.java
index a74b84e..fe30e11 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btConvexHullComputer.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btConvexHullComputer.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btConvexSeparatingDistanceUtil.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btConvexSeparatingDistanceUtil.java
index d993fbc..c8112c8 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btConvexSeparatingDistanceUtil.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btConvexSeparatingDistanceUtil.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btDefaultMotionState.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btDefaultMotionState.java
index d407c31..10fd603 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btDefaultMotionState.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btDefaultMotionState.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGEN_Link.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGEN_Link.java
index 0a8bca7..78cc818 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGEN_Link.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGEN_Link.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGEN_List.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGEN_List.java
index 54ff538..7ac969e 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGEN_List.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGEN_List.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGeometryUtil.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGeometryUtil.java
index 6409a0b..76e09d4 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGeometryUtil.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btGeometryUtil.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashInt.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashInt.java
index 374fd83..6f28cf8 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashInt.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashInt.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashPtr.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashPtr.java
index 2af234d..b491443 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashPtr.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashPtr.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashString.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashString.java
index 92019d7..c81cd8e 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashString.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btHashString.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btIDebugDraw.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btIDebugDraw.java
index dbdd912..4e55b59 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btIDebugDraw.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btIDebugDraw.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btMotionState.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btMotionState.java
index e2e817c..0a45fec 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btMotionState.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btMotionState.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btPlane.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btPlane.java
index f7e3b36..9a3c72b 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btPlane.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btPlane.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btPoolAllocator.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btPoolAllocator.java
index 7404076..2989bad 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btPoolAllocator.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btPoolAllocator.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btQuaternion.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btQuaternion.java
index 717fd3f..b4d3c22 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btQuaternion.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btQuaternion.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btScalarArray.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btScalarArray.java
index befc4a5..d7305ad 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btScalarArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btScalarArray.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btStackAlloc.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btStackAlloc.java
index 44c5d7b..f44dd60 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btStackAlloc.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btStackAlloc.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransform.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransform.java
index 80cc1a2..2259144 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransform.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransform.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformDoubleData.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformDoubleData.java
index 7093a77..ae5fb6e 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformDoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformDoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformFloatData.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformFloatData.java
index 1838247..6282bd2 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformUtil.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformUtil.java
index 2d0fe56..3dcaeae 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformUtil.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTransformUtil.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTypedObject.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTypedObject.java
index 33f04ca..a1c13e9 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTypedObject.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btTypedObject.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3.java
index 604af15..94b5d04 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3Array.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3Array.java
index 5e6d801..6ab16d4 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3Array.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3Array.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3DoubleData.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3DoubleData.java
index 8b50d4d..f3ff52f 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3DoubleData.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3DoubleData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3FloatData.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3FloatData.java
index 005aab7..c5ba2d4 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3FloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector3FloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector4.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector4.java
index 1a079b8..0d676e7 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector4.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/btVector4.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/int4.java b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/int4.java
index 71ee8cd..b826eff 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/int4.java
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/com/badlogic/gdx/physics/bullet/linearmath/int4.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/linearmath_wrap.cpp b/extensions/gdx-bullet/jni/swig-src/linearmath/linearmath_wrap.cpp
index 39928cf..e2cb90e 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/linearmath_wrap.cpp
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/linearmath_wrap.cpp
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #define SWIGJAVA
@@ -66,28 +66,28 @@ template <typename T> T SwigValueInit() {
 #ifndef SWIGUNUSED
 # if defined(__GNUC__)
 #   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
-#     define SWIGUNUSED __attribute__ ((__unused__))
+#     define SWIGUNUSED __attribute__ ((__unused__)) 
 #   else
 #     define SWIGUNUSED
 #   endif
 # elif defined(__ICC)
-#   define SWIGUNUSED __attribute__ ((__unused__))
+#   define SWIGUNUSED __attribute__ ((__unused__)) 
 # else
-#   define SWIGUNUSED
+#   define SWIGUNUSED 
 # endif
 #endif
 
 #ifndef SWIG_MSC_UNSUPPRESS_4505
 # if defined(_MSC_VER)
 #   pragma warning(disable : 4505) /* unreferenced local function has been removed */
-# endif
+# endif 
 #endif
 
 #ifndef SWIGUNUSEDPARM
 # ifdef __cplusplus
 #   define SWIGUNUSEDPARM(p)
 # else
-#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
+#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
 # endif
 #endif
 
@@ -130,7 +130,7 @@ template <typename T> T SwigValueInit() {
 #   define SWIGSTDCALL __stdcall
 # else
 #   define SWIGSTDCALL
-# endif
+# endif 
 #endif
 
 /* Deal with Microsoft's attempt at deprecating C standard runtime functions */
diff --git a/extensions/gdx-bullet/jni/swig-src/linearmath/linearmath_wrap.h b/extensions/gdx-bullet/jni/swig-src/linearmath/linearmath_wrap.h
index 6ee7c17..085b6d9 100644
--- a/extensions/gdx-bullet/jni/swig-src/linearmath/linearmath_wrap.h
+++ b/extensions/gdx-bullet/jni/swig-src/linearmath/linearmath_wrap.h
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #ifndef SWIG_LinearMath_WRAP_H_
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Element.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Element.java
index 9827d52..e61ab94 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Element.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Element.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Face.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Face.java
index 8064c7b..0025ead 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Face.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Face.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Feature.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Feature.java
index 8abdb05..1d8de94 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Feature.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Feature.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Link.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Link.java
index 0cf7ae3..3e3efa4 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Link.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Link.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Material.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Material.java
index cad1a10..e6721b7 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Material.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Material.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Node.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Node.java
index 34ff0c9..e2a1cdc 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Node.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Node.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Face_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Face_t.java
index 609f55d..638656d 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Face_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Face_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Link_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Link_t.java
index b3871d6..47a989b 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Link_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Link_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Material_p_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Material_p_t.java
index 373e4c7..754c7b11 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Material_p_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Material_p_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Node_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Node_t.java
index c7b204f..a1c25c1 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Node_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_Node_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_bool_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_bool_t.java
index 06b2bee..f996413 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_bool_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_bool_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t.java
index f515c76..dfb078d 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t.java
index a78b813..bed58f4 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t.java
index 7b4dc31..b7bff2a 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t.java
index e6b1576..10d060c 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t.java
index ff6ec1e..edb7222 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t.java
index f93ec73..8aa836e 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t.java
index f316004..5e0f6e7 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.java
index e4212c2..a506201 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSparseSdfT_3_t__Cell_p_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSparseSdfT_3_t__Cell_p_t.java
index c7a318c..ef842fb 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSparseSdfT_3_t__Cell_p_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_btSparseSdfT_3_t__Cell_p_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
index 22ab300..25cd4a2 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btMatrix3x3.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btMatrix3x3.java
index 77f6df0..c63b4ae 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btMatrix3x3.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btMatrix3x3.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btMatrix3x3FloatData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btMatrix3x3FloatData.java
index c7f8e81..8c1b8cc 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btMatrix3x3FloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btMatrix3x3FloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__AJoint__Specs.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__AJoint__Specs.java
index 7d29ca9..f7d019a 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__AJoint__Specs.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__AJoint__Specs.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Body.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Body.java
index acad919..a3c8cbc 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Body.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Body.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Cluster.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Cluster.java
index ba51f5c..20ffe03 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Cluster.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Cluster.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Config.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Config.java
index 04d29b7..c0fa5df 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Config.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Config.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__ImplicitFn.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__ImplicitFn.java
index a8a0515..a66b209 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__ImplicitFn.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__ImplicitFn.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Impulse.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Impulse.java
index c7288d9..87d04b8 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Impulse.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Impulse.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__LJoint__Specs.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__LJoint__Specs.java
index b883644..cd2e501 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__LJoint__Specs.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__LJoint__Specs.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Pose.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Pose.java
index 5226444..7d8bc0e 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Pose.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__Pose.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__SolverState.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__SolverState.java
index 26c997e..6f3e2a8 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__SolverState.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__SolverState.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eFeature___.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eFeature___.java
index abe1e8a..d3b34af 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eFeature___.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eFeature___.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__ePSolver___.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__ePSolver___.java
index a54a4bc..7172aa0 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__ePSolver___.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__ePSolver___.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eSolverPresets___.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eSolverPresets___.java
index e553435..1a35de4 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eSolverPresets___.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eSolverPresets___.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eVSolver___.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eVSolver___.java
index cc1471a..d635a65 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eVSolver___.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__eVSolver___.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__sRayCast.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__sRayCast.java
index d916421..68dab8d 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__sRayCast.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSoftBody__sRayCast.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSparseSdfT_3_t__Cell.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSparseSdfT_3_t__Cell.java
index b6be874..e90cf17 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSparseSdfT_3_t__Cell.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSparseSdfT_3_t__Cell.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSparseSdfT_3_t__IntFrac.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSparseSdfT_3_t__IntFrac.java
index 0485e58..1414dbf 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSparseSdfT_3_t__IntFrac.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_btSparseSdfT_3_t__IntFrac.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_f_p_btSoftBody_float__void.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_f_p_btSoftBody_float__void.java
index 71c91e2..c2d8215 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_f_p_btSoftBody_float__void.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_f_p_btSoftBody_float__void.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_f_p_btSoftBody_float_float__void.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_f_p_btSoftBody_float_float__void.java
index d5660a8..746a0f3 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_f_p_btSoftBody_float_float__void.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_f_p_btSoftBody_float_float__void.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_float.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_float.java
index c2919ee..c24a719 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_float.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_float.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_int.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_int.java
index 94018f2..ca0677f 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_int.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_int.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_Node.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_Node.java
index 3c3590b..494f11e 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_Node.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_Node.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_SoftBodyMaterialData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_SoftBodyMaterialData.java
index a489889..62108ac 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_SoftBodyMaterialData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_SoftBodyMaterialData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_btSoftBody.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_btSoftBody.java
index a4cd972..c781502 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_btSoftBody.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SWIGTYPE_p_p_btSoftBody.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyClusterData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyClusterData.java
index defb57e..e988d97 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyClusterData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyClusterData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyConfigData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyConfigData.java
index 8583efe..1b4aebe 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyConfigData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyConfigData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyFaceData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyFaceData.java
index b37d8b2..599c518 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyFaceData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyFaceData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyLinkData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyLinkData.java
index 74eec77..c1f1881 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyLinkData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyLinkData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyMaterialData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyMaterialData.java
index 38a330e..5ed1c5f 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyMaterialData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyMaterialData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyNodeData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyNodeData.java
index 202147d..870317c 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyNodeData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyNodeData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyPoseData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyPoseData.java
index 550d4b6..00158a1 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyPoseData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyPoseData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyTetraData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyTetraData.java
index af6820b..19d1a56 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyTetraData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftBodyTetraData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftRigidAnchorData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftRigidAnchorData.java
index 3bfc6df..400a324 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftRigidAnchorData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftRigidAnchorData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Softbody.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Softbody.java
index 1b696f4..0616cac 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Softbody.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/Softbody.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftbodyConstants.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftbodyConstants.java
index 423f555..754106f 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftbodyConstants.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftbodyConstants.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftbodyJNI.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftbodyJNI.java
index e142b53..6f23f3b 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftbodyJNI.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/SoftbodyJNI.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btCPUVertexBufferDescriptor.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btCPUVertexBufferDescriptor.java
index e73513c..c0ae412 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btCPUVertexBufferDescriptor.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btCPUVertexBufferDescriptor.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btDefaultSoftBodySolver.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btDefaultSoftBodySolver.java
index 85adb77..c3cacb1 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btDefaultSoftBodySolver.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btDefaultSoftBodySolver.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btEigen.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btEigen.java
index c998a61..6314dd9 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btEigen.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btEigen.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBody.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBody.java
index 36073cc..3c2ec89 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBody.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBody.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyCollisionShape.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyCollisionShape.java
index 1c34d62..5a05f20 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyCollisionShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyCollisionShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyConcaveCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyConcaveCollisionAlgorithm.java
index 62915f9..66e7383 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyConcaveCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyConcaveCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyFloatData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyFloatData.java
index 9aebda0..c215aad 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyFloatData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyFloatData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyHelpers.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyHelpers.java
index 5f953e9..01911ac 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyHelpers.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyHelpers.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyJointData.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyJointData.java
index 2a9b2e9..b958759 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyJointData.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyJointData.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyRigidBodyCollisionConfiguration.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyRigidBodyCollisionConfiguration.java
index 320a3c2..7a0b083 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyRigidBodyCollisionConfiguration.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyRigidBodyCollisionConfiguration.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodySolver.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodySolver.java
index 7fc53fb..23852f3 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodySolver.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodySolver.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodySolverOutput.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodySolverOutput.java
index 2637edf..b19b387 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodySolverOutput.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodySolverOutput.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyTriangleCallback.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyTriangleCallback.java
index 00c7559..dd8742b 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyTriangleCallback.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyTriangleCallback.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyWorldInfo.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyWorldInfo.java
index b085161..640edcc 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyWorldInfo.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftBodyWorldInfo.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftClusterCollisionShape.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftClusterCollisionShape.java
index 5107c8f..c5c7f06 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftClusterCollisionShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftClusterCollisionShape.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftColliders.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftColliders.java
index 7cae175..fea05c5 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftColliders.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftColliders.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftJointBodyType.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftJointBodyType.java
index dedabf0..b234b73 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftJointBodyType.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftJointBodyType.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftRigidCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftRigidCollisionAlgorithm.java
index 1fdf3a3..ef5ad1e 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftRigidCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftRigidCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftRigidDynamicsWorld.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftRigidDynamicsWorld.java
index ab42543..063672e 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftRigidDynamicsWorld.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftRigidDynamicsWorld.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftSoftCollisionAlgorithm.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftSoftCollisionAlgorithm.java
index 13a4d37..3415237 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftSoftCollisionAlgorithm.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftSoftCollisionAlgorithm.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSparseSdf3.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSparseSdf3.java
index e895563..48eaada 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSparseSdf3.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSparseSdf3.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btTriIndex.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btTriIndex.java
index 2a76865..2b1ec6d 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btTriIndex.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btTriIndex.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btVertexBufferDescriptor.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btVertexBufferDescriptor.java
index 8f09621..4d2db7f 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btVertexBufferDescriptor.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btVertexBufferDescriptor.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/fDrawFlags.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/fDrawFlags.java
index 8bdee68..b5621a0 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/fDrawFlags.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/fDrawFlags.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/sCti.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/sCti.java
index 170c69c..2466844 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/sCti.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/sCti.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/sMedium.java b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/sMedium.java
index 83dd840..4a78de5 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/sMedium.java
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/sMedium.java
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
+ * Version 2.0.10
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/softbody_wrap.cpp b/extensions/gdx-bullet/jni/swig-src/softbody/softbody_wrap.cpp
index 7853503..5bee1f3 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/softbody_wrap.cpp
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/softbody_wrap.cpp
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #define SWIGJAVA
@@ -66,28 +66,28 @@ template <typename T> T SwigValueInit() {
 #ifndef SWIGUNUSED
 # if defined(__GNUC__)
 #   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
-#     define SWIGUNUSED __attribute__ ((__unused__))
+#     define SWIGUNUSED __attribute__ ((__unused__)) 
 #   else
 #     define SWIGUNUSED
 #   endif
 # elif defined(__ICC)
-#   define SWIGUNUSED __attribute__ ((__unused__))
+#   define SWIGUNUSED __attribute__ ((__unused__)) 
 # else
-#   define SWIGUNUSED
+#   define SWIGUNUSED 
 # endif
 #endif
 
 #ifndef SWIG_MSC_UNSUPPRESS_4505
 # if defined(_MSC_VER)
 #   pragma warning(disable : 4505) /* unreferenced local function has been removed */
-# endif
+# endif 
 #endif
 
 #ifndef SWIGUNUSEDPARM
 # ifdef __cplusplus
 #   define SWIGUNUSEDPARM(p)
 # else
-#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
+#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
 # endif
 #endif
 
@@ -130,7 +130,7 @@ template <typename T> T SwigValueInit() {
 #   define SWIGSTDCALL __stdcall
 # else
 #   define SWIGSTDCALL
-# endif
+# endif 
 #endif
 
 /* Deal with Microsoft's attempt at deprecating C standard runtime functions */
diff --git a/extensions/gdx-bullet/jni/swig-src/softbody/softbody_wrap.h b/extensions/gdx-bullet/jni/swig-src/softbody/softbody_wrap.h
index 689061d..1509caa 100644
--- a/extensions/gdx-bullet/jni/swig-src/softbody/softbody_wrap.h
+++ b/extensions/gdx-bullet/jni/swig-src/softbody/softbody_wrap.h
@@ -1,11 +1,11 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.12
- *
- * This file is not intended to be easily readable and contains a number of
+ * Version 2.0.10
+ * 
+ * This file is not intended to be easily readable and contains a number of 
  * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG
- * interface file instead.
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
  * ----------------------------------------------------------------------------- */
 
 #ifndef SWIG_Softbody_WRAP_H_
diff --git a/extensions/gdx-bullet/jni/vs/gdxBullet/collision/collision.vcxproj b/extensions/gdx-bullet/jni/vs/gdxBullet/collision/collision.vcxproj
index 0b1c25e..7c8363c 100644
--- a/extensions/gdx-bullet/jni/vs/gdxBullet/collision/collision.vcxproj
+++ b/extensions/gdx-bullet/jni/vs/gdxBullet/collision/collision.vcxproj
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="Debug|Win32">
       <Configuration>Debug</Configuration>
@@ -27,27 +27,23 @@
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff --git a/extensions/gdx-bullet/jni/vs/gdxBullet/dynamics/dynamics.vcxproj b/extensions/gdx-bullet/jni/vs/gdxBullet/dynamics/dynamics.vcxproj
index 15da6d3..82f7187 100644
--- a/extensions/gdx-bullet/jni/vs/gdxBullet/dynamics/dynamics.vcxproj
+++ b/extensions/gdx-bullet/jni/vs/gdxBullet/dynamics/dynamics.vcxproj
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="Debug|Win32">
       <Configuration>Debug</Configuration>
@@ -27,27 +27,23 @@
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff --git a/extensions/gdx-bullet/jni/vs/gdxBullet/extras/extras.vcxproj b/extensions/gdx-bullet/jni/vs/gdxBullet/extras/extras.vcxproj
index 2e2bb8f..23e599b 100644
--- a/extensions/gdx-bullet/jni/vs/gdxBullet/extras/extras.vcxproj
+++ b/extensions/gdx-bullet/jni/vs/gdxBullet/extras/extras.vcxproj
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="Debug|Win32">
       <Configuration>Debug</Configuration>
@@ -27,27 +27,23 @@
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff --git a/extensions/gdx-bullet/jni/vs/gdxBullet/gdxBullet/gdxBullet.vcxproj b/extensions/gdx-bullet/jni/vs/gdxBullet/gdxBullet/gdxBullet.vcxproj
index 05522eb..475e7fa 100644
--- a/extensions/gdx-bullet/jni/vs/gdxBullet/gdxBullet/gdxBullet.vcxproj
+++ b/extensions/gdx-bullet/jni/vs/gdxBullet/gdxBullet/gdxBullet.vcxproj
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="Debug|Win32">
       <Configuration>Debug</Configuration>
@@ -187,27 +187,23 @@
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff --git a/extensions/gdx-bullet/jni/vs/gdxBullet/linearmath/linearmath.vcxproj b/extensions/gdx-bullet/jni/vs/gdxBullet/linearmath/linearmath.vcxproj
index 9a03631..fc494a4 100644
--- a/extensions/gdx-bullet/jni/vs/gdxBullet/linearmath/linearmath.vcxproj
+++ b/extensions/gdx-bullet/jni/vs/gdxBullet/linearmath/linearmath.vcxproj
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="Debug|Win32">
       <Configuration>Debug</Configuration>
@@ -27,27 +27,23 @@
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff --git a/extensions/gdx-bullet/jni/vs/gdxBullet/softbody/softbody.vcxproj b/extensions/gdx-bullet/jni/vs/gdxBullet/softbody/softbody.vcxproj
index 38ad2e1..2223214 100644
--- a/extensions/gdx-bullet/jni/vs/gdxBullet/softbody/softbody.vcxproj
+++ b/extensions/gdx-bullet/jni/vs/gdxBullet/softbody/softbody.vcxproj
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="Debug|Win32">
       <Configuration>Debug</Configuration>
@@ -27,27 +27,23 @@
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>MultiByte</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllerManager.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllerManager.java
index dc746b3..565b6f9 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllerManager.java
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllerManager.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers.desktop;
 
 import com.badlogic.gdx.controllers.Controller;
@@ -44,7 +45,7 @@ public class DesktopControllerManager implements ControllerManager {
 	}
 
 	@Override
-	public void clearListeners() {
+	public void clearListeners () {
 		listeners.clear();
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
index 9a1888e..4dd8887 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers.desktop;
 
 import com.badlogic.gdx.jnigen.AntScriptGenerator;
@@ -26,29 +27,16 @@ public class DesktopControllersBuild {
 	public static void main (String[] args) throws Exception {
 		new NativeCodeGenerator().generate("src/", "bin/", "jni/");
 		BuildConfig buildConfig = new BuildConfig("gdx-controllers-desktop");
-		
-		String[] windowsSrc = {"*.cpp",
-			"ois-v1-4svn/src/*.cpp",
-			"ois-v1-4svn/src/win32/*.cpp"
-		};
-		
-		String[] linuxSrc = { "*.cpp",
-			"ois-v1-4svn/src/*.cpp",
-			"ois-v1-4svn/src/linux/*.cpp"
-		};
-		
-		String[] mac64Src = { "*.cpp",
-			"ois-v1-4svn/src/*.cpp",
-			"ois-v1-4svn/src/mac/*.mm",
-			"ois-v1-4svn/src/mac/MacHIDManager.cpp",
-			"ois-v1-4svn/src/mac/MacJoyStick.cpp",
-		};
-		
-		String[] includes = new String[] {
-			"ois-v1-4svn/includes",
-			"dinput/"
-		};
-		
+
+		String[] windowsSrc = {"*.cpp", "ois-v1-4svn/src/*.cpp", "ois-v1-4svn/src/win32/*.cpp"};
+
+		String[] linuxSrc = {"*.cpp", "ois-v1-4svn/src/*.cpp", "ois-v1-4svn/src/linux/*.cpp"};
+
+		String[] mac64Src = {"*.cpp", "ois-v1-4svn/src/*.cpp", "ois-v1-4svn/src/mac/*.mm", "ois-v1-4svn/src/mac/MacHIDManager.cpp",
+			"ois-v1-4svn/src/mac/MacJoyStick.cpp",};
+
+		String[] includes = new String[] {"ois-v1-4svn/includes", "dinput/"};
+
 		BuildTarget win32home = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
 		win32home.buildFileName = "build-windows32home.xml";
 		win32home.excludeFromMasterBuildFile = true;
@@ -58,17 +46,17 @@ public class DesktopControllersBuild {
 		win32home.headerDirs = includes;
 		win32home.cIncludes = new String[0];
 		win32home.libraries = "-ldinput8 -ldxguid";
-		
+
 		BuildTarget win32 = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
 		win32.cppIncludes = windowsSrc;
 		win32.headerDirs = includes;
 		win32.libraries = "-ldinput8 -ldxguid";
-		
+
 		BuildTarget win64 = BuildTarget.newDefaultTarget(TargetOs.Windows, true);
 		win64.cppIncludes = windowsSrc;
 		win64.headerDirs = includes;
 		win64.libraries = "-ldinput8 -ldxguid";
-		
+
 		BuildTarget lin32 = BuildTarget.newDefaultTarget(TargetOs.Linux, false);
 		lin32.cppIncludes = linuxSrc;
 		lin32.headerDirs = includes;
@@ -78,17 +66,17 @@ public class DesktopControllersBuild {
 		lin64.cppIncludes = linuxSrc;
 		lin64.headerDirs = includes;
 		lin64.libraries = "-lX11";
-		
+
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
 		mac.cppIncludes = mac64Src;
 		mac.headerDirs = includes;
 		mac.cppFlags += " -x objective-c++";
 		mac.libraries = "-framework CoreServices -framework Carbon -framework IOKit -framework Cocoa";
-		
+
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac);
-		if(!BuildExecutor.executeAnt("jni/build-macosx32.xml", "-Dhas-compiler=true -v postcompile")) {
+		if (!BuildExecutor.executeAnt("jni/build-macosx32.xml", "-Dhas-compiler=true -v postcompile")) {
 			throw new Exception("build failed");
 		}
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives");
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/Ois.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/Ois.java
index a33fd35..222f823 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/Ois.java
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/Ois.java
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
+ ******************************************************************************/
+
 package com.badlogic.gdx.controllers.desktop.ois;
 
 import java.util.ArrayList;
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisJoystick.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisJoystick.java
index 17a30f3..98e3a8f 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisJoystick.java
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisJoystick.java
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
+ ******************************************************************************/
+
 package com.badlogic.gdx.controllers.desktop.ois;
 
 /** @author mzechner
@@ -99,12 +100,12 @@ public class OisJoystick {
 	}
 
 	public float getAxis (int axisIndex) {
-		if(axisIndex < 0 || axisIndex >= axes.length) return 0;
+		if (axisIndex < 0 || axisIndex >= axes.length) return 0;
 		return axes[axisIndex];
 	}
 
 	public OisPov getPov (int povIndex) {
-		if(povIndex < 0 || povIndex >= povs.length) return OisPov.Centered;
+		if (povIndex < 0 || povIndex >= povs.length) return OisPov.Centered;
 		switch (povs[povIndex]) {
 		case 0x00000000:
 			return OisPov.Centered;
@@ -130,18 +131,18 @@ public class OisJoystick {
 	}
 
 	public boolean isButtonPressed (int buttonIndex) {
-		if(buttonIndex < 0 || buttonIndex >= buttons.length) return false;
+		if (buttonIndex < 0 || buttonIndex >= buttons.length) return false;
 		return buttons[buttonIndex];
 	}
 
 	public boolean getSliderX (int sliderIndex) {
-		if(sliderIndex < 0 || sliderIndex >= slidersX.length) return false;
+		if (sliderIndex < 0 || sliderIndex >= slidersX.length) return false;
 
 		return slidersX[sliderIndex];
 	}
 
 	public boolean getSliderY (int sliderIndex) {
-		if(sliderIndex < 0 || sliderIndex >= slidersY.length) return false;
+		if (sliderIndex < 0 || sliderIndex >= slidersY.length) return false;
 		return slidersY[sliderIndex];
 	}
 
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisListener.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisListener.java
index e5c7dc7..4eab69b 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisListener.java
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisListener.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers.desktop.ois;
 
 import com.badlogic.gdx.controllers.desktop.ois.OisJoystick.OisPov;
@@ -31,4 +32,4 @@ public interface OisListener {
 	public void xSliderMoved (OisJoystick joystick, int sliderIndex, boolean value);
 
 	public void ySliderMoved (OisJoystick joystick, int sliderIndex, boolean value);
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java
index 6716312..f7e812d 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
+ ******************************************************************************/
+
 package com.badlogic.gdx.controllers.desktop.ois;
 
 import com.badlogic.gdx.ApplicationAdapter;
@@ -72,7 +73,7 @@ public class OisTest {
 			}
 		};
 
-		//new LwjglApplication(app);
-//		 new LwjglFrame(app, "Controllers", 200, 200, false);
+		// new LwjglApplication(app);
+// new LwjglFrame(app, "Controllers", 200, 200, false);
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControlType.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControlType.java
index 52484d8..d35cddf 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControlType.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControlType.java
@@ -13,9 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers;
 
 /** @author Nathan Sweet */
 public enum ControlType {
 	button, axis, slider, pov, accelerometer
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/Controller.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/Controller.java
index 5dfd517..903f7db 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/Controller.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/Controller.java
@@ -13,78 +13,53 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers;
 
 import com.badlogic.gdx.math.Vector3;
 
-/** 
- * Represents a connected controller. Provides methods to
- * query the state of buttons, axes, POVs, sliders and 
- * accelerometers on the controller. Multiple {@link ControllerListener}
- * instances can be registered with the Controller to receive
- * events in case the controller's state changes. Listeners will
- * be invoked on the rendering thread.
+/** Represents a connected controller. Provides methods to query the state of buttons, axes, POVs, sliders and accelerometers on
+ * the controller. Multiple {@link ControllerListener} instances can be registered with the Controller to receive events in case
+ * the controller's state changes. Listeners will be invoked on the rendering thread.
  * 
  * @author Nathan Sweet */
 public interface Controller {
-	/**
-	 * 
-	 * @param buttonCode
-	 * @return whether the button is pressed.
-	 */
+	/** @param buttonCode
+	 * @return whether the button is pressed. */
 	public boolean getButton (int buttonCode);
 
-	/**
-	 * @param axisCode
-	 * @return the value of the axis, between -1 and 1
-	 */
+	/** @param axisCode
+	 * @return the value of the axis, between -1 and 1 */
 	public float getAxis (int axisCode);
 
-	/**
-	 * @param povCode
-	 * @return the {@link PovDirection}
-	 */
+	/** @param povCode
+	 * @return the {@link PovDirection} */
 	public PovDirection getPov (int povCode);
 
-	/**
-	 * @param sliderCode
-	 * @return whether the slider is pressed
-	 */
+	/** @param sliderCode
+	 * @return whether the slider is pressed */
 	public boolean getSliderX (int sliderCode);
 
-	/**
-	 * @param sliderCode
-	 * @return whether the slider is pressed
-	 */
+	/** @param sliderCode
+	 * @return whether the slider is pressed */
 	public boolean getSliderY (int sliderCode);
 
-	/**
-	 * @param accelerometerCode
-	 * @return the accelerometer values on the 3 axis, in m/s^2
-	 */
+	/** @param accelerometerCode
+	 * @return the accelerometer values on the 3 axis, in m/s^2 */
 	public Vector3 getAccelerometer (int accelerometerCode);
 
-	/**
-	 * @param sensitivity the accelerometer sensitive, 0 (lowest) to 1 (highest)
-	 */
+	/** @param sensitivity the accelerometer sensitive, 0 (lowest) to 1 (highest) */
 	public void setAccelerometerSensitivity (float sensitivity);
 
-	/**
-	 * @return the device name
-	 */
+	/** @return the device name */
 	public String getName ();
 
-	/**
-	 * Adds a new {@link ControllerListener} to this {@link Controller}. The
-	 * listener will receive calls in case the state of the controller changes.
-	 * The listener will be invoked on the rendering thread.
-	 * @param listener
-	 */
+	/** Adds a new {@link ControllerListener} to this {@link Controller}. The listener will receive calls in case the state of the
+	 * controller changes. The listener will be invoked on the rendering thread.
+	 * @param listener */
 	public void addListener (ControllerListener listener);
 
-	/**
-	 * Removes the given {@link ControllerListener}
-	 * @param listener
-	 */
+	/** Removes the given {@link ControllerListener}
+	 * @param listener */
 	public void removeListener (ControllerListener listener);
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerAdapter.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerAdapter.java
index f5402b1..8b23c5f 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerAdapter.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerAdapter.java
@@ -12,18 +12,14 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.controllers;
 
 import com.badlogic.gdx.math.Vector3;
 
-/**
- * A base implementation for {@link ControllerListener}. Subclass this
- * if you are only intersted in a few specific events.
- * @author mzechner
- *
- */
+/** A base implementation for {@link ControllerListener}. Subclass this if you are only intersted in a few specific events.
+ * @author mzechner */
 public class ControllerAdapter implements ControllerListener {
 	@Override
 	public boolean buttonDown (Controller controller, int buttonIndex) {
@@ -67,4 +63,4 @@ public class ControllerAdapter implements ControllerListener {
 	@Override
 	public void disconnected (Controller controller) {
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerListener.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerListener.java
index f91d966..763a0b0 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerListener.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerListener.java
@@ -13,101 +13,76 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers;
 
 import java.util.ResourceBundle.Control;
 
 import com.badlogic.gdx.math.Vector3;
 
-/** Registered with {@link Controllers} or a specific
- * {@link Controller} instance to receive events.
+/** Registered with {@link Controllers} or a specific {@link Controller} instance to receive events.
  * @author Nathan Sweet */
 public interface ControllerListener {
-	/**
-	 * A {@link Controller} got connected.
-	 * @param controller
-	 */
-	public void connected(Controller controller);
-	
-	/**
-	 * A {@link Controller} got disconnected.
-	 * @param controller
-	 */
-	public void disconnected(Controller controller);
-	
-	/**
-	 * A button on the {@link Controller} was pressed. The 
-	 * buttonCode is controller specific. The <code>com.badlogic.gdx.controllers.mapping</code>
-	 * package hosts button constants for known controllers.
+	/** A {@link Controller} got connected.
+	 * @param controller */
+	public void connected (Controller controller);
+
+	/** A {@link Controller} got disconnected.
+	 * @param controller */
+	public void disconnected (Controller controller);
+
+	/** A button on the {@link Controller} was pressed. The buttonCode is controller specific. The
+	 * <code>com.badlogic.gdx.controllers.mapping</code> package hosts button constants for known controllers.
 	 * @param controller
 	 * @param buttonCode
-	 * @return whether to hand the event to other listeners.
-	 */
+	 * @return whether to hand the event to other listeners. */
 	public boolean buttonDown (Controller controller, int buttonCode);
 
-	/**
-	 * A button on the {@link Controller} was released. The
-	 * buttonCode is controller specific. The <code>com.badlogic.gdx.controllers.mapping</code>
-	 * package hosts button constants for known controllers.
+	/** A button on the {@link Controller} was released. The buttonCode is controller specific. The
+	 * <code>com.badlogic.gdx.controllers.mapping</code> package hosts button constants for known controllers.
 	 * @param controller
 	 * @param buttonCode
-	 * @return whether to hand the event to other listeners.
-	 */
+	 * @return whether to hand the event to other listeners. */
 	public boolean buttonUp (Controller controller, int buttonCode);
 
-	/**
-	 * An axis on the {@link Controller} moved. The axisCode is controller specific.
-	 * The axis value is in the range [-1, 1]. The <code>com.badlogic.gdx.controllers.mapping</code>
-	 * package hosts axes constants for known controllers.
+	/** An axis on the {@link Controller} moved. The axisCode is controller specific. The axis value is in the range [-1, 1]. The
+	 * <code>com.badlogic.gdx.controllers.mapping</code> package hosts axes constants for known controllers.
 	 * @param controller
 	 * @param axisCode
 	 * @param value the axis value, -1 to 1
-	 * @return whether to hand the event to other listeners.
-	 */
+	 * @return whether to hand the event to other listeners. */
 	public boolean axisMoved (Controller controller, int axisCode, float value);
 
-	/**
-	 * A POV on the {@link Controller} moved. The povCode is controller specific.
-	 * The <code>com.badlogic.gdx.controllers.mapping</code>
-	 * package hosts POV constants for known controllers.
+	/** A POV on the {@link Controller} moved. The povCode is controller specific. The
+	 * <code>com.badlogic.gdx.controllers.mapping</code> package hosts POV constants for known controllers.
 	 * @param controller
 	 * @param povCode
 	 * @param value
-	 * @return whether to hand the event to other listeners.
-	 */
+	 * @return whether to hand the event to other listeners. */
 	public boolean povMoved (Controller controller, int povCode, PovDirection value);
 
-	/**
-	 * An x-slider on the {@link Controller} moved. The sliderCode is controller specific.
-	 * The <code>com.badlogic.gdx.controllers.mapping</code>
-	 * package hosts slider constants for known controllers.
+	/** An x-slider on the {@link Controller} moved. The sliderCode is controller specific. The
+	 * <code>com.badlogic.gdx.controllers.mapping</code> package hosts slider constants for known controllers.
 	 * @param controller
 	 * @param sliderCode
 	 * @param value
-	 * @return whether to hand the event to other listeners.
-	 */
+	 * @return whether to hand the event to other listeners. */
 	public boolean xSliderMoved (Controller controller, int sliderCode, boolean value);
 
-	/**
-	 * An y-slider on the {@link Controller} moved. The sliderCode is controller specific.
-	 * The <code>com.badlogic.gdx.controllers.mapping</code>
-	 * package hosts slider constants for known controllers.
+	/** An y-slider on the {@link Controller} moved. The sliderCode is controller specific. The
+	 * <code>com.badlogic.gdx.controllers.mapping</code> package hosts slider constants for known controllers.
 	 * @param controller
 	 * @param sliderCode
 	 * @param value
-	 * @return whether to hand the event to other listeners.
-	 */
+	 * @return whether to hand the event to other listeners. */
 	public boolean ySliderMoved (Controller controller, int sliderCode, boolean value);
 
-	/**
-	 * An accelerometer value on the {@link Controller} changed. The accelerometerCode is
-	 * controller specific. The <code>com.badlogic.gdx.controllers.mapping</code>
-	 * package hosts slider constants for known controllers. The value is a {@link Vector3}
-	 * representing the acceleration on a 3-axis accelerometer in m/s^2.
+	/** An accelerometer value on the {@link Controller} changed. The accelerometerCode is controller specific. The
+	 * <code>com.badlogic.gdx.controllers.mapping</code> package hosts slider constants for known controllers. The value is a
+	 * {@link Vector3} representing the acceleration on a 3-axis accelerometer in m/s^2.
 	 * @param controller
 	 * @param accelerometerCode
 	 * @param value
-	 * @return whether to hand the event to other listeners.
-	 */
+	 * @return whether to hand the event to other listeners. */
 	public boolean accelerometerMoved (Controller controller, int accelerometerCode, Vector3 value);
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerManager.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerManager.java
index 2c77a57..a01a9d1 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerManager.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerManager.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers;
 
 import com.badlogic.gdx.utils.Array;
@@ -24,9 +25,7 @@ public interface ControllerManager {
 	public void addListener (ControllerListener listener);
 
 	public void removeListener (ControllerListener listener);
-	
-	/**
-	 * Clear all listeners
-	 */
-	public void clearListeners();
-}
\ No newline at end of file
+
+	/** Clear all listeners */
+	public void clearListeners ();
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerManagerStub.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerManagerStub.java
index 9d363dd..8a4157b 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerManagerStub.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/ControllerManagerStub.java
@@ -12,20 +12,17 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.controllers;
 
 import com.badlogic.gdx.utils.Array;
 
-/**
- * Used on platforms that don't support the extenions, e.g. HTML5
- * and iOS.
- * @author mzechner
- *
- */
+/** Used on platforms that don't support the extenions, e.g. HTML5 and iOS.
+ * @author mzechner */
 public class ControllerManagerStub implements ControllerManager {
 	Array<Controller> controllers = new Array<Controller>();
+
 	@Override
 	public Array<Controller> getControllers () {
 		return controllers;
@@ -42,4 +39,4 @@ public class ControllerManagerStub implements ControllerManager {
 	@Override
 	public void clearListeners () {
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/Controllers.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/Controllers.java
index e303fd0..8d3b991 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/Controllers.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/Controllers.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers;
 
 import com.badlogic.gdx.Application;
@@ -25,79 +26,67 @@ import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.reflect.ClassReflection;
 
-/** Provides access to connected {@link Controller} instances. Query
- * the available controllers via {@link #getControllers()}, add and remove
- * global {@link ControllerListener} instances via {@link #addListener(ControllerListener)}
- * and {@link #removeListener(ControllerListener)}. The listeners will be
- * invoked on the rendering thread. The global listeners will be invoked
- * for all events generated by all controllers. Polling a Controller can be
- * done by invoking one of its getter methods.
+/** Provides access to connected {@link Controller} instances. Query the available controllers via {@link #getControllers()}, add
+ * and remove global {@link ControllerListener} instances via {@link #addListener(ControllerListener)} and
+ * {@link #removeListener(ControllerListener)}. The listeners will be invoked on the rendering thread. The global listeners will
+ * be invoked for all events generated by all controllers. Polling a Controller can be done by invoking one of its getter methods.
  * 
  * @author Nathan Sweet */
 public class Controllers {
 	private static final String TAG = "Controllers";
 	static final ObjectMap<Application, ControllerManager> managers = new ObjectMap<Application, ControllerManager>();
 
-	/**
-	 * Returns an array of connected {@link Controller} instances. This
-	 * method should only be called on the rendering thread.
+	/** Returns an array of connected {@link Controller} instances. This method should only be called on the rendering thread.
 	 * 
-	 * @return the connected controllers
-	 */
+	 * @return the connected controllers */
 	static public Array<Controller> getControllers () {
 		initialize();
 		return getManager().getControllers();
 	}
 
-	/**
-	 * Add a global {@link ControllerListener} that can react to
-	 * events from all {@link Controller} instances. The listener
-	 * will be invoked on the rendering thread.
-	 * @param listener
-	 */
+	/** Add a global {@link ControllerListener} that can react to events from all {@link Controller} instances. The listener will be
+	 * invoked on the rendering thread.
+	 * @param listener */
 	static public void addListener (ControllerListener listener) {
 		initialize();
 		getManager().addListener(listener);
 	}
 
-	/**
-	 * Removes a global {@link ControllerListener}. The method
-	 * must be called on the rendering thread.
-	 * @param listener
-	 */
+	/** Removes a global {@link ControllerListener}. The method must be called on the rendering thread.
+	 * @param listener */
 	static public void removeListener (ControllerListener listener) {
 		initialize();
 		getManager().removeListener(listener);
 	}
-	
-	static private ControllerManager getManager() {
+
+	static private ControllerManager getManager () {
 		return managers.get(Gdx.app);
 	}
 
 	static private void initialize () {
-		if(managers.containsKey(Gdx.app)) return;
-		
+		if (managers.containsKey(Gdx.app)) return;
+
 		String className = null;
 		ApplicationType type = Gdx.app.getType();
 		ControllerManager manager = null;
-		
-		if(type == ApplicationType.Android) {
-			if(Gdx.app.getVersion() >= 12) {
+
+		if (type == ApplicationType.Android) {
+			if (Gdx.app.getVersion() >= 12) {
 				className = "com.badlogic.gdx.controllers.android.AndroidControllers";
 			} else {
 				Gdx.app.log(TAG, "No controller manager is available for Android versions < API level 12");
 				manager = new ControllerManagerStub();
 			}
-		} else if(type == ApplicationType.Desktop) {
+		} else if (type == ApplicationType.Desktop) {
 			className = "com.badlogic.gdx.controllers.desktop.DesktopControllerManager";
-		} else if(type == ApplicationType.WebGL) {
+		} else if (type == ApplicationType.WebGL) {
 			className = "com.badlogic.gdx.controllers.gwt.GwtControllers";
 		} else {
 			Gdx.app.log(TAG, "No controller manager is available for: " + Gdx.app.getType());
 			manager = new ControllerManagerStub();
 		}
-		
-		if(manager == null) {
+
+		if (manager == null) {
 			try {
 				Class controllerManagerClass = ClassReflection.forName(className);
 				manager = (ControllerManager)ClassReflection.newInstance(controllerManagerClass);
@@ -105,19 +94,19 @@ public class Controllers {
 				throw new GdxRuntimeException("Error creating controller manager: " + className, ex);
 			}
 		}
-		
+
 		managers.put(Gdx.app, manager);
 		final Application app = Gdx.app;
 		Gdx.app.addLifecycleListener(new LifecycleListener() {
-			
+
 			@Override
 			public void resume () {
 			}
-			
+
 			@Override
 			public void pause () {
 			}
-			
+
 			@Override
 			public void dispose () {
 				managers.remove(app);
@@ -127,4 +116,4 @@ public class Controllers {
 		});
 		Gdx.app.log(TAG, "added manager for application, " + managers.size + " managers active");
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/PovDirection.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/PovDirection.java
index 5fad309..99a91e5 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/PovDirection.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/PovDirection.java
@@ -13,9 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.controllers;
 
 /** @author Nathan Sweet */
 public enum PovDirection {
 	center, north, south, east, west, northEast, southEast, northWest, southWest
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java
index 904e520..105303b 100644
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java
@@ -12,19 +12,16 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.controllers.mappings;
 
 import java.lang.reflect.Field;
 
 import com.badlogic.gdx.controllers.Controller;
 
-/**
- * Button and axis indices for the OUYA {@link Controller}.
- * @author mzechner
- *
- */
+/** Button and axis indices for the OUYA {@link Controller}.
+ * @author mzechner */
 public class Ouya {
 	public static final String ID = "OUYA Game Controller";
 	public static final int BUTTON_O;
@@ -51,7 +48,7 @@ public class Ouya {
 	public static final float STICK_DEADZONE = 0.25F;
 	/** whether the app is running on a real Ouya device **/
 	public static final boolean runningOnOuya;
-	
+
 	static {
 		boolean isOuya = false;
 		try {
@@ -59,11 +56,11 @@ public class Ouya {
 			Field deviceField = buildClass.getDeclaredField("DEVICE");
 			Object device = deviceField.get(null);
 			isOuya = "ouya_1_1".equals(device) || "cardhu".equals(device);
-		} catch(Exception e) {
+		} catch (Exception e) {
 		}
 		runningOnOuya = isOuya;
-		
-		if(isOuya) {
+
+		if (isOuya) {
 			BUTTON_O = 96;
 			BUTTON_U = 99;
 			BUTTON_Y = 100;
@@ -109,4 +106,4 @@ public class Ouya {
 			AXIS_RIGHT_TRIGGER = 5;
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java b/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
index 865bf88..78c86a5 100644
--- a/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
+++ b/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
@@ -65,21 +65,21 @@ public class FreeTypeFontGenerator implements Disposable {
 	final String filePath;
 	boolean bitmapped = false;
 
-	/** The maximum texture size allowed by generateData, when storing in a texture atlas. 
-	 * Multiple texture pages will be created if necessary. */
+	/** The maximum texture size allowed by generateData, when storing in a texture atlas. Multiple texture pages will be created if
+	 * necessary. */
 	private static int maxTextureSize = 1024;
 
 	/** A hint to scale the texture as needed, without capping it at any maximum size */
-	public static final int NO_MAXIMUM = -1; 
-	
-	/** Sets the maximum size that will be used when generating texture atlases for glyphs with <tt>generateData()</tt>.
-	 * The default is 1024. By specifying NO_MAXIMUM, the texture atlas will scale as needed. 
+	public static final int NO_MAXIMUM = -1;
+
+	/** Sets the maximum size that will be used when generating texture atlases for glyphs with <tt>generateData()</tt>. The default
+	 * is 1024. By specifying NO_MAXIMUM, the texture atlas will scale as needed.
 	 * 
-	 * The power-of-two square texture size will be capped to the given <tt>texSize</tt>. It's recommended that
-	 * a power-of-two value be used here. 
+	 * The power-of-two square texture size will be capped to the given <tt>texSize</tt>. It's recommended that a power-of-two
+	 * value be used here.
 	 * 
-	 * Multiple pages may be used to fit all the generated glyphs. You can query the resulting number of pages
-	 * by calling <tt>bitmapFont.getRegions().length</tt> or <tt>freeTypeBitmapFontData.getTextureRegions().length</tt>. 
+	 * Multiple pages may be used to fit all the generated glyphs. You can query the resulting number of pages by calling
+	 * <tt>bitmapFont.getRegions().length</tt> or <tt>freeTypeBitmapFontData.getTextureRegions().length</tt>.
 	 * 
 	 * If PixmapPacker is specified when calling generateData, this parameter is ignored.
 	 * 
@@ -88,12 +88,12 @@ public class FreeTypeFontGenerator implements Disposable {
 		maxTextureSize = texSize;
 	}
 
-	/** Returns the maximum texture size that will be used by generateData() when creating a texture atlas for the glyphs. 
+	/** Returns the maximum texture size that will be used by generateData() when creating a texture atlas for the glyphs.
 	 * @return the power-of-two max texture size */
-	public static int getMaxTextureSize() {
+	public static int getMaxTextureSize () {
 		return maxTextureSize;
 	}
-	
+
 	/** Creates a new generator from the given TrueType font file. Throws a {@link GdxRuntimeException} in case loading did not
 	 * succeed.
 	 * @param font the {@link FileHandle} to the TrueType font file */
@@ -103,23 +103,18 @@ public class FreeTypeFontGenerator implements Disposable {
 		if (library == null) throw new GdxRuntimeException("Couldn't initialize FreeType");
 		face = FreeType.newFace(library, font, 0);
 		if (face == null) throw new GdxRuntimeException("Couldn't create face for font '" + font + "'");
-		if(checkForBitmapFont())
-		{
+		if (checkForBitmapFont()) {
 			return;
 		}
 		if (!FreeType.setPixelSizes(face, 0, 15)) throw new GdxRuntimeException("Couldn't set size for font '" + font + "'");
 	}
 
-	private boolean checkForBitmapFont()
-	{
-		if(	((face.getFaceFlags()&FreeType.FT_FACE_FLAG_FIXED_SIZES) == FreeType.FT_FACE_FLAG_FIXED_SIZES)
-		&& ((face.getFaceFlags()&FreeType.FT_FACE_FLAG_HORIZONTAL) == FreeType.FT_FACE_FLAG_HORIZONTAL) )
-		{
-			if(FreeType.loadChar(face, 32, FreeType.FT_LOAD_DEFAULT))
-			{
+	private boolean checkForBitmapFont () {
+		if (((face.getFaceFlags() & FreeType.FT_FACE_FLAG_FIXED_SIZES) == FreeType.FT_FACE_FLAG_FIXED_SIZES)
+			&& ((face.getFaceFlags() & FreeType.FT_FACE_FLAG_HORIZONTAL) == FreeType.FT_FACE_FLAG_HORIZONTAL)) {
+			if (FreeType.loadChar(face, 32, FreeType.FT_LOAD_DEFAULT)) {
 				GlyphSlot slot = face.getGlyph();
-				if(slot.getFormat()==1651078259)
-				{
+				if (slot.getFormat() == 1651078259) {
 					bitmapped = true;
 				}
 			}
@@ -127,7 +122,6 @@ public class FreeTypeFontGenerator implements Disposable {
 		return bitmapped;
 	}
 
-
 	/** Generates a new {@link BitmapFont}, containing glyphs for the given characters. The size is expressed in pixels. Throws a
 	 * GdxRuntimeException in case the font could not be generated. Using big sizes might cause such an exception. All characters
 	 * need to fit onto a single texture.
@@ -150,7 +144,7 @@ public class FreeTypeFontGenerator implements Disposable {
 	public BitmapFont generateFont (int size) {
 		return generateFont(size, DEFAULT_CHARS, false);
 	}
-	
+
 	/** Generates a new {@link BitmapFont}. The size is expressed in pixels. Throws a GdxRuntimeException in case the font could not
 	 * be generated. Using big sizes might cause such an exception. All characters need to fit onto a single texture.
 	 * 
@@ -161,28 +155,25 @@ public class FreeTypeFontGenerator implements Disposable {
 		font.setOwnsTexture(true);
 		return font;
 	}
-	
-	/** Uses ascender and descender of font to calculate real height that makes
-	 *  all glyphs to fit in given pixel size. Source:
-	 *  http://nothings.org/stb/stb_truetype.h / stbtt_ScaleForPixelHeight
-	 */
-	public int scaleForPixelHeight(int size) {
+
+	/** Uses ascender and descender of font to calculate real height that makes all glyphs to fit in given pixel size. Source:
+	 * http://nothings.org/stb/stb_truetype.h / stbtt_ScaleForPixelHeight */
+	public int scaleForPixelHeight (int size) {
 		if (!bitmapped && !FreeType.setPixelSizes(face, 0, size)) throw new GdxRuntimeException("Couldn't set size for font");
 		SizeMetrics fontMetrics = face.getSize().getMetrics();
 		int ascent = FreeType.toInt(fontMetrics.getAscender());
 		int descent = FreeType.toInt(fontMetrics.getDescender());
 		return size * size / (ascent - descent);
 	}
-	
+
 	public class GlyphAndBitmap {
 		public Glyph glyph;
 		public Bitmap bitmap;
 	}
-	
-	/** Returns null if glyph was not found. If there is nothing to render,
-	 * for example with various space characters, then bitmap is null.
-	 * */
-	public GlyphAndBitmap generateGlyphAndBitmap(int c, int size, boolean flip) {
+
+	/** Returns null if glyph was not found. If there is nothing to render, for example with various space characters, then bitmap
+	 * is null. */
+	public GlyphAndBitmap generateGlyphAndBitmap (int c, int size, boolean flip) {
 		if (!bitmapped && !FreeType.setPixelSizes(face, 0, size)) throw new GdxRuntimeException("Couldn't set size for font");
 
 		SizeMetrics fontMetrics = face.getSize().getMetrics();
@@ -200,10 +191,10 @@ public class FreeTypeFontGenerator implements Disposable {
 		}
 
 		GlyphSlot slot = face.getGlyph();
-		
+
 		// Try to render to bitmap
 		Bitmap bitmap;
-		if(bitmapped) {
+		if (bitmapped) {
 			bitmap = slot.getBitmap();
 		} else if (!FreeType.renderGlyph(slot, FreeType.FT_RENDER_MODE_LIGHT)) {
 			bitmap = null;
@@ -251,7 +242,7 @@ public class FreeTypeFontGenerator implements Disposable {
 	public FreeTypeBitmapFontData generateData (int size, String characters, boolean flip) {
 		return generateData(size, characters, flip, null);
 	}
-	
+
 	/** Generates a new {@link BitmapFontData} instance, expert usage only. Throws a GdxRuntimeException in case something went
 	 * wrong.
 	 * 
@@ -268,16 +259,17 @@ public class FreeTypeFontGenerator implements Disposable {
 		parameter.packer = packer;
 		return generateData(parameter);
 	}
-	
+
 	/** Generates a new {@link BitmapFontData} instance, expert usage only. Throws a GdxRuntimeException in case something went
 	 * wrong.
 	 * 
 	 * @param parameter configures how the font is generated */
 	public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter) {
 		parameter = parameter == null ? new FreeTypeFontParameter() : parameter;
-		
+
 		FreeTypeBitmapFontData data = new FreeTypeBitmapFontData();
-		if (!bitmapped && !FreeType.setPixelSizes(face, 0, parameter.size)) throw new GdxRuntimeException("Couldn't set size for font");
+		if (!bitmapped && !FreeType.setPixelSizes(face, 0, parameter.size))
+			throw new GdxRuntimeException("Couldn't set size for font");
 
 		// set general font data
 		SizeMetrics fontMetrics = face.getSize().getMetrics();
@@ -288,14 +280,11 @@ public class FreeTypeFontGenerator implements Disposable {
 		float baseLine = data.ascent;
 
 		// if bitmapped
-		if(bitmapped && (data.lineHeight==0))
-		{
-			for(int c=32 ; c< (32+face.getNumGlyphs()); c++)
-			{
-				if(FreeType.loadChar(face, c, FreeType.FT_LOAD_DEFAULT)) 
-				{
+		if (bitmapped && (data.lineHeight == 0)) {
+			for (int c = 32; c < (32 + face.getNumGlyphs()); c++) {
+				if (FreeType.loadChar(face, c, FreeType.FT_LOAD_DEFAULT)) {
 					int lh = FreeType.toInt(face.getGlyph().getMetrics().getHeight());
-					data.lineHeight = (lh > data.lineHeight) ? lh : data.lineHeight ; 
+					data.lineHeight = (lh > data.lineHeight) ? lh : data.lineHeight;
 				}
 			}
 		}
@@ -333,26 +322,25 @@ public class FreeTypeFontGenerator implements Disposable {
 			data.down = -data.down;
 		}
 
-			
 		boolean ownsAtlas = false;
-		
+
 		PixmapPacker packer = parameter.packer;
-		
-		if (packer==null) {
+
+		if (packer == null) {
 			// generate the glyphs
 			int maxGlyphHeight = (int)Math.ceil(data.lineHeight);
-			int pageWidth = MathUtils.nextPowerOfTwo((int)Math.sqrt(maxGlyphHeight * maxGlyphHeight * parameter.characters.length()));
-				
-			if (maxTextureSize > 0)
-				pageWidth = Math.min(pageWidth, maxTextureSize);
+			int pageWidth = MathUtils
+				.nextPowerOfTwo((int)Math.sqrt(maxGlyphHeight * maxGlyphHeight * parameter.characters.length()));
+
+			if (maxTextureSize > 0) pageWidth = Math.min(pageWidth, maxTextureSize);
 
 			ownsAtlas = true;
 			packer = new PixmapPacker(pageWidth, pageWidth, Format.RGBA8888, 2, false);
 		}
 
-		//to minimize collisions we'll use this format : pathWithoutExtension_size[_flip]_glyph
-		String packPrefix = ownsAtlas ? "" : (filePath + '_' + parameter.size + (parameter.flip ? "_flip_" : '_') );
-		
+		// to minimize collisions we'll use this format : pathWithoutExtension_size[_flip]_glyph
+		String packPrefix = ownsAtlas ? "" : (filePath + '_' + parameter.size + (parameter.flip ? "_flip_" : '_'));
+
 		for (int i = 0; i < parameter.characters.length(); i++) {
 			char c = parameter.characters.charAt(i);
 			if (!FreeType.loadChar(face, c, FreeType.FT_LOAD_DEFAULT)) {
@@ -372,38 +360,36 @@ public class FreeTypeFontGenerator implements Disposable {
 			glyph.width = pixmap.getWidth();
 			glyph.height = pixmap.getHeight();
 			glyph.xoffset = slot.getBitmapLeft();
-			glyph.yoffset = parameter.flip ? -slot.getBitmapTop() + (int)baseLine : -(glyph.height - slot.getBitmapTop()) - (int)baseLine;
+			glyph.yoffset = parameter.flip ? -slot.getBitmapTop() + (int)baseLine : -(glyph.height - slot.getBitmapTop())
+				- (int)baseLine;
 			glyph.xadvance = FreeType.toInt(metrics.getHoriAdvance());
 
-			if(bitmapped)
-			{
+			if (bitmapped) {
 				pixmap.setColor(Color.CLEAR);
 				pixmap.fill();
 				ByteBuffer buf = bitmap.getBuffer();
-				for(int h=0; h<glyph.height; h++)
-				{
-					int idx = h*bitmap.getPitch();
-					for(int w=0; w<(glyph.width+glyph.xoffset); w++)
-					{
-						int bit = (buf.get(idx+(w/8)) >>> (7-(w%8))) & 1;
-						pixmap.drawPixel(w, h, ((bit==1)? Color.WHITE.toIntBits() : Color.CLEAR.toIntBits()));
+				for (int h = 0; h < glyph.height; h++) {
+					int idx = h * bitmap.getPitch();
+					for (int w = 0; w < (glyph.width + glyph.xoffset); w++) {
+						int bit = (buf.get(idx + (w / 8)) >>> (7 - (w % 8))) & 1;
+						pixmap.drawPixel(w, h, ((bit == 1) ? Color.WHITE.toIntBits() : Color.CLEAR.toIntBits()));
 					}
 				}
-				
+
 			}
 
 			String name = packPrefix + c;
 			Rectangle rect = packer.pack(name, pixmap);
-			
-			//determine which page it was packed into
+
+			// determine which page it was packed into
 			int pIndex = packer.getPageIndex(name);
-			if (pIndex==-1) //we should not get here
-				throw new IllegalStateException("packer was not able to insert '"+name+"' into a page");
-			
+			if (pIndex == -1) // we should not get here
+				throw new IllegalStateException("packer was not able to insert '" + name + "' into a page");
+
 			glyph.page = pIndex;
 			glyph.srcX = (int)rect.x;
 			glyph.srcY = (int)rect.y;
-			
+
 			data.setGlyph(c, glyph);
 			pixmap.dispose();
 		}
@@ -427,20 +413,21 @@ public class FreeTypeFontGenerator implements Disposable {
 		if (ownsAtlas) {
 			Array<Page> pages = packer.getPages();
 			data.regions = new TextureRegion[pages.size];
-			
-			for (int i=0; i<pages.size; i++) {
+
+			for (int i = 0; i < pages.size; i++) {
 				Page p = pages.get(i);
-				
-				Texture tex = new Texture(new PixmapTextureData(p.getPixmap(), p.getPixmap().getFormat(), parameter.genMipMaps, false, true)) {
+
+				Texture tex = new Texture(new PixmapTextureData(p.getPixmap(), p.getPixmap().getFormat(), parameter.genMipMaps,
+					false, true)) {
 					@Override
 					public void dispose () {
 						super.dispose();
 						getTextureData().consumePixmap().dispose();
-					}					
+					}
 				};
 				tex.setFilter(parameter.minFilter, parameter.magFilter);
-				
-				data.regions[i] = new TextureRegion(tex); 
+
+				data.regions[i] = new TextureRegion(tex);
 			}
 		}
 		return data;
@@ -453,39 +440,34 @@ public class FreeTypeFontGenerator implements Disposable {
 		FreeType.doneFreeType(library);
 	}
 
-	/** {@link BitmapFontData} used for fonts generated via the {@link FreeTypeFontGenerator}. The texture storing the glyphs is
-	 * held in memory, thus the {@link #getImagePaths()} and {@link #getFontFile()} methods will return null.
+	/** {@link BitmapFontData} used for fonts generated via the {@link FreeTypeFontGenerator}. The texture storing the glyphs is held
+	 * in memory, thus the {@link #getImagePaths()} and {@link #getFontFile()} methods will return null.
 	 * @author mzechner */
 	public static class FreeTypeBitmapFontData extends BitmapFontData {
 		TextureRegion[] regions;
 
-		/**
-		 * Returns the first texture region. Use getTextureRegions() instead
+		/** Returns the first texture region. Use getTextureRegions() instead
 		 * @return the first texture region in the array
-		 * @deprecated use getTextureRegions() instead
-		 */
+		 * @deprecated use getTextureRegions() instead */
 		@Deprecated
 		public TextureRegion getTextureRegion () {
 			return regions[0];
 		}
-		
+
 		public TextureRegion[] getTextureRegions () {
 			return regions;
 		}
 	}
-	
-	/**
-	 * Parameter container class that helps configure how {@link FreeTypeBitmapFontData} and
-	 * {@link BitmapFont} instances are generated.
+
+	/** Parameter container class that helps configure how {@link FreeTypeBitmapFontData} and {@link BitmapFont} instances are
+	 * generated.
 	 * 
-	 * The packer field is for advanced usage, where it is necessary to pack multiple BitmapFonts
-	 * (i.e. styles, sizes, families) into a single Texture atlas. If no packer is specified,
-	 * the generator will use its own PixmapPacker to pack the glyphs into a power-of-two sized
-	 * texture, and the resulting {@link FreeTypeBitmapFontData} will have a valid {@link TextureRegion}
-	 * which can be used to construct a new {@link BitmapFont}. 
+	 * The packer field is for advanced usage, where it is necessary to pack multiple BitmapFonts (i.e. styles, sizes, families)
+	 * into a single Texture atlas. If no packer is specified, the generator will use its own PixmapPacker to pack the glyphs into
+	 * a power-of-two sized texture, and the resulting {@link FreeTypeBitmapFontData} will have a valid {@link TextureRegion} which
+	 * can be used to construct a new {@link BitmapFont}.
 	 * 
-	 * @author siondream
-	 */
+	 * @author siondream */
 	public static class FreeTypeFontParameter {
 		/** The size in pixels */
 		public int size = 16;
@@ -493,7 +475,7 @@ public class FreeTypeFontGenerator implements Disposable {
 		public String characters = DEFAULT_CHARS;
 		/** The optional PixmapPacker to use */
 		public PixmapPacker packer = null;
-		/**Whether to flip the font horizontally */
+		/** Whether to flip the font horizontally */
 		public boolean flip = false;
 		/** Whether or not to generate mip maps for the resulting texture */
 		public boolean genMipMaps = false;
diff --git a/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeBuild.java b/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeBuild.java
index 7eb43d1..8cacc3d 100644
--- a/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeBuild.java
+++ b/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeBuild.java
@@ -113,7 +113,7 @@ public class FreetypeBuild {
 		android.cIncludes = sources;
 		android.cFlags += " -std=c99 -DFT2_BUILD_LIBRARY";
 		android.cppFlags += " -std=c99 -DFT2_BUILD_LIBRARY";
-		
+
 		BuildTarget ios = BuildTarget.newDefaultTarget(TargetOs.IOS, false);
 		ios.headerDirs = headers;
 		ios.cIncludes = sources;
@@ -121,9 +121,10 @@ public class FreetypeBuild {
 		ios.cppFlags += " -DFT2_BUILD_LIBRARY";
 
 		new NativeCodeGenerator().generate();
-		new AntScriptGenerator().generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, android, ios);
+		new AntScriptGenerator()
+			.generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, android, ios);
 // BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v clean");
 // BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
-//		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
+// BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }
diff --git a/extensions/gdx-setup-ui/src/res/projects.zip b/extensions/gdx-setup-ui/src/res/projects.zip
index c8d6d7d..0c49c2e 100644
Binary files a/extensions/gdx-setup-ui/src/res/projects.zip and b/extensions/gdx-setup-ui/src/res/projects.zip differ
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java
index ccb9388..a119fae 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java
@@ -12,374 +12,318 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tools.bmfont;
-
-
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.PixmapIO;
-import com.badlogic.gdx.graphics.g2d.BitmapFont.BitmapFontData;
-import com.badlogic.gdx.graphics.g2d.BitmapFont.Glyph;
-import com.badlogic.gdx.graphics.g2d.PixmapPacker.Page;
-import com.badlogic.gdx.utils.Array;
-
-/** A utility to output BitmapFontData to a FNT file. This can be useful for caching the result from TrueTypeFont, for faster load
- * times.
- * 
- * The font format is from the AngelCodeFont BMFont tool.
- * 
- * @author mattdesl AKA davedes */
-public class BitmapFontWriter {
-
-	/** The output format. */
-	public static enum OutputFormat {
-		
-		/** AngelCodeFont text format */
-		Text,
-		/** AngelCodeFont XML format */
-		XML;
-	}
-	
-	/** The output format */
-	private static OutputFormat format = OutputFormat.Text;
-
-	/** Sets the AngelCodeFont output format for subsequent writes; can be text (for LibGDX) or XML (for other engines, like
-	 * Pixi.js).
-	 * 
-	 * @param fmt the output format to use */
-	public static void setOutputFormat(OutputFormat fmt) {
-		if (fmt==null)
-			throw new NullPointerException("format cannot be null");
-		format = fmt;
-	}
-
-	/** Returns the currently used output format.
-	 * @return the output format */
-	public static OutputFormat getOutputFormat() {
-		return format;
-	}
-	
-	/** The Padding parameter for FontInfo. */
-	public static class Padding {
-		public int up, down, left, right;
-
-		public Padding() {
-		}
-		
-		public Padding(int up, int down, int left, int right) {
-			this.up = up;
-			this.down = down;
-			this.left = left;
-			this.right = right;
-		}
-	}
-
-	/** The spacing parameter for FontInfo. */
-	public static class Spacing {
-		public int horizontal, vertical;
-	}
-
-	/** The font "info" line; this will be ignored by LibGDX's BitmapFont reader,
-	 * but useful for clean and organized output. */
-	public static class FontInfo {
-		/** Face name */
-		public String face;
-		/** Font size (pt) */
-		public int size = 12;
-		/** Whether the font is bold */
-		public boolean bold;
-		/** Whether the font is italic */
-		public boolean italic;
-		/** The charset; or null/empty for default */
-		public String charset;
-		/** Whether the font uses unicode glyphs */
-		public boolean unicode = true;
-		/** Stretch for height; default to 100% */
-		public int stretchH = 100;
-		/** Whether smoothing is applied */
-		public boolean smooth = true;
-		/** Amount of anti-aliasing that was applied to the font */
-		public int aa = 2;
-		/** Padding that was applied to the font */
-		public Padding padding = new Padding();
-		/** Horizontal/vertical spacing that was applied to font */
-		public Spacing spacing = new Spacing();
-		public int outline = 0;
-		
-		public FontInfo() {
-		}
-		
-		public FontInfo(String face, int size) {
-			this.face = face;
-			this.size = size;
-		}
-	}
-	
-	private static String quote(Object params) {
-		return quote(params, false);
-	}
-	
-	private static String quote(Object params, boolean spaceAfter) {
-		if (BitmapFontWriter.getOutputFormat() == OutputFormat.XML)
-			return "\"" + params.toString().trim() + "\"" + (spaceAfter ? " " : "");
-		else
-			return params.toString();
-	}
-
-	/** Writes the given BitmapFontData to a file, using the specified <tt>pageRefs</tt> strings as the image paths for each texture
-	 * page. The glyphs in BitmapFontData have a "page" id, which references the index of the pageRef you specify here.
-	 * 
-	 * The FontInfo parameter is useful for cleaner output; such as including a size and font face name hint. However, it can be
-	 * null to use default values. Ultimately, LibGDX ignores the "info" line when reading back fonts.
-	 * 
-	 * Likewise, the scaleW and scaleH are only for cleaner output. They are currently ignored by LibGDX's reader. For maximum
-	 * compatibility with other BMFont tools, you should use the width and height of your texture pages (each page should be the
-	 * same size).
-	 * 
-	 * @param fontData the bitmap font
-	 * @param pageRefs the references to each texture page image file, generally in the same folder as outFntFile
-	 * @param outFntFile the font file to save to (typically ends with '.fnt')
-	 * @param info the optional info for the file header; can be null
-	 * @param scaleW the width of your texture pages
-	 * @param scaleH the height of your texture pages */
-	public static void writeFont (BitmapFontData fontData, String[] pageRefs, FileHandle outFntFile, FontInfo info, int scaleW, int scaleH) {
-		if (info==null) {
-			info = new FontInfo();
-			info.face = outFntFile.nameWithoutExtension();
-		}
-		
-		int lineHeight = (int)fontData.lineHeight;
-		int pages = pageRefs.length;
-		int packed = 0;
-		int base = (int)((fontData.capHeight) + (fontData.flipped ? -fontData.ascent : fontData.ascent));
-		OutputFormat fmt = BitmapFontWriter.getOutputFormat();
-		boolean xml = fmt == OutputFormat.XML;	
-		
-		StringBuilder buf = new StringBuilder();
-		
-		if (xml) {
-			buf.append("<font>\n");
-		}
-		String xmlOpen = xml ? "\t<" : "";
-		String xmlCloseSelf = xml ? "/>" : "";
-		String xmlTab = xml ? "\t" : "";
-		String xmlClose = xml ? ">" : "";
-		
-		String xmlQuote = xml ? "\"" : "";
-		String alphaChnlParams =
-						xml ? " alphaChnl=\"0\" redChnl=\"0\" greenChnl=\"0\" blueChnl=\"0\""
-							 : " alphaChnl=0 redChnl=0 greenChnl=0 blueChnl=0"; 
-		//INFO LINE
-		
-		buf.append(xmlOpen)
-			.append("info face=\"")
-			.append(info.face==null ? "" : info.face.replaceAll("\"", "'"))
-			.append("\" size=").append( quote(info.size) )
-			.append(" bold=").append( quote(info.bold ? 1 : 0) )
-			.append(" italic=").append( quote(info.italic ? 1 : 0) )
-			.append(" charset=\"").append(info.charset==null ? "" : info.charset)
-			.append("\" unicode=").append( quote(info.unicode ? 1 : 0) )
-			.append(" stretchH=").append( quote(info.stretchH) )
-			.append(" smooth=").append( quote(info.smooth ? 1 : 0) )
-			.append(" aa=").append( quote(info.aa) )
-			.append(" padding=")
-				.append(xmlQuote)
-				.append(info.padding.up).append(",")
-				.append(info.padding.down).append(",")
-				.append(info.padding.left).append(",")
-				.append(info.padding.right)
-				.append(xmlQuote)
-			.append(" spacing=")
-				.append(xmlQuote)
-				.append(info.spacing.horizontal).append(",")
-				.append(info.spacing.vertical)
-				.append(xmlQuote)
-			.append(xmlCloseSelf)
-			.append("\n");
-		
-		//COMMON line
-		buf.append(xmlOpen)
-			.append("common lineHeight=").append( quote(lineHeight) )
-			.append(" base=").append( quote(base) )
-			.append(" scaleW=").append( quote(scaleW) )
-			.append(" scaleH=").append( quote(scaleH) )
-			.append(" pages=").append( quote(pages) )
-			.append(" packed=").append( quote(packed) )
-			.append(alphaChnlParams)
-			.append(xmlCloseSelf)
-			.append("\n");
-		
-		if (xml)
-			buf.append("\t<pages>\n");
-		
-		//PAGES
-		for (int i=0; i<pageRefs.length; i++) {
-			buf.append(xmlTab)
-				.append(xmlOpen)
-				.append("page id=")
-				.append( quote(i) )
-				.append(" file=\"")
-				.append(pageRefs[i])
-				.append("\"")
-				.append(xmlCloseSelf)
-				.append("\n");
-		}
-		
-		if (xml)
-			buf.append("\t</pages>\n");
-		
-		//CHARS
-		Array<Glyph> glyphs = new Array<Glyph>(256);
-		for (int i=0; i<fontData.glyphs.length; i++) {
-			if (fontData.glyphs[i]==null)
-				continue;
-			
-			for (int j=0; j<fontData.glyphs[i].length; j++) {
-				if (fontData.glyphs[i][j]!=null) {
-					glyphs.add(fontData.glyphs[i][j]);
-				}
-			}
-		}
-		
-		buf.append(xmlOpen)
-			.append("chars count=").append(quote(glyphs.size))
-			.append(xmlClose)
-			.append("\n");
-		
-		//CHAR definitions
-		for (int i=0; i<glyphs.size; i++) {
-			Glyph g = glyphs.get(i);
-			buf.append(xmlTab)
-				.append(xmlOpen)
-				.append("char id=")
-				.append(quote( String.format("%-5s", g.id), true ))
-				.append("x=").append(quote( String.format("%-5s", g.srcX), true ) )
-				.append("y=").append(quote( String.format("%-5s", g.srcY), true ) )
-				.append("width=").append(quote( String.format("%-5s", g.width), true ) )
-				.append("height=").append(quote( String.format("%-5s", g.height), true ) )
-				.append("xoffset=").append(quote( String.format("%-5s", g.xoffset), true ) )
-				.append("yoffset=").append(quote( String.format("%-5s", fontData.flipped ? g.yoffset : -(g.height + g.yoffset) ), true ) )
-				.append("xadvance=").append(quote( String.format("%-5s", g.xadvance), true ) )
-				.append("page=").append(quote( String.format("%-5s", g.page), true ) )
-				.append("chnl=").append(quote(0, true))
-				.append(xmlCloseSelf)
-				.append("\n");
-		}
-		
-		if (xml)
-			buf.append("\t</chars>\n");
-		
-		//KERNINGS
-		int kernCount = 0;
-		StringBuilder kernBuf = new StringBuilder(); 
-		for (int i = 0; i < glyphs.size; i++) {
-			for (int j = 0; j < glyphs.size; j++) {
-				Glyph first = glyphs.get(i);
-				Glyph second = glyphs.get(j);
-				int kern = first.getKerning((char)second.id);
-				if (kern!=0) {
-					kernCount++;
-					kernBuf.append(xmlTab)
-							.append(xmlOpen)
-							.append("kerning first=").append(quote(first.id))
-							.append(" second=").append(quote(second.id))
-							.append(" amount=").append(quote(kern, true))
-							.append(xmlCloseSelf)
-							.append("\n");
-				}
-			}
-		}
-
-		//KERN info
-		buf.append(xmlOpen)
-			.append("kernings count=").append(quote(kernCount))
-			.append(xmlClose)
-			.append("\n");
-		buf.append(kernBuf);
-		
-		if (xml) {
-			buf.append("\t</kernings>\n");
-			buf.append("</font>");
-		}
-		
-		String charset = info.charset;
-		if (charset!=null&&charset.length()==0)
-			charset = null;
-		
-		outFntFile.writeString(buf.toString(), false, charset);
-	}
-
-	
-	/** A utility method which writes the given font data to a file.
-	 * 
-	 * The specified pixmaps are written to the parent directory of <tt>outFntFile</tt>, using that file's name without an
-	 * extension for the PNG file name(s).
-	 * 
-	 * The specified FontInfo is optional, and can be null.
-	 * 
-	 * Typical usage looks like this:
-	 * 
-	 * <pre>
-	 * BitmapFontWriter.writeFont(myFontData, myFontPixmaps, Gdx.files.external(&quot;fonts/output.fnt&quot;), new FontInfo(&quot;Arial&quot;, 16));
-	 * </pre>
-	 * 
-	 * @param fontData the font data
-	 * @param pages the pixmaps to write as PNGs
-	 * @param outFntFile the output file for the font definition
-	 * @param info the optional font info for the header file, can be null */
-	public static void writeFont (BitmapFontData fontData, Pixmap[] pages, FileHandle outFntFile, FontInfo info) {
-		String[] pageRefs = writePixmaps(pages, outFntFile.parent(), outFntFile.nameWithoutExtension());
-		
-		//write the font data
-		writeFont(fontData, pageRefs, outFntFile, info, pages[0].getWidth(), pages[0].getHeight());
-	}
-
-	/** A utility method to write the given array of pixmaps to the given output directory, with the specified file name. If the
-	 * pages array is of length 1, then the resulting file ref will look like: "fileName.png".
-	 * 
-	 * If the pages array is greater than length 1, the resulting file refs will be appended with "_N", such as "fileName_0.png",
-	 * "fileName_1.png", "fileName_2.png" etc.
-	 * 
-	 * The returned string array can then be passed to the <tt>writeFont</tt> method.
-	 * 
-	 * Note: None of the pixmaps will be disposed.
-	 * 
-	 * @param pages the pages of pixmap data to write
-	 * @param outputDir the output directory
-	 * @param fileName the file names for the output images
-	 * @return the array of string references to be used with <tt>writeFont</tt> */
-	public static String[] writePixmaps (Pixmap[] pages, FileHandle outputDir, String fileName) {
-		if (pages==null || pages.length==0)
-			throw new IllegalArgumentException("no pixmaps supplied to BitmapFontWriter.write");
-		
-		String[] pageRefs = new String[pages.length];
-		
-		for (int i=0; i<pages.length; i++) {
-			String ref = pages.length==1 ? (fileName+".png") : (fileName+"_"+i+".png");
-			
-			//the ref for this image
-			pageRefs[i] = ref;
-			
-			//write the PNG in that directory
-			PixmapIO.writePNG(outputDir.child(ref), pages[i]);
-		}
-		return pageRefs;
-	}
-
-	/** A convenience method to write pixmaps by page; typically returned from a PixmapPacker when used alongside
-	 * FreeTypeFontGenerator.
-	 * 
-	 * @param pages the pages containing the Pixmaps
-	 * @param outputDir the output directory
-	 * @param fileName the file name
-	 * @return the file refs */
-	public static String[] writePixmaps (Array<Page> pages, FileHandle outputDir, String fileName) {
-		Pixmap[] pix = new Pixmap[pages.size];
-		for (int i=0; i<pages.size; i++) {
-			pix[i] = pages.get(i).getPixmap();
-		}
-		return writePixmaps(pix, outputDir, fileName);
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tools.bmfont;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.PixmapIO;
+import com.badlogic.gdx.graphics.g2d.BitmapFont.BitmapFontData;
+import com.badlogic.gdx.graphics.g2d.BitmapFont.Glyph;
+import com.badlogic.gdx.graphics.g2d.PixmapPacker.Page;
+import com.badlogic.gdx.utils.Array;
+
+/** A utility to output BitmapFontData to a FNT file. This can be useful for caching the result from TrueTypeFont, for faster load
+ * times.
+ * 
+ * The font format is from the AngelCodeFont BMFont tool.
+ * 
+ * @author mattdesl AKA davedes */
+public class BitmapFontWriter {
+
+	/** The output format. */
+	public static enum OutputFormat {
+
+		/** AngelCodeFont text format */
+		Text,
+		/** AngelCodeFont XML format */
+		XML;
+	}
+
+	/** The output format */
+	private static OutputFormat format = OutputFormat.Text;
+
+	/** Sets the AngelCodeFont output format for subsequent writes; can be text (for LibGDX) or XML (for other engines, like
+	 * Pixi.js).
+	 * 
+	 * @param fmt the output format to use */
+	public static void setOutputFormat (OutputFormat fmt) {
+		if (fmt == null) throw new NullPointerException("format cannot be null");
+		format = fmt;
+	}
+
+	/** Returns the currently used output format.
+	 * @return the output format */
+	public static OutputFormat getOutputFormat () {
+		return format;
+	}
+
+	/** The Padding parameter for FontInfo. */
+	public static class Padding {
+		public int up, down, left, right;
+
+		public Padding () {
+		}
+
+		public Padding (int up, int down, int left, int right) {
+			this.up = up;
+			this.down = down;
+			this.left = left;
+			this.right = right;
+		}
+	}
+
+	/** The spacing parameter for FontInfo. */
+	public static class Spacing {
+		public int horizontal, vertical;
+	}
+
+	/** The font "info" line; this will be ignored by LibGDX's BitmapFont reader, but useful for clean and organized output. */
+	public static class FontInfo {
+		/** Face name */
+		public String face;
+		/** Font size (pt) */
+		public int size = 12;
+		/** Whether the font is bold */
+		public boolean bold;
+		/** Whether the font is italic */
+		public boolean italic;
+		/** The charset; or null/empty for default */
+		public String charset;
+		/** Whether the font uses unicode glyphs */
+		public boolean unicode = true;
+		/** Stretch for height; default to 100% */
+		public int stretchH = 100;
+		/** Whether smoothing is applied */
+		public boolean smooth = true;
+		/** Amount of anti-aliasing that was applied to the font */
+		public int aa = 2;
+		/** Padding that was applied to the font */
+		public Padding padding = new Padding();
+		/** Horizontal/vertical spacing that was applied to font */
+		public Spacing spacing = new Spacing();
+		public int outline = 0;
+
+		public FontInfo () {
+		}
+
+		public FontInfo (String face, int size) {
+			this.face = face;
+			this.size = size;
+		}
+	}
+
+	private static String quote (Object params) {
+		return quote(params, false);
+	}
+
+	private static String quote (Object params, boolean spaceAfter) {
+		if (BitmapFontWriter.getOutputFormat() == OutputFormat.XML)
+			return "\"" + params.toString().trim() + "\"" + (spaceAfter ? " " : "");
+		else
+			return params.toString();
+	}
+
+	/** Writes the given BitmapFontData to a file, using the specified <tt>pageRefs</tt> strings as the image paths for each texture
+	 * page. The glyphs in BitmapFontData have a "page" id, which references the index of the pageRef you specify here.
+	 * 
+	 * The FontInfo parameter is useful for cleaner output; such as including a size and font face name hint. However, it can be
+	 * null to use default values. Ultimately, LibGDX ignores the "info" line when reading back fonts.
+	 * 
+	 * Likewise, the scaleW and scaleH are only for cleaner output. They are currently ignored by LibGDX's reader. For maximum
+	 * compatibility with other BMFont tools, you should use the width and height of your texture pages (each page should be the
+	 * same size).
+	 * 
+	 * @param fontData the bitmap font
+	 * @param pageRefs the references to each texture page image file, generally in the same folder as outFntFile
+	 * @param outFntFile the font file to save to (typically ends with '.fnt')
+	 * @param info the optional info for the file header; can be null
+	 * @param scaleW the width of your texture pages
+	 * @param scaleH the height of your texture pages */
+	public static void writeFont (BitmapFontData fontData, String[] pageRefs, FileHandle outFntFile, FontInfo info, int scaleW,
+		int scaleH) {
+		if (info == null) {
+			info = new FontInfo();
+			info.face = outFntFile.nameWithoutExtension();
+		}
+
+		int lineHeight = (int)fontData.lineHeight;
+		int pages = pageRefs.length;
+		int packed = 0;
+		int base = (int)((fontData.capHeight) + (fontData.flipped ? -fontData.ascent : fontData.ascent));
+		OutputFormat fmt = BitmapFontWriter.getOutputFormat();
+		boolean xml = fmt == OutputFormat.XML;
+
+		StringBuilder buf = new StringBuilder();
+
+		if (xml) {
+			buf.append("<font>\n");
+		}
+		String xmlOpen = xml ? "\t<" : "";
+		String xmlCloseSelf = xml ? "/>" : "";
+		String xmlTab = xml ? "\t" : "";
+		String xmlClose = xml ? ">" : "";
+
+		String xmlQuote = xml ? "\"" : "";
+		String alphaChnlParams = xml ? " alphaChnl=\"0\" redChnl=\"0\" greenChnl=\"0\" blueChnl=\"0\""
+			: " alphaChnl=0 redChnl=0 greenChnl=0 blueChnl=0";
+		// INFO LINE
+
+		buf.append(xmlOpen).append("info face=\"").append(info.face == null ? "" : info.face.replaceAll("\"", "'"))
+			.append("\" size=").append(quote(info.size)).append(" bold=").append(quote(info.bold ? 1 : 0)).append(" italic=")
+			.append(quote(info.italic ? 1 : 0)).append(" charset=\"").append(info.charset == null ? "" : info.charset)
+			.append("\" unicode=").append(quote(info.unicode ? 1 : 0)).append(" stretchH=").append(quote(info.stretchH))
+			.append(" smooth=").append(quote(info.smooth ? 1 : 0)).append(" aa=").append(quote(info.aa)).append(" padding=")
+			.append(xmlQuote).append(info.padding.up).append(",").append(info.padding.down).append(",").append(info.padding.left)
+			.append(",").append(info.padding.right).append(xmlQuote).append(" spacing=").append(xmlQuote)
+			.append(info.spacing.horizontal).append(",").append(info.spacing.vertical).append(xmlQuote).append(xmlCloseSelf)
+			.append("\n");
+
+		// COMMON line
+		buf.append(xmlOpen).append("common lineHeight=").append(quote(lineHeight)).append(" base=").append(quote(base))
+			.append(" scaleW=").append(quote(scaleW)).append(" scaleH=").append(quote(scaleH)).append(" pages=")
+			.append(quote(pages)).append(" packed=").append(quote(packed)).append(alphaChnlParams).append(xmlCloseSelf).append("\n");
+
+		if (xml) buf.append("\t<pages>\n");
+
+		// PAGES
+		for (int i = 0; i < pageRefs.length; i++) {
+			buf.append(xmlTab).append(xmlOpen).append("page id=").append(quote(i)).append(" file=\"").append(pageRefs[i])
+				.append("\"").append(xmlCloseSelf).append("\n");
+		}
+
+		if (xml) buf.append("\t</pages>\n");
+
+		// CHARS
+		Array<Glyph> glyphs = new Array<Glyph>(256);
+		for (int i = 0; i < fontData.glyphs.length; i++) {
+			if (fontData.glyphs[i] == null) continue;
+
+			for (int j = 0; j < fontData.glyphs[i].length; j++) {
+				if (fontData.glyphs[i][j] != null) {
+					glyphs.add(fontData.glyphs[i][j]);
+				}
+			}
+		}
+
+		buf.append(xmlOpen).append("chars count=").append(quote(glyphs.size)).append(xmlClose).append("\n");
+
+		// CHAR definitions
+		for (int i = 0; i < glyphs.size; i++) {
+			Glyph g = glyphs.get(i);
+			buf.append(xmlTab).append(xmlOpen).append("char id=").append(quote(String.format("%-5s", g.id), true)).append("x=")
+				.append(quote(String.format("%-5s", g.srcX), true)).append("y=").append(quote(String.format("%-5s", g.srcY), true))
+				.append("width=").append(quote(String.format("%-5s", g.width), true)).append("height=")
+				.append(quote(String.format("%-5s", g.height), true)).append("xoffset=")
+				.append(quote(String.format("%-5s", g.xoffset), true)).append("yoffset=")
+				.append(quote(String.format("%-5s", fontData.flipped ? g.yoffset : -(g.height + g.yoffset)), true))
+				.append("xadvance=").append(quote(String.format("%-5s", g.xadvance), true)).append("page=")
+				.append(quote(String.format("%-5s", g.page), true)).append("chnl=").append(quote(0, true)).append(xmlCloseSelf)
+				.append("\n");
+		}
+
+		if (xml) buf.append("\t</chars>\n");
+
+		// KERNINGS
+		int kernCount = 0;
+		StringBuilder kernBuf = new StringBuilder();
+		for (int i = 0; i < glyphs.size; i++) {
+			for (int j = 0; j < glyphs.size; j++) {
+				Glyph first = glyphs.get(i);
+				Glyph second = glyphs.get(j);
+				int kern = first.getKerning((char)second.id);
+				if (kern != 0) {
+					kernCount++;
+					kernBuf.append(xmlTab).append(xmlOpen).append("kerning first=").append(quote(first.id)).append(" second=")
+						.append(quote(second.id)).append(" amount=").append(quote(kern, true)).append(xmlCloseSelf).append("\n");
+				}
+			}
+		}
+
+		// KERN info
+		buf.append(xmlOpen).append("kernings count=").append(quote(kernCount)).append(xmlClose).append("\n");
+		buf.append(kernBuf);
+
+		if (xml) {
+			buf.append("\t</kernings>\n");
+			buf.append("</font>");
+		}
+
+		String charset = info.charset;
+		if (charset != null && charset.length() == 0) charset = null;
+
+		outFntFile.writeString(buf.toString(), false, charset);
+	}
+
+	/** A utility method which writes the given font data to a file.
+	 * 
+	 * The specified pixmaps are written to the parent directory of <tt>outFntFile</tt>, using that file's name without an
+	 * extension for the PNG file name(s).
+	 * 
+	 * The specified FontInfo is optional, and can be null.
+	 * 
+	 * Typical usage looks like this:
+	 * 
+	 * <pre>
+	 * BitmapFontWriter.writeFont(myFontData, myFontPixmaps, Gdx.files.external(&quot;fonts/output.fnt&quot;), new FontInfo(&quot;Arial&quot;, 16));
+	 * </pre>
+	 * 
+	 * @param fontData the font data
+	 * @param pages the pixmaps to write as PNGs
+	 * @param outFntFile the output file for the font definition
+	 * @param info the optional font info for the header file, can be null */
+	public static void writeFont (BitmapFontData fontData, Pixmap[] pages, FileHandle outFntFile, FontInfo info) {
+		String[] pageRefs = writePixmaps(pages, outFntFile.parent(), outFntFile.nameWithoutExtension());
+
+		// write the font data
+		writeFont(fontData, pageRefs, outFntFile, info, pages[0].getWidth(), pages[0].getHeight());
+	}
+
+	/** A utility method to write the given array of pixmaps to the given output directory, with the specified file name. If the
+	 * pages array is of length 1, then the resulting file ref will look like: "fileName.png".
+	 * 
+	 * If the pages array is greater than length 1, the resulting file refs will be appended with "_N", such as "fileName_0.png",
+	 * "fileName_1.png", "fileName_2.png" etc.
+	 * 
+	 * The returned string array can then be passed to the <tt>writeFont</tt> method.
+	 * 
+	 * Note: None of the pixmaps will be disposed.
+	 * 
+	 * @param pages the pages of pixmap data to write
+	 * @param outputDir the output directory
+	 * @param fileName the file names for the output images
+	 * @return the array of string references to be used with <tt>writeFont</tt> */
+	public static String[] writePixmaps (Pixmap[] pages, FileHandle outputDir, String fileName) {
+		if (pages == null || pages.length == 0)
+			throw new IllegalArgumentException("no pixmaps supplied to BitmapFontWriter.write");
+
+		String[] pageRefs = new String[pages.length];
+
+		for (int i = 0; i < pages.length; i++) {
+			String ref = pages.length == 1 ? (fileName + ".png") : (fileName + "_" + i + ".png");
+
+			// the ref for this image
+			pageRefs[i] = ref;
+
+			// write the PNG in that directory
+			PixmapIO.writePNG(outputDir.child(ref), pages[i]);
+		}
+		return pageRefs;
+	}
+
+	/** A convenience method to write pixmaps by page; typically returned from a PixmapPacker when used alongside
+	 * FreeTypeFontGenerator.
+	 * 
+	 * @param pages the pages containing the Pixmaps
+	 * @param outputDir the output directory
+	 * @param fileName the file name
+	 * @return the file refs */
+	public static String[] writePixmaps (Array<Page> pages, FileHandle outputDir, String fileName) {
+		Pixmap[] pix = new Pixmap[pages.size];
+		for (int i = 0; i < pages.size; i++) {
+			pix[i] = pages.get(i).getPixmap();
+		}
+		return writePixmaps(pix, outputDir, fileName);
+	}
+}
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
index 10f8d7c..b689341 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
@@ -314,8 +314,6 @@ public class ParticleEditor extends JFrame {
 		public void create () {
 			if (spriteBatch != null) return;
 
-			Texture.setEnforcePotImages(false);
-
 			spriteBatch = new SpriteBatch();
 
 			worldCamera = new OrthographicCamera();
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/ColorBleedEffect.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/ColorBleedEffect.java
index cdd42e5..55f7b40 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/ColorBleedEffect.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/ColorBleedEffect.java
@@ -178,4 +178,4 @@ public class ColorBleedEffect {
 			argb = ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8) | ((b & 0xFF) << 0);
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePackerTest.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePackerTest.java
index 95643c8..151c8c9 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePackerTest.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePackerTest.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tools.texturepacker;
 
 import java.util.Random;
@@ -109,4 +110,4 @@ public class TexturePackerTest extends ApplicationAdapter {
 	public static void main (String[] args) throws Exception {
 		new LwjglApplication(new TexturePackerTest(), "", 640, 480);
 	}
-}
\ No newline at end of file
+}
diff --git a/gdx/src/com/badlogic/gdx/Gdx.java b/gdx/src/com/badlogic/gdx/Gdx.java
index b14c6ff..9983bf1 100644
--- a/gdx/src/com/badlogic/gdx/Gdx.java
+++ b/gdx/src/com/badlogic/gdx/Gdx.java
@@ -18,17 +18,12 @@ package com.badlogic.gdx;
 
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 
 /** Environment class holding references to the {@link Application}, {@link Graphics}, {@link Audio}, {@link Files} and
- * {@link Input} instances. The references are held in public static fields. Do not mess with this! This essentially allows you
- * static access to all sub systems. It is your responsiblity to keep things thread safe. Don't use Graphics in a thread that is
- * not the rendering thread or things will go crazy. Really.
+ * {@link Input} instances. The references are held in public static fields which allows static access to all sub systems. Do not
+ * use Graphics in a thread that is not the rendering thread.
  * <p>
- * There's also references to {@link GLCommon}, {@link GL20} and {@link GL30}. The same rules as above apply. Don't
- * mess with this or things will break!
- * <p>
- * This is kind of messy but better than throwing around Graphics and similar instances. I'm aware of the design faux pas.
+ * This is normally a design faux pas but in this case is better than the alternatives.
  * @author mzechner */
 public class Gdx {
 	public static Application app;
@@ -38,7 +33,7 @@ public class Gdx {
 	public static Files files;
 	public static Net net;
 
-	public static GLCommon gl;
+	public static GL20 gl;
 	public static GL20 gl20;
 	public static GL30 gl30;
 }
diff --git a/gdx/src/com/badlogic/gdx/Graphics.java b/gdx/src/com/badlogic/gdx/Graphics.java
index 9c7cd2f..dd81d6d 100644
--- a/gdx/src/com/badlogic/gdx/Graphics.java
+++ b/gdx/src/com/badlogic/gdx/Graphics.java
@@ -18,7 +18,6 @@ package com.badlogic.gdx;
 
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.g2d.Batch;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -28,28 +27,18 @@ import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.graphics.glutils.VertexArray;
 import com.badlogic.gdx.graphics.glutils.VertexBufferObject;
 
-/** <p>
- * This interface encapsulates communication with the graphics processor. Depending on the available hardware and the current
- * {@link Application} configuration, access to the {@link GL20}, {@link GL30}, and/or {@link GLCommon} are provided
- * here.
- * </p>
- * 
+/** This interface encapsulates communication with the graphics processor. Depending on the available hardware and the current
+ * {@link Application} configuration, access to {@link GL20} and {@link GL30} are provided here.
  * <p>
  * If supported by the backend, this interface lets you query the available display modes (graphics resolution and color depth)
  * and change it.
- * </p>
- * 
  * <p>
  * This interface can be used to switch between continuous and non-continuous rendering (see
  * {@link #setContinuousRendering(boolean)}), and to explicitly {@link #requestRendering()}.
- * </p>
- * 
  * <p>
  * There are many more utility classes that are not directly generated by the {@link Graphics} interfaces. See {@link VertexArray}, {@link VertexBufferObject}, {@link IndexBufferObject}, {@link Mesh}, {@link ShaderProgram} and {@link FrameBuffer},
  * {@link BitmapFont}, {@link Batch} and so on. All these classes are managed, meaning they don't need to be reloaded on a context
  * loss. Explore the com.badlogic.gdx.graphics package for more classes that might come in handy.
- * </p>
- * 
  * @author mzechner */
 public interface Graphics {
 	/** Enumeration describing different types of {@link Graphics} implementations.
@@ -115,12 +104,9 @@ public interface Graphics {
 	 * @return whether OpenGL ES 3.0 is available */
 	public boolean isGL30Available ();
 
-	/** @return a {@link GLCommon} instance */
-	public GLCommon getGLCommon ();
-
 	/** @return the {@link GL20} instance */
 	public GL20 getGL20 ();
-	
+
 	/** @return the {@link GL30} instance or null if not supported */
 	public GL30 getGL30 ();
 
diff --git a/gdx/src/com/badlogic/gdx/assets/loaders/resolvers/AbsoluteFileHandleResolver.java b/gdx/src/com/badlogic/gdx/assets/loaders/resolvers/AbsoluteFileHandleResolver.java
new file mode 100644
index 0000000..60116c6
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/assets/loaders/resolvers/AbsoluteFileHandleResolver.java
@@ -0,0 +1,12 @@
+package com.badlogic.gdx.assets.loaders.resolvers;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.assets.loaders.FileHandleResolver;
+import com.badlogic.gdx.files.FileHandle;
+
+public class AbsoluteFileHandleResolver implements FileHandleResolver {
+	@Override
+	public FileHandle resolve (String fileName) {
+		return Gdx.files.absolute(fileName);
+	}
+}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/Camera.java b/gdx/src/com/badlogic/gdx/graphics/Camera.java
index 4d3cbc8..0512e8a 100644
--- a/gdx/src/com/badlogic/gdx/graphics/Camera.java
+++ b/gdx/src/com/badlogic/gdx/graphics/Camera.java
@@ -21,7 +21,6 @@ import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.graphics.g2d.Batch;
 import com.badlogic.gdx.math.Frustum;
-import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector3;
@@ -69,21 +68,19 @@ public abstract class Camera {
 	 * true. Use this after you've manipulated any of the attributes of the camera. */
 	public abstract void update (boolean updateFrustum);
 
-	/** Recalculates the direction of the camera to look at the point (x, y, z).
-	 * This function assumes the up vector is normalized.
+	/** Recalculates the direction of the camera to look at the point (x, y, z). This function assumes the up vector is normalized.
 	 * @param x the x-coordinate of the point to look at
 	 * @param y the x-coordinate of the point to look at
 	 * @param z the x-coordinate of the point to look at */
 	public void lookAt (float x, float y, float z) {
-		tmpVec.set(x,y,z).sub(position).nor();
-		if(!tmpVec.isZero()){
-			float dot = tmpVec.dot(up); //up and direction must ALWAYS be orthonormal vectors
-			if(Math.abs(dot-1) < 0.000000001f){ 
-				//Collinear
+		tmpVec.set(x, y, z).sub(position).nor();
+		if (!tmpVec.isZero()) {
+			float dot = tmpVec.dot(up); // up and direction must ALWAYS be orthonormal vectors
+			if (Math.abs(dot - 1) < 0.000000001f) {
+				// Collinear
 				up.set(direction).scl(-1);
-			}
-			else if(Math.abs(dot+1) < 0.000000001f){ 
-				//Collinear opposite
+			} else if (Math.abs(dot + 1) < 0.000000001f) {
+				// Collinear opposite
 				up.set(direction);
 			}
 			direction.set(tmpVec);
@@ -186,7 +183,7 @@ public abstract class Camera {
 	 * corner, y pointing down, x pointing to the right) as reported by the touch methods in {@link Input}. A z-coordinate of 0
 	 * will return a point on the near plane, a z-coordinate of 1 will return a point on the far plane. This method allows you to
 	 * specify the viewport position and dimensions in the coordinate system expected by
-	 * {@link GLCommon#glViewport(int, int, int, int)}, with the origin in the bottom left corner of the screen.
+	 * {@link GL20#glViewport(int, int, int, int)}, with the origin in the bottom left corner of the screen.
 	 * 
 	 * @param vec the point in window coordinates (origin top left)
 	 * @param viewportX the coordinate of the bottom left corner of the viewport in glViewport coordinates.
@@ -228,8 +225,8 @@ public abstract class Camera {
 	 * small deviation: The viewport is assumed to span the whole screen. The window coordinate system has its origin in the
 	 * <b>bottom</b> left, with the y-axis pointing <b>upwards</b> and the x-axis pointing to the right. This makes it easily
 	 * useable in conjunction with {@link Batch} and similar classes. This method allows you to specify the viewport position and
-	 * dimensions in the coordinate system expected by {@link GLCommon#glViewport(int, int, int, int)}, with the origin in the
-	 * bottom left corner of the screen.
+	 * dimensions in the coordinate system expected by {@link GL20#glViewport(int, int, int, int)}, with the origin in the bottom
+	 * left corner of the screen.
 	 * 
 	 * @param vec the point in object/world space
 	 * @param viewportX the coordinate of the bottom left corner of the viewport in glViewport coordinates.
diff --git a/gdx/src/com/badlogic/gdx/graphics/GL20.java b/gdx/src/com/badlogic/gdx/graphics/GL20.java
index 89f48c2..a8d5989 100644
--- a/gdx/src/com/badlogic/gdx/graphics/GL20.java
+++ b/gdx/src/com/badlogic/gdx/graphics/GL20.java
@@ -22,7 +22,7 @@ import java.nio.IntBuffer;
 
 /** Interface wrapping all the methods of OpenGL ES 2.0
  * @author mzechner */
-public interface GL20 extends GLCommon {
+public interface GL20 {
 	public static final int GL_ES_VERSION_2_0 = 1;
 	public static final int GL_DEPTH_BUFFER_BIT = 0x00000100;
 	public static final int GL_STENCIL_BUFFER_BIT = 0x00000400;
@@ -144,6 +144,7 @@ public interface GL20 extends GLCommon {
 	public static final int GL_DONT_CARE = 0x1100;
 	public static final int GL_FASTEST = 0x1101;
 	public static final int GL_NICEST = 0x1102;
+	public static final int GL_GENERATE_MIPMAP = 0x8191;
 	public static final int GL_GENERATE_MIPMAP_HINT = 0x8192;
 	public static final int GL_BYTE = 0x1400;
 	public static final int GL_UNSIGNED_BYTE = 0x1401;
@@ -331,6 +332,94 @@ public interface GL20 extends GLCommon {
 
 	// Extensions
 	public static final int GL_COVERAGE_BUFFER_BIT_NV = 0x8000;
+	public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
+	public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
+
+	public void glActiveTexture (int texture);
+
+	public void glBindTexture (int target, int texture);
+
+	public void glBlendFunc (int sfactor, int dfactor);
+
+	public void glClear (int mask);
+
+	public void glClearColor (float red, float green, float blue, float alpha);
+
+	public void glClearDepthf (float depth);
+
+	public void glClearStencil (int s);
+
+	public void glColorMask (boolean red, boolean green, boolean blue, boolean alpha);
+
+	public void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border,
+		int imageSize, Buffer data);
+
+	public void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format,
+		int imageSize, Buffer data);
+
+	public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border);
+
+	public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
+
+	public void glCullFace (int mode);
+
+	public void glDeleteTextures (int n, IntBuffer textures);
+
+	public void glDepthFunc (int func);
+
+	public void glDepthMask (boolean flag);
+
+	public void glDepthRangef (float zNear, float zFar);
+
+	public void glDisable (int cap);
+
+	public void glDrawArrays (int mode, int first, int count);
+
+	public void glDrawElements (int mode, int count, int type, Buffer indices);
+
+	public void glEnable (int cap);
+
+	public void glFinish ();
+
+	public void glFlush ();
+
+	public void glFrontFace (int mode);
+
+	public void glGenTextures (int n, IntBuffer textures);
+
+	public int glGetError ();
+
+	public void glGetIntegerv (int pname, IntBuffer params);
+
+	public String glGetString (int name);
+
+	public void glHint (int target, int mode);
+
+	public void glLineWidth (float width);
+
+	public void glPixelStorei (int pname, int param);
+
+	public void glPolygonOffset (float factor, float units);
+
+	public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels);
+
+	public void glScissor (int x, int y, int width, int height);
+
+	public void glStencilFunc (int func, int ref, int mask);
+
+	public void glStencilMask (int mask);
+
+	public void glStencilOp (int fail, int zfail, int zpass);
+
+	public void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type,
+		Buffer pixels);
+
+	public void glTexParameterf (int target, int pname, float param);
+
+	public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
+		Buffer pixels);
+
+	public void glViewport (int x, int y, int width, int height);
 
 	public void glAttachShader (int program, int shader);
 
diff --git a/gdx/src/com/badlogic/gdx/graphics/GLCommon.java b/gdx/src/com/badlogic/gdx/graphics/GLCommon.java
deleted file mode 100644
index 219ff5a..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/GLCommon.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*******************************************************************************
- * Copyright 2011 See AUTHORS file.
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.graphics;
-
-import java.nio.Buffer;
-import java.nio.IntBuffer;
-
-/** This interface defines methods common to GL10, GL11 and GL20.
- * @author mzechner */
-public interface GLCommon {
-	public static final int GL_GENERATE_MIPMAP = 0x8191;
-	public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
-	public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
-
-	public void glActiveTexture (int texture);
-
-	public void glBindTexture (int target, int texture);
-
-	public void glBlendFunc (int sfactor, int dfactor);
-
-	public void glClear (int mask);
-
-	public void glClearColor (float red, float green, float blue, float alpha);
-
-	public void glClearDepthf (float depth);
-
-	public void glClearStencil (int s);
-
-	public void glColorMask (boolean red, boolean green, boolean blue, boolean alpha);
-
-	public void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border,
-		int imageSize, Buffer data);
-
-	public void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format,
-		int imageSize, Buffer data);
-
-	public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border);
-
-	public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
-
-	public void glCullFace (int mode);
-
-	public void glDeleteTextures (int n, IntBuffer textures);
-
-	public void glDepthFunc (int func);
-
-	public void glDepthMask (boolean flag);
-
-	public void glDepthRangef (float zNear, float zFar);
-
-	public void glDisable (int cap);
-
-	public void glDrawArrays (int mode, int first, int count);
-
-	public void glDrawElements (int mode, int count, int type, Buffer indices);
-
-	public void glEnable (int cap);
-
-	public void glFinish ();
-
-	public void glFlush ();
-
-	public void glFrontFace (int mode);
-
-	public void glGenTextures (int n, IntBuffer textures);
-
-	public int glGetError ();
-
-	public void glGetIntegerv (int pname, IntBuffer params);
-
-	public String glGetString (int name);
-
-	public void glHint (int target, int mode);
-
-	public void glLineWidth (float width);
-
-	public void glPixelStorei (int pname, int param);
-
-	public void glPolygonOffset (float factor, float units);
-
-	public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels);
-
-	public void glScissor (int x, int y, int width, int height);
-
-	public void glStencilFunc (int func, int ref, int mask);
-
-	public void glStencilMask (int mask);
-
-	public void glStencilOp (int fail, int zfail, int zpass);
-
-	public void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type,
-		Buffer pixels);
-
-	public void glTexParameterf (int target, int pname, float param);
-
-	public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
-		Buffer pixels);
-
-	public void glViewport (int x, int y, int width, int height);
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/GLTexture.java b/gdx/src/com/badlogic/gdx/graphics/GLTexture.java
index c4b69bd..6db8a68 100644
--- a/gdx/src/com/badlogic/gdx/graphics/GLTexture.java
+++ b/gdx/src/com/badlogic/gdx/graphics/GLTexture.java
@@ -12,267 +12,238 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.graphics;
-
-import java.nio.IntBuffer;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.Pixmap.Blending;
-import com.badlogic.gdx.graphics.Pixmap.Format;
-import com.badlogic.gdx.graphics.Texture.TextureFilter;
-import com.badlogic.gdx.graphics.Texture.TextureWrap;
-import com.badlogic.gdx.graphics.TextureData.TextureDataType;
-import com.badlogic.gdx.graphics.glutils.ETC1TextureData;
-import com.badlogic.gdx.graphics.glutils.FileTextureData;
-import com.badlogic.gdx.graphics.glutils.MipMapGenerator;
-import com.badlogic.gdx.math.MathUtils;
-import com.badlogic.gdx.utils.BufferUtils;
-import com.badlogic.gdx.utils.Disposable;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-/**
- * Class representing an OpenGL texture by its target and handle. 
- * Keeps track of its state like the TextureFilter and TextureWrap.
- * Also provides some (protected) static methods to create TextureData and upload image data. 
- * @author badlogic, Xoppa
- */
-public abstract class GLTexture implements Disposable {
-	/** The target of this texture, used when binding the texture, e.g. GL_TEXTURE_2D */
-	public final int glTarget;
-	protected int glHandle;
-	protected TextureFilter minFilter = TextureFilter.Nearest;
-	protected TextureFilter magFilter = TextureFilter.Nearest;
-	protected TextureWrap uWrap = TextureWrap.ClampToEdge;
-	protected TextureWrap vWrap = TextureWrap.ClampToEdge;
-	
-	/** @return the width of the texture in pixels */
-	public abstract int getWidth();
-	
-	/** @return the height of the texture in pixels */
-	public abstract int getHeight();
-	
-	/** @return the depth of the texture in pixels */
-	public abstract int getDepth();
-	
-	/** Generates a new OpenGL texture with the specified target. */ 
-	public GLTexture(int glTarget) {
-		this(glTarget, createGLHandle());
-	}
-	
-	public GLTexture(int glTarget, int glHandle) {
-		this.glTarget = glTarget;
-		this.glHandle = glHandle;
-	}
-	
-	/** @return whether this texture is managed or not. */
-	public abstract boolean isManaged ();
-	
-	protected abstract void reload();
-	
-	/** Binds this texture. The texture will be bound to the currently active texture unit specified via
-	 * {@link GLCommon#glActiveTexture(int)}. */
-	public void bind () {
-		Gdx.gl.glBindTexture(glTarget, glHandle);
-	}
-
-	/** Binds the texture to the given texture unit. Sets the currently active texture unit via
-	 * {@link GLCommon#glActiveTexture(int)}.
-	 * @param unit the unit (0 to MAX_TEXTURE_UNITS). */
-	public void bind (int unit) {
-		Gdx.gl.glActiveTexture(GL20.GL_TEXTURE0 + unit);
-		Gdx.gl.glBindTexture(glTarget, glHandle);
-	}
-	
-	/** @return The {@link Texture.TextureFilter} used for minification. */
-	public TextureFilter getMinFilter () {
-		return minFilter;
-	}
-
-	/** @return The {@link Texture.TextureFilter} used for magnification. */
-	public TextureFilter getMagFilter () {
-		return magFilter;
-	}
-
-	/** @return The {@link Texture.TextureWrap} used for horizontal (U) texture coordinates. */
-	public TextureWrap getUWrap () {
-		return uWrap;
-	}
-
-	/** @return The {@link Texture.TextureWrap} used for vertical (V) texture coordinates. */
-	public TextureWrap getVWrap () {
-		return vWrap;
-	}
-	
-	/** @return The OpenGL handle for this texture. */
-	public int getTextureObjectHandle () {
-		return glHandle;
-	}
-
-	/** Sets the {@link TextureWrap} for this texture on the u and v axis. Assumes the texture is bound and active!
-	 * @param u the u wrap
-	 * @param v the v wrap */
-	public void unsafeSetWrap(TextureWrap u, TextureWrap v) {
-		unsafeSetWrap(u, v, false);
-	}
-	
-	/** Sets the {@link TextureWrap} for this texture on the u and v axis. Assumes the texture is bound and active!
-	 * @param u the u wrap
-	 * @param v the v wrap 
-	 * @param force True to always set the values, even if they are the same as the current values. */
-	public void unsafeSetWrap(TextureWrap u, TextureWrap v, boolean force) {
-		if (u != null && (force || uWrap != u)) {
-			Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_WRAP_S, u.getGLEnum());
-			uWrap = u;
-		}
-		if (v != null && (force || vWrap != v)) {
-			Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_WRAP_T, v.getGLEnum());
-			vWrap = v;
-		}
-	}
-	
-	/** Sets the {@link TextureWrap} for this texture on the u and v axis. This will bind this texture!
-	 * @param u the u wrap
-	 * @param v the v wrap */
-	public void setWrap (TextureWrap u, TextureWrap v) {
-		this.uWrap = u;
-		this.vWrap = v;
-		bind();
-		Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_WRAP_S, u.getGLEnum());
-		Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_WRAP_T, v.getGLEnum());
-	}
-	
-	/** Sets the {@link TextureFilter} for this texture for minification and magnification.
-	 * Assumes the texture is bound and active!
-	 * @param minFilter the minification filter
-	 * @param magFilter the magnification filter */
-	public void unsafeSetFilter(TextureFilter minFilter, TextureFilter magFilter) {
-		unsafeSetFilter(minFilter, magFilter, false);
-	}
-	
-	
-	/** Sets the {@link TextureFilter} for this texture for minification and magnification.
-	 * Assumes the texture is bound and active!
-	 * @param minFilter the minification filter
-	 * @param magFilter the magnification filter 
-	 * @param force True to always set the values, even if they are the same as the current values. */
-	public void unsafeSetFilter(TextureFilter minFilter, TextureFilter magFilter, boolean force) {
-		if (minFilter != null && (force || this.minFilter != minFilter)) {
-			Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_MIN_FILTER, minFilter.getGLEnum());
-			this.minFilter = minFilter;
-		}
-		if (magFilter != null && (force || this.magFilter != magFilter)) {
-			Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_MAG_FILTER, magFilter.getGLEnum());
-			this.magFilter = magFilter;
-		}
-	}
-
-	/** Sets the {@link TextureFilter} for this texture for minification and magnification.
-	 * This will bind this texture!
-	 * @param minFilter the minification filter
-	 * @param magFilter the magnification filter */
-	public void setFilter (TextureFilter minFilter, TextureFilter magFilter) {
-		this.minFilter = minFilter;
-		this.magFilter = magFilter;
-		bind();
-		Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_MIN_FILTER, minFilter.getGLEnum());
-		Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_MAG_FILTER, magFilter.getGLEnum());
-	}
-	
-	/** Destroys the OpenGL Texture as specified by the glHandle. */
-	protected void delete() {
-		if (glHandle != 0) {
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.Pixmap.Blending;
+import com.badlogic.gdx.graphics.Pixmap.Format;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.Texture.TextureWrap;
+import com.badlogic.gdx.graphics.TextureData.TextureDataType;
+import com.badlogic.gdx.graphics.glutils.ETC1TextureData;
+import com.badlogic.gdx.graphics.glutils.FileTextureData;
+import com.badlogic.gdx.graphics.glutils.MipMapGenerator;
+import com.badlogic.gdx.math.MathUtils;
+import com.badlogic.gdx.utils.BufferUtils;
+import com.badlogic.gdx.utils.Disposable;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+import java.nio.IntBuffer;
+
+/** Class representing an OpenGL texture by its target and handle. Keeps track of its state like the TextureFilter and TextureWrap.
+ * Also provides some (protected) static methods to create TextureData and upload image data.
+ * @author badlogic, Xoppa */
+public abstract class GLTexture implements Disposable {
+	private static final IntBuffer buffer = BufferUtils.newIntBuffer(1);
+
+	/** The target of this texture, used when binding the texture, e.g. GL_TEXTURE_2D */
+	public final int glTarget;
+	protected int glHandle;
+	protected TextureFilter minFilter = TextureFilter.Nearest;
+	protected TextureFilter magFilter = TextureFilter.Nearest;
+	protected TextureWrap uWrap = TextureWrap.ClampToEdge;
+	protected TextureWrap vWrap = TextureWrap.ClampToEdge;
+
+	/** @return the width of the texture in pixels */
+	public abstract int getWidth ();
+
+	/** @return the height of the texture in pixels */
+	public abstract int getHeight ();
+
+	/** @return the depth of the texture in pixels */
+	public abstract int getDepth ();
+
+	/** Generates a new OpenGL texture with the specified target. */
+	public GLTexture (int glTarget) {
+		this(glTarget, createGLHandle());
+	}
+
+	public GLTexture (int glTarget, int glHandle) {
+		this.glTarget = glTarget;
+		this.glHandle = glHandle;
+	}
+
+	/** @return whether this texture is managed or not. */
+	public abstract boolean isManaged ();
+
+	protected abstract void reload ();
+
+	/** Binds this texture. The texture will be bound to the currently active texture unit specified via
+	 * {@link GL20#glActiveTexture(int)}. */
+	public void bind () {
+		Gdx.gl.glBindTexture(glTarget, glHandle);
+	}
+
+	/** Binds the texture to the given texture unit. Sets the currently active texture unit via {@link GL20#glActiveTexture(int)}.
+	 * @param unit the unit (0 to MAX_TEXTURE_UNITS). */
+	public void bind (int unit) {
+		Gdx.gl.glActiveTexture(GL20.GL_TEXTURE0 + unit);
+		Gdx.gl.glBindTexture(glTarget, glHandle);
+	}
+
+	/** @return The {@link Texture.TextureFilter} used for minification. */
+	public TextureFilter getMinFilter () {
+		return minFilter;
+	}
+
+	/** @return The {@link Texture.TextureFilter} used for magnification. */
+	public TextureFilter getMagFilter () {
+		return magFilter;
+	}
+
+	/** @return The {@link Texture.TextureWrap} used for horizontal (U) texture coordinates. */
+	public TextureWrap getUWrap () {
+		return uWrap;
+	}
+
+	/** @return The {@link Texture.TextureWrap} used for vertical (V) texture coordinates. */
+	public TextureWrap getVWrap () {
+		return vWrap;
+	}
+
+	/** @return The OpenGL handle for this texture. */
+	public int getTextureObjectHandle () {
+		return glHandle;
+	}
+
+	/** Sets the {@link TextureWrap} for this texture on the u and v axis. Assumes the texture is bound and active!
+	 * @param u the u wrap
+	 * @param v the v wrap */
+	public void unsafeSetWrap (TextureWrap u, TextureWrap v) {
+		unsafeSetWrap(u, v, false);
+	}
+
+	/** Sets the {@link TextureWrap} for this texture on the u and v axis. Assumes the texture is bound and active!
+	 * @param u the u wrap
+	 * @param v the v wrap
+	 * @param force True to always set the values, even if they are the same as the current values. */
+	public void unsafeSetWrap (TextureWrap u, TextureWrap v, boolean force) {
+		if (u != null && (force || uWrap != u)) {
+			Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_WRAP_S, u.getGLEnum());
+			uWrap = u;
+		}
+		if (v != null && (force || vWrap != v)) {
+			Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_WRAP_T, v.getGLEnum());
+			vWrap = v;
+		}
+	}
+
+	/** Sets the {@link TextureWrap} for this texture on the u and v axis. This will bind this texture!
+	 * @param u the u wrap
+	 * @param v the v wrap */
+	public void setWrap (TextureWrap u, TextureWrap v) {
+		this.uWrap = u;
+		this.vWrap = v;
+		bind();
+		Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_WRAP_S, u.getGLEnum());
+		Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_WRAP_T, v.getGLEnum());
+	}
+
+	/** Sets the {@link TextureFilter} for this texture for minification and magnification. Assumes the texture is bound and active!
+	 * @param minFilter the minification filter
+	 * @param magFilter the magnification filter */
+	public void unsafeSetFilter (TextureFilter minFilter, TextureFilter magFilter) {
+		unsafeSetFilter(minFilter, magFilter, false);
+	}
+
+	/** Sets the {@link TextureFilter} for this texture for minification and magnification. Assumes the texture is bound and active!
+	 * @param minFilter the minification filter
+	 * @param magFilter the magnification filter
+	 * @param force True to always set the values, even if they are the same as the current values. */
+	public void unsafeSetFilter (TextureFilter minFilter, TextureFilter magFilter, boolean force) {
+		if (minFilter != null && (force || this.minFilter != minFilter)) {
+			Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_MIN_FILTER, minFilter.getGLEnum());
+			this.minFilter = minFilter;
+		}
+		if (magFilter != null && (force || this.magFilter != magFilter)) {
+			Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_MAG_FILTER, magFilter.getGLEnum());
+			this.magFilter = magFilter;
+		}
+	}
+
+	/** Sets the {@link TextureFilter} for this texture for minification and magnification. This will bind this texture!
+	 * @param minFilter the minification filter
+	 * @param magFilter the magnification filter */
+	public void setFilter (TextureFilter minFilter, TextureFilter magFilter) {
+		this.minFilter = minFilter;
+		this.magFilter = magFilter;
+		bind();
+		Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_MIN_FILTER, minFilter.getGLEnum());
+		Gdx.gl.glTexParameterf(glTarget, GL20.GL_TEXTURE_MAG_FILTER, magFilter.getGLEnum());
+	}
+
+	/** Destroys the OpenGL Texture as specified by the glHandle. */
+	protected void delete () {
+		if (glHandle != 0) {
 			buffer.put(0, glHandle);
 			buffer.position(0);
-			buffer.limit(1);
-			Gdx.gl.glDeleteTextures(1, buffer);
-			glHandle = 0;
-		}
-	}
-	
-	@Override
-	public void dispose () {
-		delete();
-	}
-	
-	
-	private static boolean enforcePotImages = true;
-	private static final IntBuffer buffer = BufferUtils.newIntBuffer(1);
-	
-	/** @param enforcePotImages whether to enforce power of two images in OpenGL ES 1.0 or not. */
-	public static void setEnforcePotImages (boolean enforcePotImages) {
-		GLTexture.enforcePotImages = enforcePotImages;
-	}
-	
-	public static boolean getEnforcePotImage () {
-		return enforcePotImages;
-	}
-	
-	protected static TextureData createTextureData(FileHandle file, Format format, boolean useMipMaps) {
-		if (file == null)
-			return null;
-		if (file.name().endsWith(".etc1"))
-			return new ETC1TextureData(file, useMipMaps);
-		return new FileTextureData(file, null, format, useMipMaps);
-	}
-	
-	protected static TextureData createTextureData(FileHandle file, boolean useMipMaps) {
-		return createTextureData(file, null, useMipMaps);
-	}
-	
-	protected static int createGLHandle () {
-		buffer.position(0);
-		buffer.limit(buffer.capacity());
-		Gdx.gl.glGenTextures(1, buffer);
-		return buffer.get(0);
-	}
-	
-	protected static void uploadImageData (int target, TextureData data) {
-		if (data == null) {
-			// FIXME: remove texture on target?
-			return;
-		}
-		
-		if (!data.isPrepared()) 
-			data.prepare();
-		
-		if (enforcePotImages && Gdx.gl20 == null
-			&& (!MathUtils.isPowerOfTwo(data.getWidth()) || !MathUtils.isPowerOfTwo(data.getHeight()))) {
-			throw new GdxRuntimeException("Texture width and height must be powers of two: " + data.getWidth() + "x"
-				+ data.getHeight());
-		}
-		
-		final TextureDataType type = data.getType(); 
-		if (type == TextureDataType.Compressed || type == TextureDataType.Float) {
-			data.consumeCompressedData(target);
-			return;
-		}
-		
-		Pixmap pixmap = data.consumePixmap();
-		boolean disposePixmap = data.disposePixmap();
-		if (data.getFormat() != pixmap.getFormat()) {
-			Pixmap tmp = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), data.getFormat());
-			Blending blend = Pixmap.getBlending();
-			Pixmap.setBlending(Blending.None);
-			tmp.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());
-			Pixmap.setBlending(blend);
-			if(data.disposePixmap()) {
-				pixmap.dispose();
-			}
-			pixmap = tmp;
-			disposePixmap = true;
-		}
-
-		Gdx.gl.glPixelStorei(GL20.GL_UNPACK_ALIGNMENT, 1);
-		if (data.useMipMaps()) {
-			MipMapGenerator.generateMipMap(target, pixmap, pixmap.getWidth(), pixmap.getHeight());
-		} else {
-			Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0,
-				pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
-		}
-		if (disposePixmap)
-			pixmap.dispose();
-	}
-}
\ No newline at end of file
+			buffer.limit(1);
+			Gdx.gl.glDeleteTextures(1, buffer);
+			glHandle = 0;
+		}
+	}
+
+	@Override
+	public void dispose () {
+		delete();
+	}
+
+	protected static TextureData createTextureData (FileHandle file, Format format, boolean useMipMaps) {
+		if (file == null) return null;
+		if (file.name().endsWith(".etc1")) return new ETC1TextureData(file, useMipMaps);
+		return new FileTextureData(file, null, format, useMipMaps);
+	}
+
+	protected static TextureData createTextureData (FileHandle file, boolean useMipMaps) {
+		return createTextureData(file, null, useMipMaps);
+	}
+
+	protected static int createGLHandle () {
+		buffer.position(0);
+		buffer.limit(buffer.capacity());
+		Gdx.gl.glGenTextures(1, buffer);
+		return buffer.get(0);
+	}
+
+	protected static void uploadImageData (int target, TextureData data) {
+		if (data == null) {
+			// FIXME: remove texture on target?
+			return;
+		}
+
+		if (!data.isPrepared()) data.prepare();
+
+		final TextureDataType type = data.getType();
+		if (type == TextureDataType.Compressed || type == TextureDataType.Float) {
+			data.consumeCompressedData(target);
+			return;
+		}
+
+		Pixmap pixmap = data.consumePixmap();
+		boolean disposePixmap = data.disposePixmap();
+		if (data.getFormat() != pixmap.getFormat()) {
+			Pixmap tmp = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), data.getFormat());
+			Blending blend = Pixmap.getBlending();
+			Pixmap.setBlending(Blending.None);
+			tmp.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());
+			Pixmap.setBlending(blend);
+			if (data.disposePixmap()) {
+				pixmap.dispose();
+			}
+			pixmap = tmp;
+			disposePixmap = true;
+		}
+
+		Gdx.gl.glPixelStorei(GL20.GL_UNPACK_ALIGNMENT, 1);
+		if (data.useMipMaps()) {
+			MipMapGenerator.generateMipMap(target, pixmap, pixmap.getWidth(), pixmap.getHeight());
+		} else {
+			Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0,
+				pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
+		}
+		if (disposePixmap) pixmap.dispose();
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/Mesh.java b/gdx/src/com/badlogic/gdx/graphics/Mesh.java
index 8e83fb2..acf5d64 100644
--- a/gdx/src/com/badlogic/gdx/graphics/Mesh.java
+++ b/gdx/src/com/badlogic/gdx/graphics/Mesh.java
@@ -106,19 +106,16 @@ public class Mesh implements Disposable {
 		addManagedMesh(Gdx.app, this);
 	}
 
-	/** by jw:
-	 * Creates a new Mesh with the given attributes. 
-	 * Adds extra optimizations for dynamic (frequently modified) meshes.
+	/** by jw: Creates a new Mesh with the given attributes. Adds extra optimizations for dynamic (frequently modified) meshes.
 	 * 
 	 * @param staticVertices whether vertices of this mesh are static or not. Allows for internal optimizations.
 	 * @param staticIndices whether indices of this mesh are static or not. Allows for internal optimizations.
 	 * @param maxVertices the maximum number of vertices this mesh can hold
 	 * @param maxIndices the maximum number of indices this mesh can hold
 	 * @param attributes the {@link VertexAttributes}. Each vertex attribute defines one property of a vertex such as position,
-	 *           normal or texture coordinate 
-	 *           
-	 * @author Jaroslaw Wisniewski <j.wisniewski@appsisle.com>           
-	 **/
+	 *           normal or texture coordinate
+	 * 
+	 * @author Jaroslaw Wisniewski <j.wisniewski@appsisle.com> **/
 	public Mesh (boolean staticVertices, boolean staticIndices, int maxVertices, int maxIndices, VertexAttributes attributes) {
 		vertices = new VertexBufferObject(staticVertices, maxVertices, attributes);
 		indices = new IndexBufferObject(staticIndices, maxIndices);
@@ -126,7 +123,7 @@ public class Mesh implements Disposable {
 
 		addManagedMesh(Gdx.app, this);
 	}
-	
+
 	/** Creates a new Mesh with the given attributes. This is an expert method with no error checking. Use at your own risk.
 	 * 
 	 * @param type the {@link VertexDataType} to be used, VBO or VA.
@@ -151,15 +148,13 @@ public class Mesh implements Disposable {
 		}
 		addManagedMesh(Gdx.app, this);
 	}
-	
-	/**
-	 * Create a new Mesh that is a combination of transformations of the supplied base mesh.
-	 * Not all primitive types, like line strip and triangle strip, can be combined.
+
+	/** Create a new Mesh that is a combination of transformations of the supplied base mesh. Not all primitive types, like line
+	 * strip and triangle strip, can be combined.
 	 * @param isStatic whether this mesh is static or not. Allows for internal optimizations.
-	 * @param transformations the transformations to apply to the meshes 
-	 * @return the combined mesh
-	 */
-	public static Mesh create(boolean isStatic, final Mesh base, final Matrix4[] transformations) {
+	 * @param transformations the transformations to apply to the meshes
+	 * @return the combined mesh */
+	public static Mesh create (boolean isStatic, final Mesh base, final Matrix4[] transformations) {
 		final VertexAttribute posAttr = base.getVertexAttribute(Usage.Position);
 		final int offset = posAttr.offset / 4;
 		final int numComponents = posAttr.numComponents;
@@ -167,47 +162,42 @@ public class Mesh implements Disposable {
 		final int vertexSize = base.getVertexSize() / 4;
 		final int baseSize = numVertices * vertexSize;
 		final int numIndices = base.getNumIndices();
-		
+
 		final float vertices[] = new float[numVertices * vertexSize * transformations.length];
 		final short indices[] = new short[numIndices * transformations.length];
-		
+
 		base.getIndices(indices);
-		
+
 		for (int i = 0; i < transformations.length; i++) {
 			base.getVertices(0, baseSize, vertices, baseSize * i);
 			transform(transformations[i], vertices, vertexSize, offset, numComponents, numVertices * i, numVertices);
-			if (i > 0)
-			for (int j = 0; j < numIndices; j++)
-				indices[(numIndices * i) + j] = (short)(indices[j] + (numVertices * i)); 
+			if (i > 0) for (int j = 0; j < numIndices; j++)
+				indices[(numIndices * i) + j] = (short)(indices[j] + (numVertices * i));
 		}
-		
-		final Mesh result = new Mesh(isStatic, vertices.length/vertexSize, indices.length, base.getVertexAttributes());
+
+		final Mesh result = new Mesh(isStatic, vertices.length / vertexSize, indices.length, base.getVertexAttributes());
 		result.setVertices(vertices);
 		result.setIndices(indices);
 		return result;
 	}
-	
-	/**
-	 * Create a new Mesh that is a combination of the supplied meshes. The meshes must have the same VertexAttributes signature.
+
+	/** Create a new Mesh that is a combination of the supplied meshes. The meshes must have the same VertexAttributes signature.
 	 * Not all primitive types, like line strip and triangle strip, can be combined.
 	 * @param isStatic whether this mesh is static or not. Allows for internal optimizations.
 	 * @param meshes the meshes to combine
-	 * @return the combined mesh
-	 */
-	public static Mesh create(boolean isStatic, final Mesh[] meshes) {
+	 * @return the combined mesh */
+	public static Mesh create (boolean isStatic, final Mesh[] meshes) {
 		return create(isStatic, meshes, null);
 	}
 
-	/**
-	 * Create a new Mesh that is a combination of the supplied meshes. The meshes must have the same VertexAttributes signature.
-	 * If transformations is supplied, it must have the same length as meshes. 
-	 * Not all primitive types, like line strip and triangle strip, can be combined.
+	/** Create a new Mesh that is a combination of the supplied meshes. The meshes must have the same VertexAttributes signature. If
+	 * transformations is supplied, it must have the same length as meshes. Not all primitive types, like line strip and triangle
+	 * strip, can be combined.
 	 * @param isStatic whether this mesh is static or not. Allows for internal optimizations.
 	 * @param meshes the meshes to combine
-	 * @param transformations the transformations to apply to the meshes 
-	 * @return the combined mesh
-	 */
-	public static Mesh create(boolean isStatic, final Mesh[] meshes, final Matrix4[] transformations) {
+	 * @param transformations the transformations to apply to the meshes
+	 * @return the combined mesh */
+	public static Mesh create (boolean isStatic, final Mesh[] meshes, final Matrix4[] transformations) {
 		if (transformations != null && transformations.length < meshes.length)
 			throw new IllegalArgumentException("Not enough transformations specified");
 		final VertexAttributes attributes = meshes[0].getVertexAttributes();
@@ -223,13 +213,13 @@ public class Mesh implements Disposable {
 		final int offset = posAttr.offset / 4;
 		final int numComponents = posAttr.numComponents;
 		final int vertexSize = attributes.vertexSize / 4;
-		
+
 		final float vertices[] = new float[vertCount * vertexSize];
 		final short indices[] = new short[idxCount];
-		
+
 		meshes[0].getVertices(vertices);
 		meshes[0].getIndices(indices);
-		
+
 		int voffset = meshes[0].getNumVertices() * vertexSize;
 		int ioffset = meshes[0].getNumIndices();
 		for (int i = 1; i < meshes.length; i++) {
@@ -241,12 +231,12 @@ public class Mesh implements Disposable {
 				transform(transformations[i], vertices, vertexSize, offset, numComponents, voffset / vertexSize, vsize / vertexSize);
 			mesh.getIndices(indices, ioffset);
 			for (int j = 0; j < isize; j++)
-				indices[ioffset+j] = (short)(indices[ioffset+j] + voffset);
+				indices[ioffset + j] = (short)(indices[ioffset + j] + voffset);
 			voffset += vsize;
 			ioffset += isize;
 		}
-		
-		final Mesh result = new Mesh(isStatic, vertices.length/vertexSize, indices.length, attributes);
+
+		final Mesh result = new Mesh(isStatic, vertices.length / vertexSize, indices.length, attributes);
 		result.setVertices(vertices);
 		result.setIndices(indices);
 		return result;
@@ -255,10 +245,10 @@ public class Mesh implements Disposable {
 	/** Sets the vertices of this Mesh. The attributes are assumed to be given in float format.
 	 * 
 	 * @param vertices the vertices.
-	 * @return the mesh for invocation chaining.*/
+	 * @return the mesh for invocation chaining. */
 	public Mesh setVertices (float[] vertices) {
 		this.vertices.setVertices(vertices, 0, vertices.length);
-		
+
 		return this;
 	}
 
@@ -266,26 +256,26 @@ public class Mesh implements Disposable {
 	 * 
 	 * @param vertices the vertices.
 	 * @param offset the offset into the vertices array
-	 * @param count the number of floats to use 
-	 * @return the mesh for invocation chaining.*/
+	 * @param count the number of floats to use
+	 * @return the mesh for invocation chaining. */
 	public Mesh setVertices (float[] vertices, int offset, int count) {
 		this.vertices.setVertices(vertices, offset, count);
-		
+
 		return this;
 	}
 
 	/** Update (a portion of) the vertices. Does not resize the backing buffer.
 	 * @param targetOffset the offset in number of floats of the mesh part.
-	 * @param source the vertex data to update the mesh part with */ 
+	 * @param source the vertex data to update the mesh part with */
 	public Mesh updateVertices (int targetOffset, float[] source) {
 		return updateVertices(targetOffset, source, 0, source.length);
-	}	
-	
+	}
+
 	/** Update (a portion of) the vertices. Does not resize the backing buffer.
 	 * @param targetOffset the offset in number of floats of the mesh part.
-	 * @param source the vertex data to update the mesh part with 
+	 * @param source the vertex data to update the mesh part with
 	 * @param sourceOffset the offset in number of floats within the source array
-	 * @param count the number of floats to update */ 
+	 * @param count the number of floats to update */
 	public Mesh updateVertices (int targetOffset, float[] source, int sourceOffset, int count) {
 		this.vertices.updateVertices(targetOffset, source, sourceOffset, count);
 		return this;
@@ -296,8 +286,9 @@ public class Mesh implements Disposable {
 	public float[] getVertices (float[] vertices) {
 		return getVertices(0, -1, vertices);
 	}
-	
-	/** Copies the the remaining vertices from the Mesh to the float array. The float array must be large enough to hold the remaining vertices.
+
+	/** Copies the the remaining vertices from the Mesh to the float array. The float array must be large enough to hold the
+	 * remaining vertices.
 	 * @param srcOffset the offset (in number of floats) of the vertices in the mesh to copy
 	 * @param vertices the array to copy the vertices to */
 	public float[] getVertices (int srcOffset, float[] vertices) {
@@ -311,8 +302,9 @@ public class Mesh implements Disposable {
 	public float[] getVertices (int srcOffset, int count, float[] vertices) {
 		return getVertices(srcOffset, count, vertices, 0);
 	}
-	
-	/** Copies the specified vertices from the Mesh to the float array. The float array must be large enough to hold destOffset+count vertices.
+
+	/** Copies the specified vertices from the Mesh to the float array. The float array must be large enough to hold
+	 * destOffset+count vertices.
 	 * @param srcOffset the offset (in number of floats) of the vertices in the mesh to copy
 	 * @param count the amount of floats to copy
 	 * @param vertices the array to copy the vertices to
@@ -322,13 +314,13 @@ public class Mesh implements Disposable {
 		final int max = getNumVertices() * getVertexSize() / 4;
 		if (count == -1) {
 			count = max - srcOffset;
-			if (count > vertices.length - destOffset)
-				count = vertices.length - destOffset;
+			if (count > vertices.length - destOffset) count = vertices.length - destOffset;
 		}
 		if (srcOffset < 0 || count <= 0 || (srcOffset + count) > max || destOffset < 0 || destOffset >= vertices.length)
 			throw new IndexOutOfBoundsException();
 		if ((vertices.length - destOffset) < count)
-			throw new IllegalArgumentException("not enough room in vertices array, has " + vertices.length + " floats, needs " + count);
+			throw new IllegalArgumentException("not enough room in vertices array, has " + vertices.length + " floats, needs "
+				+ count);
 		int pos = getVerticesBuffer().position();
 		getVerticesBuffer().position(srcOffset);
 		getVerticesBuffer().get(vertices, destOffset, count);
@@ -342,7 +334,7 @@ public class Mesh implements Disposable {
 	 * @return the mesh for invocation chaining. */
 	public Mesh setIndices (short[] indices) {
 		this.indices.setIndices(indices, 0, indices.length);
-		
+
 		return this;
 	}
 
@@ -354,7 +346,7 @@ public class Mesh implements Disposable {
 	 * @return the mesh for invocation chaining. */
 	public Mesh setIndices (short[] indices, int offset, int count) {
 		this.indices.setIndices(indices, offset, count);
-		
+
 		return this;
 	}
 
@@ -364,10 +356,11 @@ public class Mesh implements Disposable {
 		getIndices(indices, 0);
 	}
 
-	/** Copies the indices from the Mesh to the short array. The short array must be large enough to hold destOffset + all the Mesh's indices.
-	 * @param indices the array to copy the indices to 
+	/** Copies the indices from the Mesh to the short array. The short array must be large enough to hold destOffset + all the
+	 * Mesh's indices.
+	 * @param indices the array to copy the indices to
 	 * @param destOffset the offset in the indices array to start copying */
-	public void getIndices(short[] indices, int destOffset) {
+	public void getIndices (short[] indices, int destOffset) {
 		if ((indices.length - destOffset) < getNumIndices())
 			throw new IllegalArgumentException("not enough room in indices array, has " + indices.length + " floats, needs "
 				+ getNumIndices());
@@ -403,14 +396,14 @@ public class Mesh implements Disposable {
 	}
 
 	/** Sets whether to bind the underlying {@link VertexArray} or {@link VertexBufferObject} automatically on a call to one of the
-	 * {@link #render(int)} methods or not. Usually you want to use autobind. Manual binding is an expert functionality. There is a
-	 * driver bug on the MSM720xa chips that will fuck up memory if you manipulate the vertices and indices of a Mesh multiple
-	 * times while it is bound. Keep this in mind.
+	 * render methods. Usually you want to use autobind. Manual binding is an expert functionality. There is a driver bug on the
+	 * MSM720xa chips that will fuck up memory if you manipulate the vertices and indices of a Mesh multiple times while it is
+	 * bound. Keep this in mind.
 	 * 
 	 * @param autoBind whether to autobind meshes. */
 	public void setAutoBind (boolean autoBind) {
 		this.autoBind = autoBind;
-	}	
+	}
 
 	/** Binds the underlying {@link VertexBufferObject} and {@link IndexBufferObject} if indices where given. Use this with OpenGL
 	 * ES 2.0 and when auto-bind is disabled.
@@ -423,7 +416,7 @@ public class Mesh implements Disposable {
 	/** Binds the underlying {@link VertexBufferObject} and {@link IndexBufferObject} if indices where given. Use this with OpenGL
 	 * ES 2.0 and when auto-bind is disabled.
 	 * 
-	 * @param shader the shader (does not bind the shader) 
+	 * @param shader the shader (does not bind the shader)
 	 * @param locations array containing the attribute locations. */
 	public void bind (final ShaderProgram shader, final int[] locations) {
 		vertices.bind(shader, locations);
@@ -437,7 +430,7 @@ public class Mesh implements Disposable {
 	public void unbind (final ShaderProgram shader) {
 		unbind(shader, null);
 	}
-	
+
 	/** Unbinds the underlying {@link VertexBufferObject} and {@link IndexBufferObject} is indices were given. Use this with OpenGL
 	 * ES 1.x and when auto-bind is disabled.
 	 * 
@@ -495,9 +488,9 @@ public class Mesh implements Disposable {
 	 * @param offset the offset into the vertex or index buffer
 	 * @param count number of vertices or indices to use */
 	public void render (ShaderProgram shader, int primitiveType, int offset, int count) {
-		render (shader, primitiveType, offset, count, autoBind);
+		render(shader, primitiveType, offset, count, autoBind);
 	}
-	
+
 	/** <p>
 	 * Renders the mesh using the given primitive type. offset specifies the offset into either the vertex buffer or the index
 	 * buffer depending on whether indices are defined. count specifies the number of vertices or indices to use thus count /
@@ -626,59 +619,58 @@ public class Mesh implements Disposable {
 			break;
 		}
 	}
-	
+
 	/** Calculate the {@link BoundingBox} of the specified part.
-	 * @param out the bounding box to store the result in. 
+	 * @param out the bounding box to store the result in.
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the value specified by out. */
-	public BoundingBox calculateBoundingBox(final BoundingBox out, int offset, int count) {
+	public BoundingBox calculateBoundingBox (final BoundingBox out, int offset, int count) {
 		return extendBoundingBox(out.inf(), offset, count);
 	}
-	
+
 	/** Calculate the {@link BoundingBox} of the specified part.
-	 * @param out the bounding box to store the result in. 
+	 * @param out the bounding box to store the result in.
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the value specified by out. */
-	public BoundingBox calculateBoundingBox(final BoundingBox out, int offset, int count, final Matrix4 transform) {
+	public BoundingBox calculateBoundingBox (final BoundingBox out, int offset, int count, final Matrix4 transform) {
 		return extendBoundingBox(out.inf(), offset, count, transform);
 	}
 
 	/** Extends the specified {@link BoundingBox} with the specified part.
-	 * @param out the bounding box to store the result in. 
+	 * @param out the bounding box to store the result in.
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the value specified by out. */
-	public BoundingBox extendBoundingBox(final BoundingBox out, int offset, int count) {
+	public BoundingBox extendBoundingBox (final BoundingBox out, int offset, int count) {
 		return extendBoundingBox(out, offset, count, null);
 	}
-	
+
 	private final Vector3 tmpV = new Vector3();
+
 	/** Extends the specified {@link BoundingBox} with the specified part.
-	 * @param out the bounding box to store the result in. 
+	 * @param out the bounding box to store the result in.
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the value specified by out. */
-	public BoundingBox extendBoundingBox(final BoundingBox out, int offset, int count, final Matrix4 transform) {
+	public BoundingBox extendBoundingBox (final BoundingBox out, int offset, int count, final Matrix4 transform) {
 		int numIndices = getNumIndices();
-		if (offset < 0 || count < 1 || offset + count > numIndices)
-			throw new GdxRuntimeException("Not enough indices");
-		
+		if (offset < 0 || count < 1 || offset + count > numIndices) throw new GdxRuntimeException("Not enough indices");
+
 		final FloatBuffer verts = vertices.getBuffer();
 		final ShortBuffer index = indices.getBuffer();
 		final VertexAttribute posAttrib = getVertexAttribute(Usage.Position);
 		final int posoff = posAttrib.offset / 4;
 		final int vertexSize = vertices.getAttributes().vertexSize / 4;
 		final int end = offset + count;
-		
+
 		switch (posAttrib.numComponents) {
 		case 1:
 			for (int i = offset; i < end; i++) {
 				final int idx = index.get(i) * vertexSize + posoff;
 				tmpV.set(verts.get(idx), 0, 0);
-				if (transform != null)
-					tmpV.mul(transform);
+				if (transform != null) tmpV.mul(transform);
 				out.ext(tmpV);
 			}
 			break;
@@ -686,8 +678,7 @@ public class Mesh implements Disposable {
 			for (int i = offset; i < end; i++) {
 				final int idx = index.get(i) * vertexSize + posoff;
 				tmpV.set(verts.get(idx), verts.get(idx + 1), 0);
-				if (transform != null)
-					tmpV.mul(transform);
+				if (transform != null) tmpV.mul(transform);
 				out.ext(tmpV);
 			}
 			break;
@@ -695,130 +686,124 @@ public class Mesh implements Disposable {
 			for (int i = offset; i < end; i++) {
 				final int idx = index.get(i) * vertexSize + posoff;
 				tmpV.set(verts.get(idx), verts.get(idx + 1), verts.get(idx + 2));
-				if (transform != null)
-					tmpV.mul(transform);
+				if (transform != null) tmpV.mul(transform);
 				out.ext(tmpV);
 			}
 			break;
 		}
 		return out;
 	}
-	
+
 	/** Calculates the squared radius of the bounding sphere around the specified center for the specified part.
 	 * @param centerX The X coordinate of the center of the bounding sphere
 	 * @param centerY The Y coordinate of the center of the bounding sphere
 	 * @param centerZ The Z coordinate of the center of the bounding sphere
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the squared radius of the bounding sphere. */
-	public float calculateRadiusSquared(final float centerX, final float centerY, final float centerZ, int offset, int count, final Matrix4 transform) {
+	public float calculateRadiusSquared (final float centerX, final float centerY, final float centerZ, int offset, int count,
+		final Matrix4 transform) {
 		int numIndices = getNumIndices();
-		if (offset < 0 || count < 1 || offset + count > numIndices)
-			throw new GdxRuntimeException("Not enough indices");
-		
+		if (offset < 0 || count < 1 || offset + count > numIndices) throw new GdxRuntimeException("Not enough indices");
+
 		final FloatBuffer verts = vertices.getBuffer();
 		final ShortBuffer index = indices.getBuffer();
 		final VertexAttribute posAttrib = getVertexAttribute(Usage.Position);
 		final int posoff = posAttrib.offset / 4;
 		final int vertexSize = vertices.getAttributes().vertexSize / 4;
 		final int end = offset + count;
-		
+
 		float result = 0;
-		
+
 		switch (posAttrib.numComponents) {
 		case 1:
 			for (int i = offset; i < end; i++) {
 				final int idx = index.get(i) * vertexSize + posoff;
 				tmpV.set(verts.get(idx), 0, 0);
-				if (transform != null)
-					tmpV.mul(transform);
+				if (transform != null) tmpV.mul(transform);
 				final float r = tmpV.sub(centerX, centerY, centerZ).len2();
-				if (r > result)
-					result = r;
+				if (r > result) result = r;
 			}
 			break;
 		case 2:
 			for (int i = offset; i < end; i++) {
 				final int idx = index.get(i) * vertexSize + posoff;
 				tmpV.set(verts.get(idx), verts.get(idx + 1), 0);
-				if (transform != null)
-					tmpV.mul(transform);
+				if (transform != null) tmpV.mul(transform);
 				final float r = tmpV.sub(centerX, centerY, centerZ).len2();
-				if (r > result)
-					result = r;
+				if (r > result) result = r;
 			}
 			break;
 		case 3:
 			for (int i = offset; i < end; i++) {
 				final int idx = index.get(i) * vertexSize + posoff;
 				tmpV.set(verts.get(idx), verts.get(idx + 1), verts.get(idx + 2));
-				if (transform != null)
-					tmpV.mul(transform);
+				if (transform != null) tmpV.mul(transform);
 				final float r = tmpV.sub(centerX, centerY, centerZ).len2();
-				if (r > result)
-					result = r;
+				if (r > result) result = r;
 			}
 			break;
 		}
 		return result;
 	}
-	
+
 	/** Calculates the radius of the bounding sphere around the specified center for the specified part.
 	 * @param centerX The X coordinate of the center of the bounding sphere
 	 * @param centerY The Y coordinate of the center of the bounding sphere
 	 * @param centerZ The Z coordinate of the center of the bounding sphere
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the radius of the bounding sphere. */
-	public float calculateRadius(final float centerX, final float centerY, final float centerZ, int offset, int count, final Matrix4 transform) {
+	public float calculateRadius (final float centerX, final float centerY, final float centerZ, int offset, int count,
+		final Matrix4 transform) {
 		return (float)Math.sqrt(calculateRadiusSquared(centerX, centerY, centerZ, offset, count, transform));
 	}
-	
+
 	/** Calculates the squared radius of the bounding sphere around the specified center for the specified part.
 	 * @param center The center of the bounding sphere
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the squared radius of the bounding sphere. */
-	public float calculateRadius(final Vector3 center, int offset, int count, final Matrix4 transform) {
+	public float calculateRadius (final Vector3 center, int offset, int count, final Matrix4 transform) {
 		return calculateRadius(center.x, center.y, center.z, offset, count, transform);
 	}
-	
+
 	/** Calculates the squared radius of the bounding sphere around the specified center for the specified part.
 	 * @param centerX The X coordinate of the center of the bounding sphere
 	 * @param centerY The Y coordinate of the center of the bounding sphere
 	 * @param centerZ The Z coordinate of the center of the bounding sphere
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the squared radius of the bounding sphere. */
-	public float calculateRadius(final float centerX, final float centerY, final float centerZ, int offset, int count) {
+	public float calculateRadius (final float centerX, final float centerY, final float centerZ, int offset, int count) {
 		return calculateRadius(centerX, centerY, centerZ, offset, count, null);
 	}
-	
+
 	/** Calculates the squared radius of the bounding sphere around the specified center for the specified part.
 	 * @param center The center of the bounding sphere
 	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
+	 * @param count the amount of indices the part contains.
 	 * @return the squared radius of the bounding sphere. */
-	public float calculateRadius(final Vector3 center, int offset, int count) {
+	public float calculateRadius (final Vector3 center, int offset, int count) {
 		return calculateRadius(center.x, center.y, center.z, offset, count, null);
 	}
-	
+
 	/** Calculates the squared radius of the bounding sphere around the specified center for the specified part.
 	 * @param centerX The X coordinate of the center of the bounding sphere
 	 * @param centerY The Y coordinate of the center of the bounding sphere
 	 * @param centerZ The Z coordinate of the center of the bounding sphere
 	 * @return the squared radius of the bounding sphere. */
-	public float calculateRadius(final float centerX, final float centerY, final float centerZ) {
+	public float calculateRadius (final float centerX, final float centerY, final float centerZ) {
 		return calculateRadius(centerX, centerY, centerZ, 0, getNumIndices(), null);
 	}
-	
+
 	/** Calculates the squared radius of the bounding sphere around the specified center for the specified part.
 	 * @param center The center of the bounding sphere
 	 * @return the squared radius of the bounding sphere. */
-	public float calculateRadius(final Vector3 center) {
+	public float calculateRadius (final Vector3 center) {
 		return calculateRadius(center.x, center.y, center.z, 0, getNumIndices(), null);
 	}
-	
+
 	/** @return the backing shortbuffer holding the indices. Does not have to be a direct buffer on Android! */
 	public ShortBuffer getIndicesBuffer () {
 		return indices.getBuffer();
@@ -904,52 +889,51 @@ public class Mesh implements Disposable {
 
 		setVertices(vertices);
 	}
-	
-	/** 
-	 * Method to transform the positions in the mesh. Normals will be kept as is. This is a potentially slow operation, use with care.
-	 * It will also create a temporary float[] which will be garbage collected.
+
+	/** Method to transform the positions in the mesh. Normals will be kept as is. This is a potentially slow operation, use with
+	 * care. It will also create a temporary float[] which will be garbage collected.
 	 * 
 	 * @param matrix the transformation matrix */
-	public void transform(final Matrix4 matrix) {
+	public void transform (final Matrix4 matrix) {
 		transform(matrix, 0, getNumVertices());
 	}
-	
+
 	// TODO: Protected for now, because transforming a portion works but still copies all vertices
-	public void transform(final Matrix4 matrix, final int start, final int count) {
+	public void transform (final Matrix4 matrix, final int start, final int count) {
 		final VertexAttribute posAttr = getVertexAttribute(Usage.Position);
 		final int posOffset = posAttr.offset / 4;
 		final int stride = getVertexSize() / 4;
 		final int numComponents = posAttr.numComponents;
 		final int numVertices = getNumVertices();
-		
+
 		final float[] vertices = new float[count * stride];
 		getVertices(start * stride, count * stride, vertices);
 		// getVertices(0, vertices.length, vertices);
 		transform(matrix, vertices, stride, posOffset, numComponents, 0, count);
-		//setVertices(vertices, 0, vertices.length);
+		// setVertices(vertices, 0, vertices.length);
 		updateVertices(start * stride, vertices);
 	}
-	
-	/**
-	 * Method to transform the positions in the float array. Normals will be kept as is. This is a potentially slow operation, use with care.
+
+	/** Method to transform the positions in the float array. Normals will be kept as is. This is a potentially slow operation, use
+	 * with care.
 	 * @param matrix the transformation matrix
 	 * @param vertices the float array
 	 * @param vertexSize the number of floats in each vertex
 	 * @param offset the offset within a vertex to the position
 	 * @param dimensions the size of the position
 	 * @param start the vertex to start with
-	 * @param count the amount of vertices to transform
-	 */
-	public static void transform(final Matrix4 matrix, final float[] vertices, int vertexSize, int offset, int dimensions, int start, int count) {
-		if (offset < 0 || dimensions < 1 || (offset + dimensions) > vertexSize)
-			throw new IndexOutOfBoundsException();
+	 * @param count the amount of vertices to transform */
+	public static void transform (final Matrix4 matrix, final float[] vertices, int vertexSize, int offset, int dimensions,
+		int start, int count) {
+		if (offset < 0 || dimensions < 1 || (offset + dimensions) > vertexSize) throw new IndexOutOfBoundsException();
 		if (start < 0 || count < 1 || ((start + count) * vertexSize) > vertices.length)
-			throw new IndexOutOfBoundsException("start = "+start+", count = "+count+", vertexSize = "+vertexSize+", length = "+vertices.length);
-		
+			throw new IndexOutOfBoundsException("start = " + start + ", count = " + count + ", vertexSize = " + vertexSize
+				+ ", length = " + vertices.length);
+
 		final Vector3 tmp = new Vector3();
-		
+
 		int idx = offset + (start * vertexSize);
-		switch(dimensions) {
+		switch (dimensions) {
 		case 1:
 			for (int i = 0; i < count; i++) {
 				tmp.set(vertices[idx], 0, 0).mul(matrix);
@@ -961,7 +945,7 @@ public class Mesh implements Disposable {
 			for (int i = 0; i < count; i++) {
 				tmp.set(vertices[idx], vertices[idx + 1], 0).mul(matrix);
 				vertices[idx] = tmp.x;
-				vertices[idx+1] = tmp.y;
+				vertices[idx + 1] = tmp.y;
 				idx += vertexSize;
 			}
 			break;
@@ -969,30 +953,29 @@ public class Mesh implements Disposable {
 			for (int i = 0; i < count; i++) {
 				tmp.set(vertices[idx], vertices[idx + 1], vertices[idx + 2]).mul(matrix);
 				vertices[idx] = tmp.x;
-				vertices[idx+1] = tmp.y;
-				vertices[idx+2] = tmp.z;
+				vertices[idx + 1] = tmp.y;
+				vertices[idx + 2] = tmp.z;
 				idx += vertexSize;
 			}
 			break;
 		}
 	}
-	
-	/** 
-	 * Method to transform the texture coordinates in the mesh. This is a potentially slow operation, use with care.
-	 * It will also create a temporary float[] which will be garbage collected.
+
+	/** Method to transform the texture coordinates in the mesh. This is a potentially slow operation, use with care. It will also
+	 * create a temporary float[] which will be garbage collected.
 	 * 
 	 * @param matrix the transformation matrix */
-	public void transformUV(final Matrix3 matrix) {
+	public void transformUV (final Matrix3 matrix) {
 		transformUV(matrix, 0, getNumVertices());
 	}
-	
+
 	// TODO: Protected for now, because transforming a portion works but still copies all vertices
-	protected void transformUV(final Matrix3 matrix, final int start, final int count) {
+	protected void transformUV (final Matrix3 matrix, final int start, final int count) {
 		final VertexAttribute posAttr = getVertexAttribute(Usage.TextureCoordinates);
 		final int offset = posAttr.offset / 4;
 		final int vertexSize = getVertexSize() / 4;
 		final int numVertices = getNumVertices();
-		
+
 		final float[] vertices = new float[numVertices * vertexSize];
 		// TODO: getVertices(vertices, start * vertexSize, count * vertexSize);
 		getVertices(0, vertices.length, vertices);
@@ -1000,38 +983,36 @@ public class Mesh implements Disposable {
 		setVertices(vertices, 0, vertices.length);
 		// TODO: setVertices(start * vertexSize, vertices, 0, vertices.length);
 	}
-	
-	/**
-	 * Method to transform the texture coordinates (UV) in the float array. This is a potentially slow operation, use with care.
+
+	/** Method to transform the texture coordinates (UV) in the float array. This is a potentially slow operation, use with care.
 	 * @param matrix the transformation matrix
 	 * @param vertices the float array
 	 * @param vertexSize the number of floats in each vertex
 	 * @param offset the offset within a vertex to the texture location
 	 * @param start the vertex to start with
-	 * @param count the amount of vertices to transform
-	 */
-	public static void transformUV(final Matrix3 matrix, final float[] vertices, int vertexSize, int offset, int start, int count) {
+	 * @param count the amount of vertices to transform */
+	public static void transformUV (final Matrix3 matrix, final float[] vertices, int vertexSize, int offset, int start, int count) {
 		if (start < 0 || count < 1 || ((start + count) * vertexSize) > vertices.length)
-			throw new IndexOutOfBoundsException("start = "+start+", count = "+count+", vertexSize = "+vertexSize+", length = "+vertices.length);
-		
+			throw new IndexOutOfBoundsException("start = " + start + ", count = " + count + ", vertexSize = " + vertexSize
+				+ ", length = " + vertices.length);
+
 		final Vector2 tmp = new Vector2();
-		
+
 		int idx = offset + (start * vertexSize);
 		for (int i = 0; i < count; i++) {
-			tmp.set(vertices[idx], vertices[idx+1]).mul(matrix);
+			tmp.set(vertices[idx], vertices[idx + 1]).mul(matrix);
 			vertices[idx] = tmp.x;
-			vertices[idx+1] = tmp.y;
+			vertices[idx + 1] = tmp.y;
 			idx += vertexSize;
 		}
 	}
-	
+
 	/** Copies this mesh optionally removing duplicate vertices and/or reducing the amount of attributes.
 	 * @param isStatic whether the new mesh is static or not. Allows for internal optimizations.
 	 * @param removeDuplicates whether to remove duplicate vertices if possible. Only the vertices specified by usage are checked.
 	 * @param usage which attributes (if available) to copy
-	 * @return the copy of this mesh
-	 */
-	public Mesh copy(boolean isStatic, boolean removeDuplicates, final int[] usage) {
+	 * @return the copy of this mesh */
+	public Mesh copy (boolean isStatic, boolean removeDuplicates, final int[] usage) {
 		// TODO move this to a copy constructor?
 		// TODO duplicate the buffers without double copying the data if possible.
 		// TODO perhaps move this code to JNI if it turns out being too slow.
@@ -1057,8 +1038,7 @@ public class Mesh implements Disposable {
 				int ai = -1;
 				for (int i = 0; i < usage.length; i++) {
 					VertexAttribute a = getVertexAttribute(usage[i]);
-					if (a == null)
-						continue;
+					if (a == null) continue;
 					for (int j = 0; j < a.numComponents; j++)
 						checks[++idx] = (short)(a.offset + j);
 					attrs[++ai] = new VertexAttribute(a.usage, a.numComponents, a.alias);
@@ -1072,9 +1052,9 @@ public class Mesh implements Disposable {
 				checks[i] = i;
 			newVertexSize = vertexSize;
 		}
-		
+
 		int numIndices = getNumIndices();
-		short[] indices = null;	
+		short[] indices = null;
 		if (numIndices > 0) {
 			indices = new short[numIndices];
 			getIndices(indices);
@@ -1086,14 +1066,12 @@ public class Mesh implements Disposable {
 					short newIndex = -1;
 					if (removeDuplicates) {
 						for (short j = 0; j < size && newIndex < 0; j++) {
-							final int idx2 = j*newVertexSize;
+							final int idx2 = j * newVertexSize;
 							boolean found = true;
 							for (int k = 0; k < checks.length && found; k++) {
-								if (tmp[idx2+k] != vertices[idx1+checks[k]])
-									found = false;
+								if (tmp[idx2 + k] != vertices[idx1 + checks[k]]) found = false;
 							}
-							if (found)
-								newIndex = j;
+							if (found) newIndex = j;
 						}
 					}
 					if (newIndex > 0)
@@ -1101,7 +1079,7 @@ public class Mesh implements Disposable {
 					else {
 						final int idx = size * newVertexSize;
 						for (int j = 0; j < checks.length; j++)
-							tmp[idx+j] = vertices[idx1+checks[j]];
+							tmp[idx + j] = vertices[idx1 + checks[j]];
 						indices[i] = (short)size;
 						size++;
 					}
@@ -1110,7 +1088,7 @@ public class Mesh implements Disposable {
 				numVertices = size;
 			}
 		}
-		
+
 		Mesh result;
 		if (attrs == null)
 			result = new Mesh(isStatic, numVertices, indices == null ? 0 : indices.length, getVertexAttributes());
@@ -1120,12 +1098,11 @@ public class Mesh implements Disposable {
 		result.setIndices(indices);
 		return result;
 	}
-	
+
 	/** Copies this mesh.
 	 * @param isStatic whether the new mesh is static or not. Allows for internal optimizations.
-	 * @return the copy of this mesh
-	 */
-	public Mesh copy(boolean isStatic) {
+	 * @return the copy of this mesh */
+	public Mesh copy (boolean isStatic) {
 		return copy(isStatic, false, null);
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx/graphics/Pixmap.java b/gdx/src/com/badlogic/gdx/graphics/Pixmap.java
index 760d75c..e851681 100644
--- a/gdx/src/com/badlogic/gdx/graphics/Pixmap.java
+++ b/gdx/src/com/badlogic/gdx/graphics/Pixmap.java
@@ -16,14 +16,14 @@
 
 package com.badlogic.gdx.graphics;
 
-import java.io.IOException;
-import java.nio.ByteBuffer;
-
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.g2d.Gdx2DPixmap;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
 /** <p>
  * A Pixmap represents an image in memory. It has a width and height expressed in pixels as well as a {@link Format} specifying
  * the number and order of color components per pixel. Coordinates of pixels are specified with respect to the top left corner of
@@ -327,21 +327,21 @@ public class Pixmap implements Disposable {
 	}
 
 	/** Returns the OpenGL ES format of this Pixmap. Used as the seventh parameter to
-	 * {@link GLCommon#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer)}.
+	 * {@link GL20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer)}.
 	 * @return one of GL_ALPHA, GL_RGB, GL_RGBA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA. */
 	public int getGLFormat () {
 		return pixmap.getGLFormat();
 	}
 
 	/** Returns the OpenGL ES format of this Pixmap. Used as the third parameter to
-	 * {@link GLCommon#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer)}.
+	 * {@link GL20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer)}.
 	 * @return one of GL_ALPHA, GL_RGB, GL_RGBA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA. */
 	public int getGLInternalFormat () {
 		return pixmap.getGLInternalFormat();
 	}
 
 	/** Returns the OpenGL ES type of this Pixmap. Used as the eighth parameter to
-	 * {@link GLCommon#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer)}.
+	 * {@link GL20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer)}.
 	 * @return one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_4_4_4_4 */
 	public int getGLType () {
 		return pixmap.getGLType();
diff --git a/gdx/src/com/badlogic/gdx/graphics/Texture.java b/gdx/src/com/badlogic/gdx/graphics/Texture.java
index f140657..8316d98 100644
--- a/gdx/src/com/badlogic/gdx/graphics/Texture.java
+++ b/gdx/src/com/badlogic/gdx/graphics/Texture.java
@@ -16,9 +16,6 @@
 
 package com.badlogic.gdx.graphics;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.assets.AssetLoaderParameters.LoadedCallback;
@@ -29,37 +26,28 @@ import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.glutils.PixmapTextureData;
 import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-/** <p>
- * A Texture wraps a standard OpenGL ES texture.
- * </p>
- * 
+import java.util.HashMap;
+import java.util.Map;
+
+/** A Texture wraps a standard OpenGL ES texture.
  * <p>
  * A Texture can be managed. If the OpenGL context is lost all managed textures get invalidated. This happens when a user switches
  * to another application or receives an incoming call. Managed textures get reloaded automatically.
- * </p>
- * 
  * <p>
  * A Texture has to be bound via the {@link Texture#bind()} method in order for it to be applied to geometry. The texture will be
- * bound to the currently active texture unit specified via {@link GLCommon#glActiveTexture(int)}.
- * </p>
- * 
+ * bound to the currently active texture unit specified via {@link GL20#glActiveTexture(int)}.
  * <p>
  * You can draw {@link Pixmap}s to a texture at any time. The changes will be automatically uploaded to texture memory. This is of
  * course not extremely fast so use it with care. It also only works with unmanaged textures.
- * </p>
- * 
  * <p>
  * A Texture must be disposed when it is no longer used
- * </p>
- * 
  * @author badlogicgames@gmail.com */
 public class Texture extends GLTexture {
 	private static AssetManager assetManager;
 	final static Map<Application, Array<Texture>> managedTextures = new HashMap<Application, Array<Texture>>();
-	
+
 	public enum TextureFilter {
 		Nearest(GL20.GL_NEAREST), Linear(GL20.GL_LINEAR), MipMap(GL20.GL_LINEAR_MIPMAP_LINEAR), MipMapNearestNearest(
 			GL20.GL_NEAREST_MIPMAP_NEAREST), MipMapLinearNearest(GL20.GL_LINEAR_MIPMAP_NEAREST), MipMapNearestLinear(
@@ -81,7 +69,7 @@ public class Texture extends GLTexture {
 	}
 
 	public enum TextureWrap {
-		MirroredRepeat(GL20.GL_MIRRORED_REPEAT),ClampToEdge(GL20.GL_CLAMP_TO_EDGE), Repeat(GL20.GL_REPEAT);
+		MirroredRepeat(GL20.GL_MIRRORED_REPEAT), ClampToEdge(GL20.GL_CLAMP_TO_EDGE), Repeat(GL20.GL_REPEAT);
 
 		final int glEnum;
 
@@ -95,7 +83,7 @@ public class Texture extends GLTexture {
 	}
 
 	TextureData data;
-	
+
 	public Texture (String internalPath) {
 		this(Gdx.files.internal(internalPath));
 	}
@@ -168,8 +156,8 @@ public class Texture extends GLTexture {
 		if (data.isManaged()) throw new GdxRuntimeException("can't draw to a managed texture");
 
 		bind();
-		Gdx.gl.glTexSubImage2D(glTarget, 0, x, y, pixmap.getWidth(), pixmap.getHeight(), pixmap.getGLFormat(),
-			pixmap.getGLType(), pixmap.getPixels());
+		Gdx.gl.glTexSubImage2D(glTarget, 0, x, y, pixmap.getWidth(), pixmap.getHeight(), pixmap.getGLFormat(), pixmap.getGLType(),
+			pixmap.getPixels());
 	}
 
 	@Override
@@ -181,9 +169,9 @@ public class Texture extends GLTexture {
 	public int getHeight () {
 		return data.getHeight();
 	}
-	
+
 	@Override
-	public int getDepth() {
+	public int getDepth () {
 		return 0;
 	}
 
@@ -204,8 +192,7 @@ public class Texture extends GLTexture {
 		// removal from the asset manager.
 		if (glHandle == 0) return;
 		delete();
-		if (data.isManaged())
-			if (managedTextures.get(Gdx.app) != null) managedTextures.get(Gdx.app).removeValue(this, true);
+		if (data.isManaged()) if (managedTextures.get(Gdx.app) != null) managedTextures.get(Gdx.app).removeValue(this, true);
 	}
 
 	private static void addManagedTexture (Application app, Texture texture) {
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java b/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java
index 285d4a4..caa6a46 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java
@@ -16,13 +16,11 @@
 
 package com.badlogic.gdx.graphics.g2d;
 
-import static com.badlogic.gdx.graphics.g2d.Sprite.SPRITE_SIZE;
-import static com.badlogic.gdx.graphics.g2d.Sprite.VERTEX_SIZE;
+import static com.badlogic.gdx.graphics.g2d.Sprite.*;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.Mesh.VertexDataType;
 import com.badlogic.gdx.graphics.Texture;
@@ -59,8 +57,6 @@ import com.badlogic.gdx.utils.NumberUtils;
  * @author Nathan Sweet */
 public class PolygonSpriteBatch implements Batch {
 	private Mesh mesh;
-	private Mesh[] buffers;
-	private int bufferIndex;
 
 	private final float[] vertices;
 	private final short[] triangles;
@@ -94,27 +90,15 @@ public class PolygonSpriteBatch implements Batch {
 	public int maxTrianglesInBatch = 0;
 
 	/** Constructs a new PolygonSpriteBatch with a size of 2000, the default shader, and one buffer.
-	 * @see PolygonSpriteBatch#PolygonSpriteBatch(int, int, ShaderProgram) */
+	 * @see PolygonSpriteBatch#PolygonSpriteBatch(int, ShaderProgram) */
 	public PolygonSpriteBatch () {
 		this(2000, null);
 	}
 
 	/** Constructs a PolygonSpriteBatch with the default shader and one buffer.
-	 * @see PolygonSpriteBatch#PolygonSpriteBatch(int, int, ShaderProgram) */
+	 * @see PolygonSpriteBatch#PolygonSpriteBatch(int, ShaderProgram) */
 	public PolygonSpriteBatch (int size) {
-		this(size, 1, null);
-	}
-
-	/** Constructs a new PolygonSpriteBatch with one buffer.
-	 * @see PolygonSpriteBatch#PolygonSpriteBatch(int, int, ShaderProgram) */
-	public PolygonSpriteBatch (int size, ShaderProgram defaultShader) {
-		this(size, 1, defaultShader);
-	}
-
-	/** Constructs a PolygonSpriteBatch with the default shader.
-	 * @see PolygonSpriteBatch#PolygonSpriteBatch(int, int, ShaderProgram) */
-	public PolygonSpriteBatch (int size, int buffers) {
-		this(size, buffers, null);
+		this(size, null);
 	}
 
 	/** Constructs a new PolygonSpriteBatch. Sets the projection matrix to an orthographic projection with y-axis point upwards,
@@ -124,20 +108,14 @@ public class PolygonSpriteBatch implements Batch {
 	 * The defaultShader specifies the shader to use. Note that the names for uniforms for this default shader are different than
 	 * the ones expect for shaders set with {@link #setShader(ShaderProgram)}. See {@link SpriteBatch#createDefaultShader()}.
 	 * @param size The max number of vertices and number of triangles in a single batch. Max of 10920.
-	 * @param buffers The number of meshes to use. This is an expert function. It only makes sense with VBOs (see
-	 *           {@link Mesh#forceVBO}).
 	 * @param defaultShader The default shader to use. This is not owned by the PolygonSpriteBatch and must be disposed separately. */
-	public PolygonSpriteBatch (int size, int buffers, ShaderProgram defaultShader) {
+	public PolygonSpriteBatch (int size, ShaderProgram defaultShader) {
 		// 32767 is max index, so 32767 / 3 - (32767 / 3 % 3) = 10920.
 		if (size > 10920) throw new IllegalArgumentException("Can't have more than 10920 triangles per batch: " + size);
 
-		this.buffers = new Mesh[buffers];
-		for (int i = 0; i < buffers; i++) {
-			this.buffers[i] = new Mesh(VertexDataType.VertexArray, false, size, size * 3, new VertexAttribute(Usage.Position, 2,
-				ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.COLOR_ATTRIBUTE),
-				new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
-		}
-		mesh = this.buffers[0];
+		mesh = new Mesh(VertexDataType.VertexArray, false, size, size * 3, new VertexAttribute(Usage.Position, 2,
+			ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.COLOR_ATTRIBUTE),
+			new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
 
 		vertices = new float[size * VERTEX_SIZE];
 		triangles = new short[size * 3];
@@ -177,7 +155,7 @@ public class PolygonSpriteBatch implements Batch {
 		lastTexture = null;
 		drawing = false;
 
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glDepthMask(true);
 		if (isBlendingEnabled()) gl.glDisable(GL20.GL_BLEND);
 
@@ -1142,9 +1120,6 @@ public class PolygonSpriteBatch implements Batch {
 
 		vertexIndex = 0;
 		triangleIndex = 0;
-		bufferIndex++;
-		if (bufferIndex == buffers.length) bufferIndex = 0;
-		this.mesh = buffers[bufferIndex];
 	}
 
 	/** Disables blending for drawing sprites. Calling this within {@link #begin()}/{@link #end()} will flush the batch. */
@@ -1180,8 +1155,7 @@ public class PolygonSpriteBatch implements Batch {
 
 	/** Disposes all resources associated with this PolygonSpriteBatch. */
 	public void dispose () {
-		for (int i = 0; i < buffers.length; i++)
-			buffers[i].dispose();
+		mesh.dispose();
 		if (ownsShader && shader != null) shader.dispose();
 	}
 
@@ -1211,7 +1185,7 @@ public class PolygonSpriteBatch implements Batch {
 		if (drawing) setupMatrices();
 	}
 
-	private void setupMatrices () {		
+	private void setupMatrices () {
 		combinedMatrix.set(projectionMatrix).mul(transformMatrix);
 		if (customShader != null) {
 			customShader.setUniformMatrix("u_projTrans", combinedMatrix);
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java b/gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
index be2045f..9bda850 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
@@ -19,7 +19,6 @@ package com.badlogic.gdx.graphics.g2d;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.Mesh.VertexDataType;
 import com.badlogic.gdx.graphics.Texture;
@@ -36,8 +35,6 @@ import com.badlogic.gdx.utils.NumberUtils;
  * @author Nathan Sweet */
 public class SpriteBatch implements Batch {
 	private Mesh mesh;
-	private Mesh[] buffers;
-	private int currBufferIdx = 0;
 
 	private final float[] vertices;
 	private int idx = 0;
@@ -70,27 +67,15 @@ public class SpriteBatch implements Batch {
 	public int maxSpritesInBatch = 0;
 
 	/** Constructs a new SpriteBatch with a size of 1000, one buffer, and the default shader.
-	 * @see SpriteBatch#SpriteBatch(int, int, ShaderProgram) */
+	 * @see SpriteBatch#SpriteBatch(int, ShaderProgram) */
 	public SpriteBatch () {
-		this(1000, 1, null);
+		this(1000, null);
 	}
 
 	/** Constructs a SpriteBatch with one buffer and the default shader.
-	 * @see SpriteBatch#SpriteBatch(int, int, ShaderProgram) */
+	 * @see SpriteBatch#SpriteBatch(int, ShaderProgram) */
 	public SpriteBatch (int size) {
-		this(size, 1, null);
-	}
-
-	/** Constructs a new SpriteBatch with one buffer.
-	 * @see SpriteBatch#SpriteBatch(int, int, ShaderProgram) */
-	public SpriteBatch (int size, ShaderProgram defaultShader) {
-		this(size, 1, defaultShader);
-	}
-
-	/** Constructs a SpriteBatch with the default shader.
-	 * @see SpriteBatch#SpriteBatch(int, int, ShaderProgram) */
-	public SpriteBatch (int size, int buffers) {
-		this(size, buffers, null);
+		this(size, null);
 	}
 
 	/** Constructs a new SpriteBatch. Sets the projection matrix to an orthographic projection with y-axis point upwards, x-axis
@@ -100,19 +85,14 @@ public class SpriteBatch implements Batch {
 	 * The defaultShader specifies the shader to use. Note that the names for uniforms for this default shader are different than
 	 * the ones expect for shaders set with {@link #setShader(ShaderProgram)}. See {@link #createDefaultShader()}.
 	 * @param size The max number of sprites in a single batch. Max of 5460.
-	 * @param buffers The number of meshes to use. This is an expert function. It only makes sense with VBOs (see
-	 *           {@link Mesh#forceVBO}).
 	 * @param defaultShader The default shader to use. This is not owned by the SpriteBatch and must be disposed separately. */
-	public SpriteBatch (int size, int buffers, ShaderProgram defaultShader) {
+	public SpriteBatch (int size, ShaderProgram defaultShader) {
 		// 32767 is max index, so 32767 / 6 - (32767 / 6 % 3) = 5460.
 		if (size > 5460) throw new IllegalArgumentException("Can't have more than 5460 sprites per batch: " + size);
 
-		this.buffers = new Mesh[buffers];
-		for (int i = 0; i < buffers; i++) {
-			this.buffers[i] = new Mesh(VertexDataType.VertexArray, false, size * 4, size * 6, new VertexAttribute(Usage.Position, 2,
-				ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.COLOR_ATTRIBUTE),
-				new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
-		}
+		mesh = new Mesh(VertexDataType.VertexArray, false, size * 4, size * 6, new VertexAttribute(Usage.Position, 2,
+			ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.COLOR_ATTRIBUTE),
+			new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
 
 		projectionMatrix.setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 
@@ -129,10 +109,7 @@ public class SpriteBatch implements Batch {
 			indices[i + 4] = (short)(j + 3);
 			indices[i + 5] = j;
 		}
-		for (int i = 0; i < buffers; i++) {
-			this.buffers[i].setIndices(indices);
-		}
-		mesh = this.buffers[0];
+		mesh.setIndices(indices);
 
 		if (defaultShader == null) {
 			shader = createDefaultShader();
@@ -197,7 +174,7 @@ public class SpriteBatch implements Batch {
 		lastTexture = null;
 		drawing = false;
 
-		GLCommon gl = Gdx.gl;
+		GL20 gl = Gdx.gl;
 		gl.glDepthMask(true);
 		if (isBlendingEnabled()) gl.glDisable(GL20.GL_BLEND);
 
@@ -927,9 +904,6 @@ public class SpriteBatch implements Batch {
 		mesh.render(customShader != null ? customShader : shader, GL20.GL_TRIANGLES, 0, count);
 
 		idx = 0;
-		currBufferIdx++;
-		if (currBufferIdx == buffers.length) currBufferIdx = 0;
-		this.mesh = buffers[currBufferIdx];
 	}
 
 	@Override
@@ -966,8 +940,7 @@ public class SpriteBatch implements Batch {
 
 	@Override
 	public void dispose () {
-		for (int i = 0; i < buffers.length; i++)
-			buffers[i].dispose();
+		mesh.dispose();
 		if (ownsShader && shader != null) shader.dispose();
 	}
 
@@ -995,7 +968,7 @@ public class SpriteBatch implements Batch {
 		if (drawing) setupMatrices();
 	}
 
-	private void setupMatrices () {		
+	private void setupMatrices () {
 		combinedMatrix.set(projectionMatrix).mul(transformMatrix);
 		if (customShader != null) {
 			customShader.setUniformMatrix("u_projTrans", combinedMatrix);
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
index abccbfd..ca1b100 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
@@ -209,6 +209,7 @@ public abstract class BaseShader implements Shader {
 	private Attributes combinedAttributes = new Attributes();
 	@Override
 	public void render (Renderable renderable) {
+		if(renderable.worldTransform.det3x3() == 0) return;
 		combinedAttributes.clear();
 		if (renderable.environment != null)
 			combinedAttributes.set(renderable.environment);
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
index 1ffae9d..9a58ecc 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
@@ -83,7 +83,7 @@ public class DefaultShader extends BaseShader {
 		public final static Uniform cameraUp = new Uniform("u_cameraUp");
 		
 		public final static Uniform worldTrans = new Uniform("u_worldTrans");
-		public final static Uniform worldViewTrans = new Uniform("u_worldViewTrans");
+		public final static Uniform viewWorldTrans = new Uniform("u_viewWorldTrans");
 		public final static Uniform projViewWorldTrans = new Uniform("u_projViewWorldTrans");
 		public final static Uniform normalMatrix = new Uniform("u_normalMatrix");
 		public final static Uniform bones = new Uniform("u_bones");
@@ -148,11 +148,11 @@ public class DefaultShader extends BaseShader {
 				shader.set(inputID, renderable.worldTransform);
 			}
 		};
-		public final static Setter worldViewTrans = new Setter() {
+		public final static Setter viewWorldTrans = new Setter() {
 			final Matrix4 temp = new Matrix4();
 			@Override public boolean isGlobal (BaseShader shader, int inputID) { return false; }
 			@Override public void set (BaseShader shader, int inputID, Renderable renderable, Attributes combinedAttributes) {
-				shader.set(inputID, temp.set(renderable.worldTransform).mul(shader.camera.view));
+				shader.set(inputID, temp.set(shader.camera.view).mul(renderable.worldTransform));
 			}
 		};
 		public final static Setter projViewWorldTrans = new Setter() {
@@ -419,7 +419,7 @@ public class DefaultShader extends BaseShader {
 		u_time					= register(new Uniform("u_time"));
 		// Object uniforms
 		u_worldTrans			= register(Inputs.worldTrans, Setters.worldTrans);
-		u_viewWorldTrans		= register(Inputs.worldViewTrans, Setters.worldViewTrans);
+		u_viewWorldTrans		= register(Inputs.viewWorldTrans, Setters.viewWorldTrans);
 		u_projViewWorldTrans	= register(Inputs.projViewWorldTrans, Setters.projViewWorldTrans);
 		u_normalMatrix			= register(Inputs.normalMatrix, Setters.normalMatrix);
 		u_bones 					= (renderable.bones != null && config.numBones > 0) ? register(Inputs.bones, new Setters.Bones(config.numBones)) : -1;
diff --git a/gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java b/gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
index 888f706..bbbf286 100644
--- a/gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
+++ b/gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
@@ -19,7 +19,6 @@ package com.badlogic.gdx.graphics.glutils;
 import com.badlogic.gdx.Application.ApplicationType;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Pixmap.Blending;
 import com.badlogic.gdx.graphics.Texture;
@@ -27,7 +26,7 @@ import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class MipMapGenerator {
 
-	private MipMapGenerator() {
+	private MipMapGenerator () {
 		// disallow, static methods only
 	}
 
@@ -41,9 +40,9 @@ public class MipMapGenerator {
 	 * <code>disposePixmap</code> is true, the pixmap will be disposed at the end of the method.
 	 * @param pixmap the Pixmap */
 	public static void generateMipMap (Pixmap pixmap, int textureWidth, int textureHeight) {
-		generateMipMap (GL20.GL_TEXTURE_2D, pixmap, textureWidth, textureHeight);
+		generateMipMap(GL20.GL_TEXTURE_2D, pixmap, textureWidth, textureHeight);
 	}
-	
+
 	/** Sets the image data of the {@link Texture} based on the {@link Pixmap}. The texture must be bound for this to work. If
 	 * <code>disposePixmap</code> is true, the pixmap will be disposed at the end of the method. */
 	public static void generateMipMap (int target, Pixmap pixmap, int textureWidth, int textureHeight) {
@@ -52,7 +51,8 @@ public class MipMapGenerator {
 			return;
 		}
 
-		if (Gdx.app.getType() == ApplicationType.Android || Gdx.app.getType() == ApplicationType.WebGL || Gdx.app.getType() == ApplicationType.iOS) {
+		if (Gdx.app.getType() == ApplicationType.Android || Gdx.app.getType() == ApplicationType.WebGL
+			|| Gdx.app.getType() == ApplicationType.iOS) {
 			generateMipMapGLES20(target, pixmap);
 		} else {
 			generateMipMapDesktop(target, pixmap, textureWidth, textureHeight);
@@ -60,13 +60,16 @@ public class MipMapGenerator {
 	}
 
 	private static void generateMipMapGLES20 (int target, Pixmap pixmap) {
-		Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0, pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
+		Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0,
+			pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
 		Gdx.gl20.glGenerateMipmap(target);
 	}
 
 	private static void generateMipMapDesktop (int target, Pixmap pixmap, int textureWidth, int textureHeight) {
-		if (Gdx.graphics.supportsExtension("GL_ARB_framebuffer_object") || Gdx.graphics.supportsExtension("GL_EXT_framebuffer_object") || Gdx.gl30 != null) {
-			Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0, pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
+		if (Gdx.graphics.supportsExtension("GL_ARB_framebuffer_object")
+			|| Gdx.graphics.supportsExtension("GL_EXT_framebuffer_object") || Gdx.gl30 != null) {
+			Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0,
+				pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
 			Gdx.gl20.glGenerateMipmap(target);
 		} else {
 			generateMipMapCPU(target, pixmap, textureWidth, textureHeight);
diff --git a/gdx/src/com/badlogic/gdx/graphics/glutils/VertexData.java b/gdx/src/com/badlogic/gdx/graphics/glutils/VertexData.java
index 1a46349..d547b22 100644
--- a/gdx/src/com/badlogic/gdx/graphics/glutils/VertexData.java
+++ b/gdx/src/com/badlogic/gdx/graphics/glutils/VertexData.java
@@ -36,46 +36,38 @@ public interface VertexData extends Disposable {
 	/** @return the {@link VertexAttributes} as specified during construction. */
 	public VertexAttributes getAttributes ();
 
-	/** <p>
-	 * Sets the vertices of this VertexData, discarding the old vertex data. The count must equal the number of floats per vertex
+	/** Sets the vertices of this VertexData, discarding the old vertex data. The count must equal the number of floats per vertex
 	 * times the number of vertices to be copied to this VertexData. The order of the vertex attributes must be the same as
 	 * specified at construction time via {@link VertexAttributes}.
-	 * </p>
-	 * 
 	 * <p>
-	 * This can be called in between calls to {@link #bind()} and {@link #unbind()}. The vertex data will be updated instantly.
-	 * </p>
-	 * 
+	 * This can be called in between calls to bind and unbind. The vertex data will be updated instantly.
 	 * @param vertices the vertex data
 	 * @param offset the offset to start copying the data from
 	 * @param count the number of floats to copy */
 	public void setVertices (float[] vertices, int offset, int count);
 
-	/**  Update (a portion of) the vertices. Does not resize the backing buffer.
+	/** Update (a portion of) the vertices. Does not resize the backing buffer.
 	 * @param vertices the vertex data
 	 * @param sourceOffset the offset to start copying the data from
 	 * @param count the number of floats to copy */
 	public void updateVertices (int targetOffset, float[] vertices, int sourceOffset, int count);
-	
-	/** <p>
-	 * Returns the underlying FloatBuffer. If you modify the buffer contents they will be uploaded on the next call to
-	 * {@link #bind()}. If you need immediate uploading use {@link #setVertices(float[], int, int)};
-	 * </p>
-	 * 
+
+	/** Returns the underlying FloatBuffer. If you modify the buffer contents they will be uploaded on the next call to bind. If you
+	 * need immediate uploading use {@link #setVertices(float[], int, int)};
 	 * @return the underlying FloatBuffer holding the vertex data. */
 	public FloatBuffer getBuffer ();
 
 	/** Binds this VertexData for rendering via glDrawArrays or glDrawElements. */
 	public void bind (ShaderProgram shader);
-	
+
 	/** Binds this VertexData for rendering via glDrawArrays or glDrawElements.
 	 * @param locations array containing the attribute locations. */
 	public void bind (ShaderProgram shader, int[] locations);
 
 	/** Unbinds this VertexData. */
 	public void unbind (ShaderProgram shader);
-	
-	/** Unbinds this VertexData. 
+
+	/** Unbinds this VertexData.
 	 * @param locations array containing the attribute locations. */
 	public void unbind (ShaderProgram shader, int[] locations);
 
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java
index 465428a..87a773f 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java
@@ -40,6 +40,8 @@ public abstract class BatchTiledMapRenderer implements TiledMapRenderer, Disposa
 
 	protected boolean ownsSpriteBatch;
 
+	protected float vertices[] = new float[20];
+
 	public TiledMap getMap () {
 		return map;
 	}
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
index 0dac8a6..6360010 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
@@ -30,11 +30,11 @@ import com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile;
 public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
 	private boolean yDown = false;
 
-	public boolean isYdown() {
+	public boolean isYdown () {
 		return yDown;
 	}
 
-	public void setYDown(boolean yDown) {
+	public void setYDown (boolean yDown) {
 		this.yDown = yDown;
 	}
 
@@ -54,10 +54,8 @@ public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
 		super(map, unitScale, batch);
 	}
 
-	private float[] vertices = new float[20];
-
 	@Override
-	public void renderTileLayer(TiledMapTileLayer layer) {
+	public void renderTileLayer (TiledMapTileLayer layer) {
 		final Color batchColor = spriteBatch.getColor();
 		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
 
@@ -73,11 +71,11 @@ public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
 		final float layerTileHeight50 = layerTileHeight * 0.50f;
 		final float layerTileHeight150 = layerTileHeight * 1.50f;
 
-		final int col1 = Math.max(0, (int) (((viewBounds.x - layerTileWidth25) / layerTileWidth75)));
-		final int col2 = Math.min(layerWidth, (int) ((viewBounds.x + viewBounds.width + layerTileWidth75) / layerTileWidth75));
+		final int col1 = Math.max(0, (int)(((viewBounds.x - layerTileWidth25) / layerTileWidth75)));
+		final int col2 = Math.min(layerWidth, (int)((viewBounds.x + viewBounds.width + layerTileWidth75) / layerTileWidth75));
 
-		final int row1 = Math.max(0, (int) ((viewBounds.y / layerTileHeight150)));
-		final int row2 = Math.min(layerHeight, (int) ((viewBounds.y + viewBounds.height + layerTileHeight150) / layerTileHeight));
+		final int row1 = Math.max(0, (int)((viewBounds.y / layerTileHeight150)));
+		final int row2 = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight150) / layerTileHeight));
 
 		final float[] vertices = this.vertices;
 
@@ -87,7 +85,7 @@ public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
 				float y = (col % 2 == (yDown ? 0 : 1) ? 0 : layerTileHeight50) + (layerTileHeight * row);
 
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
-				if(cell == null) {
+				if (cell == null) {
 					x += layerTileWidth;
 					continue;
 				}
@@ -170,11 +168,11 @@ public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
 				}
 			}
 		}
-		
+
 	}
 
 	@Override
-	public void renderObject(MapObject object) {
+	public void renderObject (MapObject object) {
 
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
index 5760d7d..ca70af5 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
@@ -29,27 +29,26 @@ import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
 import com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell;
 
 public class IsometricStaggeredTiledMapRenderer extends BatchTiledMapRenderer {
-	private float[] vertices = new float[20];
 
-	public IsometricStaggeredTiledMapRenderer(TiledMap map) {
+	public IsometricStaggeredTiledMapRenderer (TiledMap map) {
 		super(map);
 	}
 
-	public IsometricStaggeredTiledMapRenderer(TiledMap map, Batch batch) {
+	public IsometricStaggeredTiledMapRenderer (TiledMap map, Batch batch) {
 		super(map, batch);
 	}
 
-	public IsometricStaggeredTiledMapRenderer(TiledMap map, float unitScale) {
+	public IsometricStaggeredTiledMapRenderer (TiledMap map, float unitScale) {
 		super(map, unitScale);
 	}
 
-	public IsometricStaggeredTiledMapRenderer(TiledMap map, float unitScale, Batch batch) {
+	public IsometricStaggeredTiledMapRenderer (TiledMap map, float unitScale, Batch batch) {
 		super(map, unitScale, batch);
 	}
 
 	@Override
 	public void renderObject (MapObject object) {
-		
+
 	}
 
 	@Override
@@ -57,13 +56,24 @@ public class IsometricStaggeredTiledMapRenderer extends BatchTiledMapRenderer {
 		final Color batchColor = spriteBatch.getColor();
 		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
 
-		float tileWidth = layer.getTileWidth() * unitScale;
-		float tileHeight = layer.getTileHeight() * unitScale;
-		float halfTileWidth = tileWidth * 0.5f;
-		float halfTileHeight = tileHeight * 0.5f;
+		final int layerWidth = layer.getWidth();
+		final int layerHeight = layer.getHeight();
+
+		final float layerTileWidth = layer.getTileWidth() * unitScale;
+		final float layerTileHeight = layer.getTileHeight() * unitScale;
+
+		final float layerTileWidth50 = layerTileWidth * 0.50f;
+		final float layerTileHeight50 = layerTileHeight * 0.50f;
+
+		final int minX = Math.max(0, (int)(((viewBounds.x - layerTileWidth50) / layerTileWidth)));
+		final int maxX = Math.min(layerWidth, (int)((viewBounds.x + viewBounds.width + layerTileWidth + layerTileWidth50) / layerTileWidth));
+
+		final int minY = Math.max(0, (int)(((viewBounds.y - layerTileHeight) / layerTileHeight)));
+		final int maxY = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight50));
 
-		for (int y = layer.getHeight() - 1; y >= 0; y--) {
-			for (int x = layer.getWidth() - 1; x >= 0; x--) {
+		for (int y = maxY - 1; y >= minY; y--) {
+			float offsetX = (y % 2 == 1) ? layerTileWidth50 : 0;
+			for (int x = maxX - 1; x >= minX; x--) {
 				final TiledMapTileLayer.Cell cell = layer.getCell(x, y);
 				if (cell == null) continue;
 				final TiledMapTile tile = cell.getTile();
@@ -74,8 +84,8 @@ public class IsometricStaggeredTiledMapRenderer extends BatchTiledMapRenderer {
 					final int rotations = cell.getRotation();
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = (x * tileWidth) - ((y % 2 == 1) ? halfTileWidth : 0);
-					float y1 = y * halfTileHeight;
+					float x1 = x * layerTileWidth - offsetX;
+					float y1 = y * layerTileHeight50;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 
@@ -128,52 +138,51 @@ public class IsometricStaggeredTiledMapRenderer extends BatchTiledMapRenderer {
 
 					if (rotations != 0) {
 						switch (rotations) {
-							case Cell.ROTATE_90: {
-								float tempV = vertices[V1];
-								vertices[V1] = vertices[V2];
-								vertices[V2] = vertices[V3];
-								vertices[V3] = vertices[V4];
-								vertices[V4] = tempV;
-
-								float tempU = vertices[U1];
-								vertices[U1] = vertices[U2];
-								vertices[U2] = vertices[U3];
-								vertices[U3] = vertices[U4];
-								vertices[U4] = tempU;
-								break;
-							}
-							case Cell.ROTATE_180: {
-								float tempU = vertices[U1];
-								vertices[U1] = vertices[U3];
-								vertices[U3] = tempU;
-								tempU = vertices[U2];
-								vertices[U2] = vertices[U4];
-								vertices[U4] = tempU;
-								float tempV = vertices[V1];
-								vertices[V1] = vertices[V3];
-								vertices[V3] = tempV;
-								tempV = vertices[V2];
-								vertices[V2] = vertices[V4];
-								vertices[V4] = tempV;
-								break;
-							}
-							case Cell.ROTATE_270: {
-								float tempV = vertices[V1];
-								vertices[V1] = vertices[V4];
-								vertices[V4] = vertices[V3];
-								vertices[V3] = vertices[V2];
-								vertices[V2] = tempV;
-
-								float tempU = vertices[U1];
-								vertices[U1] = vertices[U4];
-								vertices[U4] = vertices[U3];
-								vertices[U3] = vertices[U2];
-								vertices[U2] = tempU;
-								break;
-							}
+						case Cell.ROTATE_90: {
+							float tempV = vertices[V1];
+							vertices[V1] = vertices[V2];
+							vertices[V2] = vertices[V3];
+							vertices[V3] = vertices[V4];
+							vertices[V4] = tempV;
+
+							float tempU = vertices[U1];
+							vertices[U1] = vertices[U2];
+							vertices[U2] = vertices[U3];
+							vertices[U3] = vertices[U4];
+							vertices[U4] = tempU;
+							break;
+						}
+						case Cell.ROTATE_180: {
+							float tempU = vertices[U1];
+							vertices[U1] = vertices[U3];
+							vertices[U3] = tempU;
+							tempU = vertices[U2];
+							vertices[U2] = vertices[U4];
+							vertices[U4] = tempU;
+							float tempV = vertices[V1];
+							vertices[V1] = vertices[V3];
+							vertices[V3] = tempV;
+							tempV = vertices[V2];
+							vertices[V2] = vertices[V4];
+							vertices[V4] = tempV;
+							break;
+						}
+						case Cell.ROTATE_270: {
+							float tempV = vertices[V1];
+							vertices[V1] = vertices[V4];
+							vertices[V4] = vertices[V3];
+							vertices[V3] = vertices[V2];
+							vertices[V2] = tempV;
+
+							float tempU = vertices[U1];
+							vertices[U1] = vertices[U4];
+							vertices[U4] = vertices[U3];
+							vertices[U3] = vertices[U2];
+							vertices[U2] = tempU;
+							break;
+						}
 						}
 					}
-
 					spriteBatch.draw(region.getTexture(), vertices, 0, 20);
 				}
 			}
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
index 3f8e336..5e153db 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
@@ -28,34 +28,33 @@ import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
 import com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell;
 
 public class IsometricTiledMapRenderer extends BatchTiledMapRenderer {
-	private float[] vertices = new float[20];
 
-	public IsometricTiledMapRenderer(TiledMap map) {
+	public IsometricTiledMapRenderer (TiledMap map) {
 		super(map);
 	}
 
-	public IsometricTiledMapRenderer(TiledMap map, Batch batch) {
+	public IsometricTiledMapRenderer (TiledMap map, Batch batch) {
 		super(map, batch);
 	}
 
-	public IsometricTiledMapRenderer(TiledMap map, float unitScale) {
+	public IsometricTiledMapRenderer (TiledMap map, float unitScale) {
 		super(map, unitScale);
-	}	
+	}
 
-	public IsometricTiledMapRenderer(TiledMap map, float unitScale, Batch batch) {
+	public IsometricTiledMapRenderer (TiledMap map, float unitScale, Batch batch) {
 		super(map, unitScale, batch);
 	}
 
 	@Override
 	public void renderObject (MapObject object) {
-		
+
 	}
 
 	@Override
 	public void renderTileLayer (TiledMapTileLayer layer) {
 		final Color batchColor = spriteBatch.getColor();
 		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
-	
+
 		int col1 = 0;
 		int col2 = layer.getWidth() - 1;
 
@@ -73,7 +72,7 @@ public class IsometricTiledMapRenderer extends BatchTiledMapRenderer {
 				float y = (row * halfTileHeight) - (col * halfTileHeight);
 
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
-				if(cell == null) continue;
+				if (cell == null) continue;
 				final TiledMapTile tile = cell.getTile();
 
 				if (tile != null) {
@@ -135,49 +134,49 @@ public class IsometricTiledMapRenderer extends BatchTiledMapRenderer {
 					}
 					if (rotations != 0) {
 						switch (rotations) {
-							case Cell.ROTATE_90: {
-								float tempV = vertices[V1];
-								vertices[V1] = vertices[V2];
-								vertices[V2] = vertices[V3];
-								vertices[V3] = vertices[V4];
-								vertices[V4] = tempV;
-
-								float tempU = vertices[U1];
-								vertices[U1] = vertices[U2];
-								vertices[U2] = vertices[U3];
-								vertices[U3] = vertices[U4];
-								vertices[U4] = tempU;
-								break;
-							}
-							case Cell.ROTATE_180: {
-								float tempU = vertices[U1];
-								vertices[U1] = vertices[U3];
-								vertices[U3] = tempU;
-								tempU = vertices[U2];
-								vertices[U2] = vertices[U4];
-								vertices[U4] = tempU;
-								float tempV = vertices[V1];
-								vertices[V1] = vertices[V3];
-								vertices[V3] = tempV;
-								tempV = vertices[V2];
-								vertices[V2] = vertices[V4];
-								vertices[V4] = tempV;
-								break;
-							}
-							case Cell.ROTATE_270: {
-								float tempV = vertices[V1];
-								vertices[V1] = vertices[V4];
-								vertices[V4] = vertices[V3];
-								vertices[V3] = vertices[V2];
-								vertices[V2] = tempV;
-
-								float tempU = vertices[U1];
-								vertices[U1] = vertices[U4];
-								vertices[U4] = vertices[U3];
-								vertices[U3] = vertices[U2];
-								vertices[U2] = tempU;
-								break;
-							}
+						case Cell.ROTATE_90: {
+							float tempV = vertices[V1];
+							vertices[V1] = vertices[V2];
+							vertices[V2] = vertices[V3];
+							vertices[V3] = vertices[V4];
+							vertices[V4] = tempV;
+
+							float tempU = vertices[U1];
+							vertices[U1] = vertices[U2];
+							vertices[U2] = vertices[U3];
+							vertices[U3] = vertices[U4];
+							vertices[U4] = tempU;
+							break;
+						}
+						case Cell.ROTATE_180: {
+							float tempU = vertices[U1];
+							vertices[U1] = vertices[U3];
+							vertices[U3] = tempU;
+							tempU = vertices[U2];
+							vertices[U2] = vertices[U4];
+							vertices[U4] = tempU;
+							float tempV = vertices[V1];
+							vertices[V1] = vertices[V3];
+							vertices[V3] = tempV;
+							tempV = vertices[V2];
+							vertices[V2] = vertices[V4];
+							vertices[V4] = tempV;
+							break;
+						}
+						case Cell.ROTATE_270: {
+							float tempV = vertices[V1];
+							vertices[V1] = vertices[V4];
+							vertices[V4] = vertices[V3];
+							vertices[V3] = vertices[V2];
+							vertices[V2] = tempV;
+
+							float tempU = vertices[U1];
+							vertices[U1] = vertices[U4];
+							vertices[U4] = vertices[U3];
+							vertices[U3] = vertices[U2];
+							vertices[U2] = tempU;
+							break;
+						}
 						}
 					}
 					spriteBatch.draw(region.getTexture(), vertices, 0, 20);
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
index 5c823f0..673ced8 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
@@ -47,7 +47,6 @@ import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
 import com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell;
 
 public class OrthogonalTiledMapRenderer extends BatchTiledMapRenderer {
-	private float[] vertices = new float[20];
 
 	public OrthogonalTiledMapRenderer(TiledMap map) {
 		super(map);
diff --git a/gdx/src/com/badlogic/gdx/math/Intersector.java b/gdx/src/com/badlogic/gdx/math/Intersector.java
index 46b6550..06b54f5 100644
--- a/gdx/src/com/badlogic/gdx/math/Intersector.java
+++ b/gdx/src/com/badlogic/gdx/math/Intersector.java
@@ -468,7 +468,7 @@ public final class Intersector {
 			}
 		}
 		// min z
-		if (ray.origin.z <= box.min.y && ray.direction.z > 0) {
+		if (ray.origin.z <= box.min.z && ray.direction.z > 0) {
 			t = (box.min.z - ray.origin.z) / ray.direction.z;
 			if (t >= 0) {
 				Vector3.tmp3.set(ray.direction).scl(t).add(ray.origin);
diff --git a/gdx/src/com/badlogic/gdx/math/MathUtils.java b/gdx/src/com/badlogic/gdx/math/MathUtils.java
index 92ed23c..2a43353 100644
--- a/gdx/src/com/badlogic/gdx/math/MathUtils.java
+++ b/gdx/src/com/badlogic/gdx/math/MathUtils.java
@@ -262,4 +262,20 @@ public class MathUtils {
 	static public boolean isZero(float value, float tolerance){
 		return Math.abs(value) <= tolerance;
 	}
+	
+	/** Returns true if a is nearly equal to b.
+	 * The function uses the default floating error tolerance.
+	 * @param a the first value.
+	 * @param b the second value. */
+	static public boolean isEqual(float a, float b){
+		return Math.abs(a-b) <= FLOAT_ROUNDING_ERROR;
+	}
+	
+	/** Returns true if a is nearly equal to b.
+	 * @param a the first value.
+	 * @param b the second value. 
+	 * @param tolerance represent an upper bound below which the value is considered zero. */
+	static public boolean isEqual(float a, float b, float tolerance){
+		return Math.abs(a-b) <= tolerance;
+	}
 }
diff --git a/gdx/src/com/badlogic/gdx/math/Matrix3.java b/gdx/src/com/badlogic/gdx/math/Matrix3.java
index 3f50596..c7e65d9 100644
--- a/gdx/src/com/badlogic/gdx/math/Matrix3.java
+++ b/gdx/src/com/badlogic/gdx/math/Matrix3.java
@@ -130,6 +130,24 @@ public class Matrix3 implements Serializable {
 		return this;
 	}
 
+	public Matrix3 setToRotation (Vector3 axis, float degrees) {
+		return setToRotation(axis, MathUtils.cosDeg(degrees), MathUtils.sinDeg(degrees));
+	}
+	
+	public Matrix3 setToRotation (Vector3 axis, float cos, float sin) {
+	    float oc = 1.0f - cos;
+	    val[M00] = oc * axis.x * axis.x + cos;
+	    val[M10] = oc * axis.x * axis.y - axis.z * sin;
+	    val[M20] = oc * axis.z * axis.x + axis.y * sin;
+	    val[M01] = oc * axis.x * axis.y + axis.z * sin;  
+	    val[M11] = oc * axis.y * axis.y + cos;           
+	    val[M21] = oc * axis.y * axis.z - axis.x * sin;
+	    val[M02] = oc * axis.z * axis.x - axis.y * sin; 
+	    val[M12] = oc * axis.y * axis.z + axis.x * sin;  
+	    val[M22] = oc * axis.z * axis.z + cos;
+		return this;
+	}
+	
 	/** Sets this matrix to a translation matrix.
 	 * @param x the translation in x
 	 * @param y the translation in y
diff --git a/gdx/src/com/badlogic/gdx/math/Matrix4.java b/gdx/src/com/badlogic/gdx/math/Matrix4.java
index d2bb849..3a3a7d6 100644
--- a/gdx/src/com/badlogic/gdx/math/Matrix4.java
+++ b/gdx/src/com/badlogic/gdx/math/Matrix4.java
@@ -450,6 +450,12 @@ public class Matrix4 implements Serializable {
 			+ val[M10] * val[M21] * val[M02] * val[M33] + val[M20] * val[M01] * val[M12] * val[M33] - val[M00] * val[M21] * val[M12]
 			* val[M33] - val[M10] * val[M01] * val[M22] * val[M33] + val[M00] * val[M11] * val[M22] * val[M33];
 	}
+	
+	/** @return The determinant of the 3x3 upper left matrix */
+	public float det3x3 () {
+		return val[M00] * val[M11] * val[M22] + val[M01] * val[M12] * val[M20] + val[M02] * val[M10] * val[M21] - val[M00]
+			* val[M12] * val[M21] - val[M01] * val[M10] * val[M22] - val[M02] * val[M11] * val[M20];
+	}
 
 	/** Sets the matrix to a projection matrix with a near- and far plane, a field of view in degrees and an aspect ratio.
 	 * 
diff --git a/gdx/src/com/badlogic/gdx/math/Quaternion.java b/gdx/src/com/badlogic/gdx/math/Quaternion.java
index 72f8fd3..cc8ac29 100644
--- a/gdx/src/com/badlogic/gdx/math/Quaternion.java
+++ b/gdx/src/com/badlogic/gdx/math/Quaternion.java
@@ -259,7 +259,18 @@ public class Quaternion implements Serializable {
 	public Quaternion idt () {
 		return this.set(0, 0, 0, 1);
 	}
-
+	
+	/** @return If this quaternion is an identity Quaternion */
+	public boolean isIdentity(){
+		return MathUtils.isZero(x) && MathUtils.isZero(y) && MathUtils.isZero(z) && MathUtils.isEqual(w, 1f);
+	}
+	
+	/** @return If this quaternion is an identity Quaternion */
+	public boolean isIdentity(float tolerance){
+		return 	MathUtils.isZero(x, tolerance) && MathUtils.isZero(y, tolerance) && 
+					MathUtils.isZero(z, tolerance) && MathUtils.isEqual(w, 1f, tolerance);
+	}
+	
 	// todo : the setFromAxis(v3,float) method should replace the set(v3,float) method
 	/** Sets the quaternion components from the given axis and angle around that axis.
 	 * 
@@ -391,38 +402,37 @@ public class Quaternion implements Serializable {
 		final float t = xx + yy + zz;
 
 		// we protect the division by s by ensuring that s>=1
-		double x, y, z, w;
 		if (t >= 0) { // |w| >= .5
-			double s = Math.sqrt(t + 1); // |s|>=1 ...
-			w = 0.5 * s;
-			s = 0.5 / s; // so this division isn't bad
+			float s = (float)Math.sqrt(t + 1); // |s|>=1 ...
+			w = 0.5f * s;
+			s = 0.5f / s; // so this division isn't bad
 			x = (zy - yz) * s;
 			y = (xz - zx) * s;
 			z = (yx - xy) * s;
 		} else if ((xx > yy) && (xx > zz)) {
-			double s = Math.sqrt(1.0 + xx - yy - zz); // |s|>=1
-			x = s * 0.5; // |x| >= .5
-			s = 0.5 / s;
+			float s = (float)Math.sqrt(1.0 + xx - yy - zz); // |s|>=1
+			x = s * 0.5f; // |x| >= .5
+			s = 0.5f / s;
 			y = (yx + xy) * s;
 			z = (xz + zx) * s;
 			w = (zy - yz) * s;
 		} else if (yy > zz) {
-			double s = Math.sqrt(1.0 + yy - xx - zz); // |s|>=1
-			y = s * 0.5; // |y| >= .5
-			s = 0.5 / s;
+			float s = (float)Math.sqrt(1.0 + yy - xx - zz); // |s|>=1
+			y = s * 0.5f; // |y| >= .5
+			s = 0.5f / s;
 			x = (yx + xy) * s;
 			z = (zy + yz) * s;
 			w = (xz - zx) * s;
 		} else {
-			double s = Math.sqrt(1.0 + zz - xx - yy); // |s|>=1
-			z = s * 0.5; // |z| >= .5
-			s = 0.5 / s;
+			float s = (float)Math.sqrt(1.0 + zz - xx - yy); // |s|>=1
+			z = s * 0.5f; // |z| >= .5
+			s = 0.5f / s;
 			x = (xz + zx) * s;
 			y = (zy + yz) * s;
 			w = (yx - xy) * s;
 		}
 
-		return set((float)x, (float)y, (float)z, (float)w);
+		return this;
 	}
 	
 	/** Set this quaternion to the rotation between two vectors.
diff --git a/gdx/src/com/badlogic/gdx/math/Vector2.java b/gdx/src/com/badlogic/gdx/math/Vector2.java
index 6f2670c..b16102d 100644
--- a/gdx/src/com/badlogic/gdx/math/Vector2.java
+++ b/gdx/src/com/badlogic/gdx/math/Vector2.java
@@ -105,7 +105,7 @@ public class Vector2 implements Serializable, Vector<Vector2> {
 		}
 		return this;
 	}
-
+	
 	/** Adds the given vector to this vector
 	 * @param v The vector
 	 * @return This vector for chaining */
diff --git a/gdx/src/com/badlogic/gdx/math/Vector3.java b/gdx/src/com/badlogic/gdx/math/Vector3.java
index 9ce81cb..ef7eadb 100644
--- a/gdx/src/com/badlogic/gdx/math/Vector3.java
+++ b/gdx/src/com/badlogic/gdx/math/Vector3.java
@@ -416,6 +416,16 @@ public class Vector3 implements Serializable, Vector<Vector3> {
 			* l_mat[Matrix4.M21] + z * l_mat[Matrix4.M22] + l_mat[Matrix4.M23]);
 	}
 
+	/** Left-multiplies the vector by the given matrix.
+	 * @param matrix The matrix
+	 * @return This vector for chaining */
+	public Vector3 mul (Matrix3 matrix) {
+		final float l_mat[] = matrix.val;
+		return set(x * l_mat[Matrix3.M00] + y * l_mat[Matrix3.M01] + z * l_mat[Matrix3.M02], x
+			* l_mat[Matrix3.M10] + y * l_mat[Matrix3.M11] + z * l_mat[Matrix3.M12], x * l_mat[Matrix3.M20] + y
+			* l_mat[Matrix3.M21] + z * l_mat[Matrix3.M22]);
+	}
+	
 	/** Multiplies the vector by the given {@link Quaternion}.
 	 * @return This vector for chaining */	
 	public Vector3 mul (final Quaternion quat) {
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ArraySelection.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ArraySelection.java
index ce45fbb..bfc3d80 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ArraySelection.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ArraySelection.java
@@ -16,6 +16,7 @@ public class ArraySelection<T> extends Selection<T> {
 	}
 
 	public void choose (T item) {
+		if (item == null) throw new IllegalArgumentException("item cannot be null.");
 		if (isDisabled) return;
 		if (selected.size > 0 && rangeSelect && multiple
 			&& (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT))) {
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ScissorStack.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ScissorStack.java
index cc167ff..76e30cc 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ScissorStack.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ScissorStack.java
@@ -19,14 +19,13 @@ package com.badlogic.gdx.scenes.scene2d.utils;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.utils.Array;
 
-/** A stack of {@link Rectangle} objects to be used for clipping via {@link GLCommon#glScissor(int, int, int, int)}. When a new
+/** A stack of {@link Rectangle} objects to be used for clipping via {@link GL20#glScissor(int, int, int, int)}. When a new
  * Rectangle is pushed onto the stack, it will be merged with the current top of stack. The minimum area of overlap is then set as
  * the real top of the stack.
  * @author mzechner */
@@ -37,8 +36,8 @@ public class ScissorStack {
 
 	/** Pushes a new scissor {@link Rectangle} onto the stack, merging it with the current top of the stack. The minimal area of
 	 * overlap between the top of stack rectangle and the provided rectangle is pushed onto the stack. This will invoke
-	 * {@link GLCommon#glScissor(int, int, int, int)} with the final top of stack rectangle. In case no scissor is yet on the stack
-	 * this will also enable {@link GL10#GL_SCISSOR_TEST} automatically.
+	 * {@link GL20#glScissor(int, int, int, int)} with the final top of stack rectangle. In case no scissor is yet on the stack
+	 * this will also enable {@link GL20#GL_SCISSOR_TEST} automatically.
 	 * @return true if the scissors were pushed. false if the scissor area was zero, in this case the scissors were not pushed and
 	 *         no drawing should occur. */
 	public static boolean pushScissors (Rectangle scissor) {
@@ -69,7 +68,7 @@ public class ScissorStack {
 	}
 
 	/** Pops the current scissor rectangle from the stack and sets the new scissor area to the new top of stack rectangle. In case
-	 * no more rectangles are on the stack, {@link GL10#GL_SCISSOR_TEST} is disabled. */
+	 * no more rectangles are on the stack, {@link GL20#GL_SCISSOR_TEST} is disabled. */
 	public static Rectangle popScissors () {
 		Rectangle old = scissors.pop();
 		if (scissors.size == 0)
@@ -106,7 +105,7 @@ public class ScissorStack {
 	 * an axis aligned {@link Rectangle}. The rectangle will get transformed by the camera and transform matrices and is then
 	 * projected to screen coordinates. Note that only axis aligned rectangles will work with this method. If either the Camera or
 	 * the Matrix4 have rotational components, the output of this method will not be suitable for
-	 * {@link GLCommon#glScissor(int, int, int, int)}.
+	 * {@link GL20#glScissor(int, int, int, int)}.
 	 * @param camera the {@link Camera}
 	 * @param batchTransform the transformation {@link Matrix4}
 	 * @param area the {@link Rectangle} to transform to window coordinates
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java
index 6389e81..85f196e 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java
@@ -35,6 +35,7 @@ public class Selection<T> implements Disableable, Iterable<T> {
 	/** Selects or deselects the specified item based on how the selection is configured, whether ctrl is currently pressed, etc.
 	 * This is typically invoked by user interaction. */
 	public void choose (T item) {
+		if (item == null) throw new IllegalArgumentException("item cannot be null.");
 		if (isDisabled) return;
 		snapshot();
 		if ((toggle || (!required && selected.size == 1) || isCtrlPressed()) && selected.contains(item)) {
@@ -91,6 +92,7 @@ public class Selection<T> implements Disableable, Iterable<T> {
 
 	/** Sets the selection to only the specified item. */
 	public void set (T item) {
+		if (item == null) throw new IllegalArgumentException("item cannot be null.");
 		if (selected.size == 1 && selected.first() == item) return;
 		snapshot();
 		selected.clear();
@@ -108,6 +110,7 @@ public class Selection<T> implements Disableable, Iterable<T> {
 		selected.clear();
 		for (int i = 0, n = items.size; i < n; i++) {
 			T item = items.get(i);
+			if (item == null) throw new IllegalArgumentException("item cannot be null.");
 			if (selected.add(item)) added = true;
 		}
 		if (added && programmaticChangeEvents && fireChangeEvent())
@@ -119,6 +122,7 @@ public class Selection<T> implements Disableable, Iterable<T> {
 
 	/** Adds the item to the selection. */
 	public void add (T item) {
+		if (item == null) throw new IllegalArgumentException("item cannot be null.");
 		if (!selected.add(item)) return;
 		if (programmaticChangeEvents && fireChangeEvent())
 			selected.remove(item);
@@ -131,6 +135,7 @@ public class Selection<T> implements Disableable, Iterable<T> {
 		snapshot();
 		for (int i = 0, n = items.size; i < n; i++) {
 			T item = items.get(i);
+			if (item == null) throw new IllegalArgumentException("item cannot be null.");
 			if (selected.add(item)) added = true;
 		}
 		if (added && programmaticChangeEvents && fireChangeEvent())
@@ -141,6 +146,7 @@ public class Selection<T> implements Disableable, Iterable<T> {
 	}
 
 	public void remove (T item) {
+		if (item == null) throw new IllegalArgumentException("item cannot be null.");
 		if (!selected.remove(item)) return;
 		if (programmaticChangeEvents && fireChangeEvent())
 			selected.add(item);
@@ -153,6 +159,7 @@ public class Selection<T> implements Disableable, Iterable<T> {
 		snapshot();
 		for (int i = 0, n = items.size; i < n; i++) {
 			T item = items.get(i);
+			if (item == null) throw new IllegalArgumentException("item cannot be null.");
 			if (selected.remove(item)) removed = true;
 		}
 		if (removed && programmaticChangeEvents && fireChangeEvent())
@@ -185,6 +192,7 @@ public class Selection<T> implements Disableable, Iterable<T> {
 	}
 
 	public boolean contains (T item) {
+		if (item == null) return false;
 		return selected.contains(item);
 	}
 
diff --git a/tests/gdx-tests-android/.classpath b/tests/gdx-tests-android/.classpath
index 5afc55c..bca0a7d 100644
--- a/tests/gdx-tests-android/.classpath
+++ b/tests/gdx-tests-android/.classpath
@@ -14,5 +14,6 @@
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry exported="true" kind="lib" path="/gdx-backend-android/libs/support-v4-19.0.1.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/tests/gdx-tests-android/AndroidManifest.xml b/tests/gdx-tests-android/AndroidManifest.xml
index 3ab49b3..a4e9080 100644
--- a/tests/gdx-tests-android/AndroidManifest.xml
+++ b/tests/gdx-tests-android/AndroidManifest.xml
@@ -4,7 +4,7 @@
       android:versionCode="1"
       android:versionName="1.0"
       android:installLocation="preferExternal">
-	<uses-sdk android:minSdkVersion="3" android:targetSdkVersion="16"/>
+	<uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19"/>
 	<uses-permission android:name="android.permission.RECORD_AUDIO"/>
 	<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 	<uses-permission android:name="android.permission.VIBRATE"/>
@@ -20,11 +20,20 @@
 			</intent-filter>
 		</activity>
 		
+		<activity android:name=".FragmentTestStarter"
+				  android:label="@string/app_name_fragments"
+				  android:configChanges="keyboard|keyboardHidden|orientation">
+			<intent-filter>
+				<action android:name="android.intent.action.MAIN" />
+				<category android:name="android.intent.category.LAUNCHER" />
+			</intent-filter>
+		</activity>
+
 		<activity android:name=".GdxTestActivity" 
 				  android:label="Gdx Test"
 				  android:configChanges="keyboard|keyboardHidden|orientation"
 				  android:screenOrientation="landscape"/>
-		
+
 		<activity android:name=".LivewallpaperSettings" 
 				  android:label="Livewallpaper Settings">
 			<intent-filter>
diff --git a/tests/gdx-tests-android/res/values/strings.xml b/tests/gdx-tests-android/res/values/strings.xml
index 5fee8e9..8b0532c 100644
--- a/tests/gdx-tests-android/res/values/strings.xml
+++ b/tests/gdx-tests-android/res/values/strings.xml
@@ -2,4 +2,5 @@
 <resources>
     <string name="hello">Hello World, GDXLauncher!</string>
     <string name="app_name">GDX Tests</string>
+    <string name="app_name_fragments">GDX Tests (Fragments)</string>
 </resources>
diff --git a/tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/FragmentTestStarter.java b/tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/FragmentTestStarter.java
new file mode 100644
index 0000000..709e03c
--- /dev/null
+++ b/tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/FragmentTestStarter.java
@@ -0,0 +1,158 @@
+package com.badlogic.gdx.tests.android;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.ActivityInfo;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.ListFragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewGroup.LayoutParams;
+import android.widget.ArrayAdapter;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.backends.android.AndroidApplicationConfiguration;
+import com.badlogic.gdx.backends.android.AndroidFragmentApplication;
+import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.tests.utils.GdxTests;
+
+public class FragmentTestStarter extends FragmentActivity implements AndroidFragmentApplication.Callbacks {
+
+	FrameLayout list;
+	FrameLayout view;
+	
+	@Override
+	protected void onCreate (Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		GdxTests.tests.add(MatrixTest.class);
+		
+		System.out.println(System.getProperty("java.runtime.name"));
+		
+		LinearLayout layout = new LinearLayout(this);
+		layout.setOrientation(LinearLayout.HORIZONTAL);
+		
+		list = new FrameLayout(this);
+		list.setId(1);
+		list.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+		layout.addView(list);
+		
+		if (isScreenLarge()) {
+			if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD) {
+				setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
+			} else {
+				setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+			}
+			
+			
+			list.setLayoutParams(new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT, 1));
+			
+			view = new FrameLayout(this);
+			view.setId(2);
+			view.setLayoutParams(new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT, 2));
+			layout.addView(view);
+		}
+		
+		setContentView(layout);
+		if (savedInstanceState == null) {
+			getSupportFragmentManager().beginTransaction().add(1, new TestListFragment()).commit();
+		}
+	}
+	
+	public void onTestSelected (String testName) {
+		if(view != null) {
+			getSupportFragmentManager().beginTransaction().replace(2, TestViewFragment.newInstance(testName)).commit();
+		} else {
+			startActivity(new Intent(this, GdxTestActivity.class).putExtra("test", testName));
+		}
+	}
+	
+	@Override
+	public void exit () {
+	}
+	
+   public boolean isScreenLarge() {
+      final int screenSize = getResources().getConfiguration().screenLayout
+              & Configuration.SCREENLAYOUT_SIZE_MASK;
+      return screenSize == Configuration.SCREENLAYOUT_SIZE_LARGE
+              || screenSize == Configuration.SCREENLAYOUT_SIZE_XLARGE;
+  }
+   
+	public static class TestListFragment extends ListFragment {
+		
+		private SharedPreferences prefs;
+		private FragmentTestStarter activity;
+		
+		@Override
+		public void onCreate (Bundle savedInstanceState) {
+			super.onCreate(savedInstanceState);
+			List<String> testNames = GdxTests.getNames();
+			setListAdapter(new ArrayAdapter<String>(getActivity(), android.R.layout.simple_list_item_1, testNames));			
+			prefs = getActivity().getSharedPreferences("libgdx-tests", Context.MODE_PRIVATE);
+		}		
+		
+		@Override
+		public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+			View view = super.onCreateView(inflater, container, savedInstanceState);
+			((ListView)view.findViewById(android.R.id.list)).setSelectionFromTop(prefs.getInt("index", 0), prefs.getInt("top", 0));
+			return view;
+		}
+
+		@Override
+		public void onListItemClick (ListView listView, View view, int position, long id) {
+			super.onListItemClick(listView, view, position, id);
+
+			Object o = this.getListAdapter().getItem(position);
+			String testName = o.toString();
+			if (activity != null) {
+				activity.onTestSelected(testName);
+			}
+		}		
+		
+		
+		@Override
+		public void onAttach (Activity activity) {
+			super.onAttach(activity);
+			if (activity instanceof FragmentTestStarter) {
+				this.activity = (FragmentTestStarter)activity;
+			}
+		}
+		
+	}
+
+	public static class TestViewFragment extends AndroidFragmentApplication {
+
+		public static TestViewFragment newInstance(String testName) {
+			Bundle arguments = new Bundle();
+			arguments.putString("test", testName);
+			TestViewFragment fragment = new TestViewFragment();
+			fragment.setArguments(arguments);
+			return fragment;
+		}
+		
+		GdxTest test;
+		
+		@Override
+		public void onCreate (Bundle savedInstanceState) {
+			super.onCreate(savedInstanceState);
+			test = GdxTests.newTest(getArguments().getString("test"));
+		}
+
+		@Override
+		public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+			return initializeForView(test, new AndroidApplicationConfiguration());
+		}
+		
+	}
+
+
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/ActionTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/ActionTest.java
index cade6f9..b88fd84 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/ActionTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/ActionTest.java
@@ -44,14 +44,14 @@ public class ActionTest extends GdxTest implements Runnable {
 		img.setOrigin(50, 50);
 		img.setPosition(100, 100);
 
-		img.addAction(forever(sequence( delay(1.0f),new Action() {
-         public boolean act(float delta) {
-            System.out.println(1);
-            img.clearActions();
-            return true;
-         } 
-      } )));
-		
+		img.addAction(forever(sequence(delay(1.0f), new Action() {
+			public boolean act (float delta) {
+				System.out.println(1);
+				img.clearActions();
+				return true;
+			}
+		})));
+
 		// img.action(Forever.$(Sequence.$(ScaleTo.$(1.1f,
 		// 1.1f,0.3f),ScaleTo.$(1f, 1f, 0.3f))));
 		// img.action(Forever.$(Parallel.$(RotateTo.$(1, 1))));
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/AssetManagerTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/AssetManagerTest.java
index b271c3d..cc0fe0c 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/AssetManagerTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/AssetManagerTest.java
@@ -70,7 +70,7 @@ public class AssetManagerTest extends GdxTest implements AssetErrorListener {
 	private Texture tex1;
 
 	private void load () {
-//		Gdx.app.setLogLevel(Logger.DEBUG);
+// Gdx.app.setLogLevel(Logger.DEBUG);
 		start = TimeUtils.nanoTime();
 		tex1 = new Texture("data/animation.png");
 		tex2 = new TextureAtlas(Gdx.files.internal("data/pack"));
@@ -83,11 +83,11 @@ public class AssetManagerTest extends GdxTest implements AssetErrorListener {
 
 		start = TimeUtils.nanoTime();
 		manager.load("data/animation.png", Texture.class);
-//		manager.load("data/pack1.png", Texture.class);
+// manager.load("data/pack1.png", Texture.class);
 		manager.load("data/pack", TextureAtlas.class);
-//		manager.load("data/verdana39.png", Texture.class);
+// manager.load("data/verdana39.png", Texture.class);
 		manager.load("data/verdana39.fnt", BitmapFont.class);
-//		manager.load("data/multipagefont.fnt", BitmapFont.class);
+// manager.load("data/multipagefont.fnt", BitmapFont.class);
 
 // manager.load("data/test.etc1", Texture.class);
 // manager.load("data/tiledmap/tilemap csv.tmx", TileMapRenderer.class, new
@@ -103,11 +103,11 @@ public class AssetManagerTest extends GdxTest implements AssetErrorListener {
 // renderer.dispose();
 
 		manager.unload("data/animation.png");
-//		manager.unload("data/pack1.png");
+// manager.unload("data/pack1.png");
 		manager.unload("data/pack");
-//		manager.unload("data/verdana39.png");
+// manager.unload("data/verdana39.png");
 		manager.unload("data/verdana39.fnt");
-//		manager.unload("data/multipagefont.fnt");
+// manager.unload("data/multipagefont.fnt");
 
 // manager.unload("data/test.etc1");
 // manager.unload("data/tiledmap/tilemap csv.tmx");
@@ -132,7 +132,7 @@ public class AssetManagerTest extends GdxTest implements AssetErrorListener {
 			reloads++;
 		}
 		frame++;
-		
+
 		batch.begin();
 		if (manager.isLoaded("data/animation.png")) batch.draw(manager.get("data/animation.png", Texture.class), 100, 100);
 		if (manager.isLoaded("data/verdana39.png")) batch.draw(manager.get("data/verdana39.png", Texture.class), 300, 100);
@@ -140,19 +140,17 @@ public class AssetManagerTest extends GdxTest implements AssetErrorListener {
 			batch.draw(manager.get("data/pack", TextureAtlas.class).findRegion("particle-star"), 164, 100);
 		if (manager.isLoaded("data/verdana39.fnt"))
 			manager.get("data/verdana39.fnt", BitmapFont.class).draw(batch, "This is a test", 100, 200);
-		if (manager.isLoaded("data/multipagefont.fnt")) 
+		if (manager.isLoaded("data/multipagefont.fnt"))
 			manager.get("data/multipagefont.fnt", BitmapFont.class).draw(batch, "This is a test qpRPN multi page!", 100, 200);
-		
-//		System.out.println(Arrays.toString(manager.getAssetNames().items));
-		
-		
+
+// System.out.println(Arrays.toString(manager.getAssetNames().items));
+
 // if (manager.isLoaded("data/test.etc1")) batch.draw(manager.get("data/test.etc1", Texture.class), 0, 0);
 // if (manager.isLoaded("data/tiledmap/tilemap csv.tmx")) manager.get("data/tiledmap/tilemap csv.tmx",
 // TileMapRenderer.class).render();
 		font.draw(batch, "loaded: " + manager.getProgress() + ", reloads: " + reloads, 0, 30);
 		batch.end();
-		
-		
+
 // if(Gdx.input.justTouched()) {
 // Texture.invalidateAllTextures(Gdx.app);
 // diagnosed = false;
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontDistanceFieldTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontDistanceFieldTest.java
index 75eb5b5..7f8f8e6 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontDistanceFieldTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontDistanceFieldTest.java
@@ -30,23 +30,21 @@ import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class BitmapFontDistanceFieldTest extends GdxTest {
-	
+
 	private static final String TEXT = "Ta";
 	private static final Color COLOR = Color.BLACK;
-	private static final float[] SCALES = { 0.25f, 0.5f, 1, 2, 4 };
-	
+	private static final float[] SCALES = {0.25f, 0.5f, 1, 2, 4};
+
 	private static class DistanceFieldShader extends ShaderProgram {
 		public DistanceFieldShader () {
-			super(
-				Gdx.files.internal("data/shaders/distancefield.vert"),
-				Gdx.files.internal("data/shaders/distancefield.frag"));
+			super(Gdx.files.internal("data/shaders/distancefield.vert"), Gdx.files.internal("data/shaders/distancefield.frag"));
 			if (!isCompiled()) {
 				throw new RuntimeException("Shader compilation failed:\n" + getLog());
 			}
 		}
-		
+
 		/** @param smoothing a value between 0 and 1 */
-		public void setSmoothing(float smoothing) {
+		public void setSmoothing (float smoothing) {
 			float delta = 0.5f * MathUtils.clamp(smoothing, 0, 1);
 			setUniformf("u_lower", 0.5f - delta);
 			setUniformf("u_upper", 0.5f + delta);
@@ -55,30 +53,31 @@ public class BitmapFontDistanceFieldTest extends GdxTest {
 
 	private OrthographicCamera camera;
 	private SpriteBatch spriteBatch;
-	
+
 	private Texture regularTexture;
 	private Texture distanceFieldTexture;
 	private BitmapFont descriptionFont;
 	private BitmapFont regularFont;
 	private BitmapFont distanceFieldFont;
 	private DistanceFieldShader distanceFieldShader;
-	
+
 	@Override
 	public void create () {
 		camera = new OrthographicCamera();
 		spriteBatch = new SpriteBatch();
-		
+
 		descriptionFont = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), true);
 		descriptionFont.setColor(Color.RED);
-		
+
 		regularTexture = new Texture(Gdx.files.internal("data/verdana39.png"), true);
 		regularFont = new BitmapFont(Gdx.files.internal("data/verdana39.fnt"), new TextureRegion(regularTexture), true);
 		regularFont.setColor(COLOR);
 
 		distanceFieldTexture = new Texture(Gdx.files.internal("data/verdana39distancefield.png"), true);
-		distanceFieldFont = new BitmapFont(Gdx.files.internal("data/verdana39distancefield.fnt"), new TextureRegion(distanceFieldTexture), true);
+		distanceFieldFont = new BitmapFont(Gdx.files.internal("data/verdana39distancefield.fnt"), new TextureRegion(
+			distanceFieldTexture), true);
 		distanceFieldFont.setColor(COLOR);
-		
+
 		distanceFieldShader = new DistanceFieldShader();
 		ShaderProgram.pedantic = false; // Useful when debugging this test
 	}
@@ -94,17 +93,13 @@ public class BitmapFontDistanceFieldTest extends GdxTest {
 		x += drawFont(regularFont, "Regular font\nNearest filter", false, false, 0, x);
 		x += drawFont(regularFont, "Regular font\nLinear filter", true, false, 0, x);
 		x += drawFont(regularFont, "Regular font\nCustom shader", true, true, 1.0f, x);
-		x += drawFont(distanceFieldFont, "Distance field\nCustom shader", true, true, 1/8f, x);
+		x += drawFont(distanceFieldFont, "Distance field\nCustom shader", true, true, 1 / 8f, x);
 		x += drawFont(distanceFieldFont, "Distance field\nShowing distance field", false, false, 0, x);
-	
+
 		spriteBatch.end();
 	}
-	
-	private int drawFont (
-		BitmapFont font, String description,
-		boolean linearFiltering, boolean useShader, float smoothing,
-		int x)
-	{
+
+	private int drawFont (BitmapFont font, String description, boolean linearFiltering, boolean useShader, float smoothing, int x) {
 		int y = 10;
 		float maxWidth = 0;
 
@@ -112,20 +107,20 @@ public class BitmapFontDistanceFieldTest extends GdxTest {
 		descriptionFont.drawMultiLine(spriteBatch, description, x, y);
 		spriteBatch.flush();
 		y += 10 + 2 * descriptionFont.getLineHeight();
-		
-		//set filters for each page
+
+		// set filters for each page
 		TextureFilter minFilter = linearFiltering ? TextureFilter.MipMapLinearNearest : TextureFilter.Nearest;
 		TextureFilter magFilter = linearFiltering ? TextureFilter.Linear : TextureFilter.Nearest;
-		for (int i=0; i<font.getRegions().length; i++) {
+		for (int i = 0; i < font.getRegions().length; i++) {
 			font.getRegion(i).getTexture().setFilter(minFilter, magFilter);
 		}
-		
+
 		if (useShader) {
 			spriteBatch.setShader(distanceFieldShader);
 		} else {
 			spriteBatch.setShader(null);
 		}
-		
+
 		for (float scale : SCALES) {
 			font.setScale(scale);
 			maxWidth = Math.max(maxWidth, font.getBounds(TEXT).width);
@@ -136,7 +131,7 @@ public class BitmapFontDistanceFieldTest extends GdxTest {
 			y += font.getLineHeight();
 			spriteBatch.flush();
 		}
-		return (int) Math.ceil(maxWidth);
+		return (int)Math.ceil(maxWidth);
 	}
 
 	private float getBaselineShift (BitmapFont font) {
@@ -171,4 +166,4 @@ public class BitmapFontDistanceFieldTest extends GdxTest {
 		distanceFieldFont.dispose();
 		distanceFieldShader.dispose();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/BlitTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/BlitTest.java
index 043a0b9..de43eb7 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/BlitTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/BlitTest.java
@@ -22,7 +22,7 @@ import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
-public class BlitTest extends GdxTest {	
+public class BlitTest extends GdxTest {
 
 	Texture rgb888;
 	Texture rgba8888;
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
index 1c1ffa1..d0d48fb 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
@@ -118,11 +118,12 @@ public class Box2DTest extends GdxTest implements InputProcessor {
 		// we instantiate a new World with a proper gravity vector
 		// and tell it to sleep when possible.
 		world = new World(new Vector2(0, -10), true);
-		
-		 float[] vertices = { -0.07421887f, -0.16276085f, -0.12109375f, -0.22786504f, -0.157552f, -0.7122401f, 0.04296875f, -0.7122401f, 0.110677004f, -0.6419276f, 0.13151026f, -0.49869835f, 0.08984375f, -0.3190109f };
-		 
-         PolygonShape shape = new PolygonShape();
-         shape.set(vertices);
+
+		float[] vertices = {-0.07421887f, -0.16276085f, -0.12109375f, -0.22786504f, -0.157552f, -0.7122401f, 0.04296875f,
+			-0.7122401f, 0.110677004f, -0.6419276f, 0.13151026f, -0.49869835f, 0.08984375f, -0.3190109f};
+
+		PolygonShape shape = new PolygonShape();
+		shape.set(vertices);
 
 		// next we create a static ground platform. This platform
 		// is not moveable and will not react to any influences from
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/Bresenham2Test.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/Bresenham2Test.java
index fd10648..4e29a03 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/Bresenham2Test.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/Bresenham2Test.java
@@ -12,46 +12,50 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.Pixmap.Format;
-import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.math.Bresenham2;
-import com.badlogic.gdx.math.GridPoint2;
-import com.badlogic.gdx.math.Vector2;
-import com.badlogic.gdx.tests.utils.GdxTest;
-
-public class Bresenham2Test extends GdxTest {
-	SpriteBatch batch;
-	Texture result;
-	
-	@Override
-	public void create () {
-		Pixmap pixmap = new Pixmap(512, 512, Format.RGBA8888);
-		pixmap.setColor(Color.WHITE);
-		
-		Bresenham2 bresenham = new Bresenham2();
-		for(GridPoint2 point: bresenham.line(0, 0, 512, 512)) pixmap.drawPixel(point.x, point.y);
-		for(GridPoint2 point: bresenham.line(512, 0, 0, 512)) pixmap.drawPixel(point.x, point.y);
-		for(GridPoint2 point: bresenham.line(0, 0, 512, 256)) pixmap.drawPixel(point.x, point.y);
-		for(GridPoint2 point: bresenham.line(512, 0, 0, 256)) pixmap.drawPixel(point.x, point.y);
-		
-		result = new Texture(pixmap);
-		batch = new SpriteBatch();
-	}
-
-	@Override
-	public void render () {
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		batch.begin();
-		batch.draw(result, 0, 0);
-		batch.end();
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Pixmap.Format;
+import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.math.Bresenham2;
+import com.badlogic.gdx.math.GridPoint2;
+import com.badlogic.gdx.math.Vector2;
+import com.badlogic.gdx.tests.utils.GdxTest;
+
+public class Bresenham2Test extends GdxTest {
+	SpriteBatch batch;
+	Texture result;
+
+	@Override
+	public void create () {
+		Pixmap pixmap = new Pixmap(512, 512, Format.RGBA8888);
+		pixmap.setColor(Color.WHITE);
+
+		Bresenham2 bresenham = new Bresenham2();
+		for (GridPoint2 point : bresenham.line(0, 0, 512, 512))
+			pixmap.drawPixel(point.x, point.y);
+		for (GridPoint2 point : bresenham.line(512, 0, 0, 512))
+			pixmap.drawPixel(point.x, point.y);
+		for (GridPoint2 point : bresenham.line(0, 0, 512, 256))
+			pixmap.drawPixel(point.x, point.y);
+		for (GridPoint2 point : bresenham.line(512, 0, 0, 256))
+			pixmap.drawPixel(point.x, point.y);
+
+		result = new Texture(pixmap);
+		batch = new SpriteBatch();
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		batch.begin();
+		batch.draw(result, 0, 0);
+		batch.end();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
index 3d2787a..5d3df38 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
@@ -30,16 +30,37 @@ import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.utils.Align;
-import com.badlogic.gdx.tests.bullet.*;
+import com.badlogic.gdx.tests.bullet.BasicBulletTest;
+import com.badlogic.gdx.tests.bullet.BasicShapesTest;
+import com.badlogic.gdx.tests.bullet.BulletTest;
+import com.badlogic.gdx.tests.bullet.CollisionTest;
+import com.badlogic.gdx.tests.bullet.CollisionWorldTest;
+import com.badlogic.gdx.tests.bullet.ConstraintsTest;
+import com.badlogic.gdx.tests.bullet.ContactCacheTest;
+import com.badlogic.gdx.tests.bullet.ContactCallbackTest;
+import com.badlogic.gdx.tests.bullet.ContactCallbackTest2;
+import com.badlogic.gdx.tests.bullet.ConvexHullDistanceTest;
+import com.badlogic.gdx.tests.bullet.ConvexHullTest;
+import com.badlogic.gdx.tests.bullet.FrustumCullingTest;
+import com.badlogic.gdx.tests.bullet.ImportTest;
+import com.badlogic.gdx.tests.bullet.InternalTickTest;
+import com.badlogic.gdx.tests.bullet.KinematicTest;
+import com.badlogic.gdx.tests.bullet.MeshShapeTest;
+import com.badlogic.gdx.tests.bullet.RayCastTest;
+import com.badlogic.gdx.tests.bullet.RayPickRagdollTest;
+import com.badlogic.gdx.tests.bullet.ShootTest;
+import com.badlogic.gdx.tests.bullet.SoftBodyTest;
+import com.badlogic.gdx.tests.bullet.SoftMeshTest;
+import com.badlogic.gdx.tests.bullet.VehicleTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 /** @author xoppa */
 public class BulletTestCollection extends GdxTest implements InputProcessor, GestureListener {
 	protected final BulletTest[] tests = {new BasicBulletTest(), new ShootTest(), new BasicShapesTest(), new KinematicTest(),
-		new ConstraintsTest(), new MeshShapeTest(), new ConvexHullTest(), new ConvexHullDistanceTest(), new RayCastTest(), new RayPickRagdollTest(),
-		new InternalTickTest(), new CollisionWorldTest(), new CollisionTest(), new FrustumCullingTest(), new ContactCallbackTest(),
-		new ContactCallbackTest2(), new ContactCacheTest(), new SoftBodyTest(), new SoftMeshTest(), new VehicleTest(),
-		new CharacterTest(), new ImportTest()};
+		new ConstraintsTest(), new MeshShapeTest(), new ConvexHullTest(), new ConvexHullDistanceTest(), new RayCastTest(),
+		new RayPickRagdollTest(), new InternalTickTest(), new CollisionWorldTest(), new CollisionTest(), new FrustumCullingTest(),
+		new ContactCallbackTest(), new ContactCallbackTest2(), new ContactCacheTest(), new SoftBodyTest(), new SoftMeshTest(),
+		new VehicleTest(), new ImportTest()};
 
 	protected int testIndex = 0;
 
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
index 2135228..ee598dd 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
@@ -50,7 +50,8 @@ public class CullTest extends GdxTest implements ApplicationListener {
 	@Override
 	public void create () {
 		ModelBuilder builder = new ModelBuilder();
-		sphere = builder.createSphere(2f, 2f, 2f, 16, 16, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)), Usage.Position | Usage.Normal);
+		sphere = builder.createSphere(2f, 2f, 2f, 16, 16, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)),
+			Usage.Position | Usage.Normal);
 		// cam = new PerspectiveCamera(45, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam = new OrthographicCamera(45, 45 * (Gdx.graphics.getWidth() / (float)Gdx.graphics.getHeight()));
 
@@ -59,11 +60,12 @@ public class CullTest extends GdxTest implements ApplicationListener {
 
 		Random rand = new Random();
 		for (int i = 0; i < instances.length; i++) {
-			pos.set(rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * 100 - rand.nextFloat()	* 100, rand.nextFloat() * -100 - 3);			
+			pos.set(rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * 100 - rand.nextFloat() * 100,
+				rand.nextFloat() * -100 - 3);
 			instances[i] = new ModelInstance(sphere, pos);
 		}
 		modelBatch = new ModelBatch();
-		
+
 		batch = new SpriteBatch();
 		font = new BitmapFont();
 		// Gdx.graphics.setVSync(true);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/DeviceInfoTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/DeviceInfoTest.java
index 36a8e96..e791a38 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/DeviceInfoTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/DeviceInfoTest.java
@@ -12,32 +12,27 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
-//import com.badlogic.gdx.DeviceInfo;
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.tests.utils.GdxTest;
-import com.badlogic.gdx.utils.IntMap;
-
-public class DeviceInfoTest extends GdxTest {
-
-
-	@Override
-	public void create () {
-		/*DeviceInfo info = Gdx.app.getDeviceInfo();
-		int[] keys = info.keys();
-		int cnt = 0;
-		for (int i = 0; i < keys.length; i++) {
-			int key = keys[i];
-			Gdx.app.log("DeviceInfo", "key = "+key+"; value = "+info.value(key));
-			cnt++;
-		}
-		Gdx.app.log("DeviceInfo", "Total of "+cnt+" values");*/
-	}
-
-	@Override
-	public void render () {
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
+//import com.badlogic.gdx.DeviceInfo;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.IntMap;
+
+public class DeviceInfoTest extends GdxTest {
+
+	@Override
+	public void create () {
+		/*
+		 * DeviceInfo info = Gdx.app.getDeviceInfo(); int[] keys = info.keys(); int cnt = 0; for (int i = 0; i < keys.length; i++) {
+		 * int key = keys[i]; Gdx.app.log("DeviceInfo", "key = "+key+"; value = "+info.value(key)); cnt++; }
+		 * Gdx.app.log("DeviceInfo", "Total of "+cnt+" values");
+		 */
+	}
+
+	@Override
+	public void render () {
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/DragAndDropTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/DragAndDropTest.java
index 68256d2..188fa9c 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/DragAndDropTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/DragAndDropTest.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -118,4 +119,4 @@ public class DragAndDropTest extends GdxTest {
 	public void dispose () {
 		stage.dispose();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/EarClippingTriangulatorTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/EarClippingTriangulatorTest.java
index 61f9f52..5059441 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/EarClippingTriangulatorTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/EarClippingTriangulatorTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -38,333 +38,333 @@ import com.badlogic.gdx.utils.FloatArray;
 import com.badlogic.gdx.utils.ShortArray;
 
 public class EarClippingTriangulatorTest {
-//public class EarClippingTriangulatorTest extends GdxTest {
-//
-//	private List<TestCase> testCases = new ArrayList<TestCase>();
-//	private int casesX;
-//	private int casesY;
-//
-//	@Override
-//	public void create () {
-//		// An empty "polygon"
-//		testCases.add(new TestCase(new float[] {}, true));
-//
-//		// A point
-//		testCases.add(new TestCase(new float[] {0, 0}, true));
-//
-//		// A line segment
-//		testCases.add(new TestCase(new float[] {0, 0, 1, 1}, true));
-//
-//		// A counterclockwise triangle
-//		testCases.add(new TestCase(new float[] {0, 0, 0, 1, 1, 0,}));
-//
-//		// A counterclockwise square
-//		testCases.add(new TestCase(new float[] {0, 0, 0, 1, 1, 1, 1, 0,}));
-//
-//		// A clockwise square
-//		testCases.add(new TestCase(new float[] {0, 0, 1, 0, 1, 1, 0, 1,}));
-//
-//		// Starfleet insigna
-//		testCases.add(new TestCase(new float[] {0, 0, 0.6f, 0.4f, 1, 0, 0.5f, 1,}));
-//
-//		// Starfleet insigna with repeated point
-//		testCases.add(new TestCase(new float[] {0, 0, 0.6f, 0.4f, 0.6f, 0.4f, 1, 0, 0.5f, 1,}));
-//
-//		// Three collinear points
-//		testCases.add(new TestCase(new float[] {0, 0, 1, 0, 2, 0,}));
-//
-//		// Four collinear points
-//		testCases.add(new TestCase(new float[] {0, 0, 1, 0, 2, 0, 3, 0,}));
-//
-//		// Non-consecutive collinear points
-//		testCases.add(new TestCase(new float[] {0, 0, 1, 1, 2, 0, 3, 1, 4, 0,}, true));
-//
-//		// Plus shape
-//		testCases.add(new TestCase(new float[] {1, 0, 2, 0, 2, 1, 3, 1, 3, 2, 2, 2, 2, 3, 1, 3, 1, 2, 0, 2, 0, 1, 1, 1,}));
-//
-//		// Star shape
-//		testCases.add(new TestCase(new float[] {4, 0, 5, 3, 8, 4, 5, 5, 4, 8, 3, 5, 0, 4, 3, 3,}));
-//
-//		// U shape
-//		testCases.add(new TestCase(new float[] {1, 0, 2, 0, 3, 1, 3, 3, 2, 3, 2, 1, 1, 1, 1, 3, 0, 3, 0, 1,}));
-//
-//		// Spiral
-//		testCases.add(new TestCase(new float[] {1, 0, 4, 0, 5, 1, 5, 4, 4, 5, 1, 5, 0, 4, 0, 3, 1, 2, 2, 2, 3, 3, 1, 3, 1, 4, 4, 4,
-//			4, 1, 0, 1,}));
-//
-//		// Test case from http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
-//		testCases.add(new TestCase(new float[] {0, 6, 0, 0, 3, 0, 4, 1, 6, 1, 8, 0, 12, 0, 13, 2, 8, 2, 8, 4, 11, 4, 11, 6, 6, 6,
-//			4, 3, 2, 6,}));
-//
-//		// Self-intersection
-//		testCases.add(new TestCase(new float[] {0, 0, 1, 1, 2, -1, 3, 1, 4, 0,}, true));
-//
-//		// Self-touching
-//		testCases.add(new TestCase(new float[] {0, 0, 4, 0, 4, 4, 2, 4, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 2, 3, 2, 4, 0, 4,}, true));
-//
-//		// Self-overlapping
-//		testCases.add(new TestCase(new float[] {0, 0, 4, 0, 4, 4, 1, 4, 1, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 4, 0, 4,}, true));
-//
-//		// Test case from http://www.davdata.nl/math/polygons.html
-//		testCases.add(new TestCase(new float[] {190, 480, 140, 180, 310, 100, 330, 390, 290, 390, 280, 260, 220, 260, 220, 430,
-//			370, 430, 350, 30, 50, 30, 160, 560, 730, 510, 710, 20, 410, 30, 470, 440, 640, 410, 630, 140, 590, 140, 580, 360, 510,
-//			370, 510, 60, 650, 70, 660, 450, 190, 480,}));
-//
-//		// Issue 815, http://code.google.com/p/libgdx/issues/detail?id=815
-//		testCases.add(new TestCase(new float[] {-2.0f, 0.0f, -2.0f, 0.5f, 0.0f, 1.0f, 0.5f, 2.875f, 1.0f, 0.5f, 1.5f, 1.0f, 2.0f,
-//			1.0f, 2.0f, 0.0f,}));
-//
-//		// Issue 207, comment #1, http://code.google.com/p/libgdx/issues/detail?id=207#c1
-//		testCases.add(new TestCase(new float[] {72.42465f, 197.07095f, 78.485535f, 189.92776f, 86.12059f, 180.92929f, 99.68253f,
-//			164.94557f, 105.24325f, 165.79604f, 107.21862f, 166.09814f, 112.41958f, 162.78253f, 113.73238f, 161.94562f, 123.29477f,
-//			167.93805f, 126.70667f, 170.07617f, 73.22717f, 199.51062f,}));
-//
-//		// Issue 207, comment #11, http://code.google.com/p/libgdx/issues/detail?id=207#c11
-//		// Also on issue 1081, http://code.google.com/p/libgdx/issues/detail?id=1081
-//		testCases.add(new TestCase(new float[] {2400.0f, 480.0f, 2400.0f, 176.0f, 1920.0f, 480.0f, 1920.0459f, 484.22314f,
-//			1920.1797f, 487.91016f, 1920.3955f, 491.0874f, 1920.6875f, 493.78125f, 1921.0498f, 496.01807f, 1921.4766f, 497.82422f,
-//			1921.9619f, 499.22607f, 1922.5f, 500.25f, 1923.085f, 500.92236f, 1923.7109f, 501.26953f, 1924.3721f, 501.31787f,
-//			1925.0625f, 501.09375f, 1925.7764f, 500.62354f, 1926.5078f, 499.9336f, 1927.251f, 499.0503f, 1928.0f, 498.0f, 1928.749f,
-//			496.80908f, 1929.4922f, 495.5039f, 1930.2236f, 494.11084f, 1930.9375f, 492.65625f, 1931.6279f, 491.1665f, 1932.2891f,
-//			489.66797f, 1932.915f, 488.187f, 1933.5f, 486.75f, 1934.0381f, 485.3833f, 1934.5234f, 484.11328f, 1934.9502f, 482.9663f,
-//			1935.3125f, 481.96875f, 1935.6045f, 481.14697f, 1935.8203f, 480.52734f, 1935.9541f, 480.13623f, 1936.0f, 480.0f,}));
-//
-//		// Issue 1407, http://code.google.com/p/libgdx/issues/detail?id=1407
-//		testCases.add(new TestCase(new float[] {3.914329f, 1.9008259f, 4.414321f, 1.903619f, 4.8973203f, 1.9063174f, 5.4979978f,
-//			1.9096732f,}, true));
-//
-//		// Issue 1407, http://code.google.com/p/libgdx/issues/detail?id=1407,
-//		// with an additional point to show what is happening.
-//		testCases.add(new TestCase(new float[] {3.914329f, 1.9008259f, 4.414321f, 1.903619f, 4.8973203f, 1.9063174f, 5.4979978f,
-//			1.9096732f, 4, 4,}));
-//
-//		casesX = (int)Math.ceil(Math.sqrt(testCases.size()));
-//		casesY = (int)Math.ceil((float)testCases.size() / casesX);
-//
-//		Gdx.input.setInputProcessor(new InputAdapter() {
-//			@Override
-//			public boolean keyDown (int keycode) {
-//				switch (keycode) {
-//				case Keys.RIGHT:
-//					cycle(1);
-//					break;
-//				case Keys.LEFT:
-//					cycle(-1);
-//					break;
-//				case Keys.SPACE:
-//					reverse();
-//					break;
-//				default:
-//					return super.keyDown(keycode);
-//				}
-//				return true;
-//			}
-//		});
-//	}
-//
-//	@Override
-//	public void render () {
-//		Gdx.gl.glClearColor(1, 1, 1, 1);
-//		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-//
-//		int w = Gdx.graphics.getWidth();
-//		int h = Gdx.graphics.getHeight();
-//		Gdx.gl20.glViewport(0, 0, w, h);
-//
-//		final float M = 0.1f;
-//		Gdx.gl10.glMatrixMode(GL10.GL_PROJECTION);
-//		Gdx.gl10.glLoadIdentity();
-//		Gdx.gl10.glOrthof(-M, casesX * (1 + M), -M, casesY * (1 + M), -1, 1);
-//		Gdx.gl10.glMatrixMode(GL10.GL_MODELVIEW);
-//		Gdx.gl10.glLoadIdentity();
-//
-//		int x = 0;
-//		int y = 0;
-//		for (TestCase testCase : testCases) {
-//			Gdx.gl10.glPushMatrix();
-//			Gdx.gl10.glTranslatef(x * (1 + M), y * (1 + M), 0);
-//			testCase.render();
-//			Gdx.gl10.glPopMatrix();
-//
-//			x++;
-//			if (x >= casesX) {
-//				x = 0;
-//				y++;
-//			}
-//		}
-//	}
-//
-//	@Override
-//	public void dispose () {
-//		for (TestCase testCase : testCases) {
-//			testCase.dispose();
-//		}
-//	}
-//
-//	void cycle (int step) {
-//		for (TestCase testCase : testCases) {
-//			testCase.cycle(step);
-//		}
-//	}
-//
-//	void reverse () {
-//		for (TestCase testCase : testCases) {
-//			testCase.reverse();
-//		}
-//	}
-//
-//	static final Color VALID_COLOR = new Color(0.8f, 1.0f, 0.8f, 1.0f);
-//	static final Color INVALID_COLOR = new Color(1.0f, 0.8f, 0.8f, 1.0f);
-//
-//	private class TestCase implements Disposable {
-//		final FloatArray polygon;
-//		final boolean invalid;
-//
-//		final Mesh polygonMesh;
-//		final Mesh interiorMesh;
-//		final Mesh triangleOutlineMesh;
-//		final Rectangle boundingRect;
-//
-//		public TestCase (float[] p) {
-//			this(p, false);
-//		}
-//
-//		public TestCase (float[] p, boolean invalid) {
-//			this.invalid = invalid;
-//			polygon = new FloatArray(p);
-//
-//			int numPolygonVertices = polygon.size;
-//			Vector2 min = new Vector2(Float.MAX_VALUE, Float.MAX_VALUE);
-//			Vector2 max = new Vector2(-Float.MAX_VALUE, -Float.MAX_VALUE);
-//			for (int i = 0; i < numPolygonVertices; i++) {
-//				float x = polygon.get(i++);
-//				float y = polygon.get(i);
-//				min.x = Math.min(min.x, x);
-//				min.y = Math.min(min.y, y);
-//				max.x = Math.max(max.x, x);
-//				max.y = Math.max(max.y, y);
-//			}
-//			boundingRect = new Rectangle(min.x, min.y, Math.max(0.001f, max.x - min.x), Math.max(0.001f, max.y - min.y));
-//
-//			int numTriangles = Math.max(0, polygon.size / 2 - 2);
-//			VertexAttributes position = new VertexAttributes(
-//				new VertexAttribute(Usage.Position, 2, ShaderProgram.POSITION_ATTRIBUTE));
-//			VertexAttributes positionAndColor = new VertexAttributes(new VertexAttribute(Usage.Position, 2,
-//				ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.Color, 4, ShaderProgram.COLOR_ATTRIBUTE));
-//			polygonMesh = new Mesh(true, polygon.size / 2, 0, position);
-//			interiorMesh = new Mesh(true, 3 * numTriangles, 0, positionAndColor);
-//			triangleOutlineMesh = new Mesh(true, 6 * numTriangles, 0, position);
-//
-//			triangulate();
-//		}
-//
-//		private void triangulate () {
-//			ShortArray triangles = new EarClippingTriangulator().computeTriangles(polygon);
-//
-//			FloatArray triangleOutlines = new FloatArray(triangles.size * 2);
-//			for (int i = 0; i < triangles.size; i += 3) {
-//				float ax = polygon.get(triangles.get(i) * 2);
-//				float ay = polygon.get(triangles.get(i) * 2 + 1);
-//				float bx = polygon.get(triangles.get(i + 1) * 2);
-//				float by = polygon.get(triangles.get(i + 1) * 2 + 1);
-//				float cx = polygon.get(triangles.get(i + 2) * 2);
-//				float cy = polygon.get(triangles.get(i + 2) * 2 + 1);
-//				triangleOutlines.add(ax);
-//				triangleOutlines.add(ay);
-//				triangleOutlines.add(bx);
-//				triangleOutlines.add(by);
-//				triangleOutlines.add(bx);
-//				triangleOutlines.add(by);
-//				triangleOutlines.add(cx);
-//				triangleOutlines.add(cy);
-//				triangleOutlines.add(cx);
-//				triangleOutlines.add(cy);
-//				triangleOutlines.add(ax);
-//				triangleOutlines.add(ay);
-//			}
-//
-//			polygonMesh.setVertices(polygon.items, 0, polygon.size);
-//			interiorMesh.setVertices(listToColoredVertexArray(polygon, triangles, getColor()));
-//			triangleOutlineMesh.setVertices(triangleOutlines.items, 0, triangleOutlines.size);
-//		}
-//
-//		public void cycle (int step) {
-//			if (polygon.size == 0) {
-//				return;
-//			}
-//			while (step > 0) {
-//				polygon.insert(0, polygon.pop());
-//				polygon.insert(0, polygon.pop());
-//				--step;
-//			}
-//			while (step < 0) {
-//				polygon.add(polygon.removeIndex(0));
-//				++step;
-//			}
-//			triangulate();
-//		}
-//
-//		public void reverse () {
-//			float[] vertices = polygon.items;
-//			for (int i = 0, lastIndex = polygon.size - 2, n = polygon.size / 2; i < n; i++) {
-//				int ii = lastIndex - i;
-//				float temp = vertices[i];
-//				vertices[i] = vertices[ii];
-//				vertices[ii] = temp;
-//				i++;
-//				ii++;
-//				temp = vertices[i];
-//				vertices[i] = vertices[ii];
-//				vertices[ii] = temp;
-//			}
-//		}
-//
-//		private Color getColor () {
-//			if (invalid) {
-//				return INVALID_COLOR;
-//			} else {
-//				return VALID_COLOR;
-//			}
-//		}
-//
-//		public void render () {
-//			Gdx.gl10.glScalef(1 / boundingRect.width, 1 / boundingRect.height, 1);
-//			Gdx.gl10.glTranslatef(-boundingRect.x, -boundingRect.y, 0);
-//
-//			interiorMesh.render(GL10.GL_TRIANGLES);
-//
-//			Gdx.gl10.glColor4f(0.4f, 0.4f, 0.4f, 1.0f);
-//			Gdx.gl10.glLineWidth(1.0f);
-//			triangleOutlineMesh.render(GL10.GL_LINES);
-//
-//			Gdx.gl10.glColor4f(0.3f, 0.0f, 0.0f, 1.0f);
-//			Gdx.gl10.glLineWidth(2.0f);
-//			polygonMesh.render(GL10.GL_LINE_LOOP);
-//		}
-//
-//		@Override
-//		public void dispose () {
-//			polygonMesh.dispose();
-//			interiorMesh.dispose();
-//			triangleOutlineMesh.dispose();
-//		}
-//	}
-//
-//	static float[] listToColoredVertexArray (FloatArray vertices, ShortArray triangles, Color color) {
-//		int n = triangles.size;
-//		float[] array = new float[n * 6];
-//		int i = 0;
-//		int j = 0;
-//		for (int k = 0; k < n; k++, j++) {
-//			float percent = n <= 3 ? 1 : (j / 3) / (float)(n / 3 - 1);
-//			float brightness = 0.3f + 0.4f * percent;
-//			array[i++] = vertices.get(triangles.get(k) * 2);
-//			array[i++] = vertices.get(triangles.get(k) * 2 + 1);
-//			array[i++] = color.r * brightness;
-//			array[i++] = color.g * brightness;
-//			array[i++] = color.b * brightness;
-//			array[i++] = 1;
-//		}
-//		return array;
-//	}
-}
\ No newline at end of file
+// public class EarClippingTriangulatorTest extends GdxTest {
+//
+// private List<TestCase> testCases = new ArrayList<TestCase>();
+// private int casesX;
+// private int casesY;
+//
+// @Override
+// public void create () {
+// // An empty "polygon"
+// testCases.add(new TestCase(new float[] {}, true));
+//
+// // A point
+// testCases.add(new TestCase(new float[] {0, 0}, true));
+//
+// // A line segment
+// testCases.add(new TestCase(new float[] {0, 0, 1, 1}, true));
+//
+// // A counterclockwise triangle
+// testCases.add(new TestCase(new float[] {0, 0, 0, 1, 1, 0,}));
+//
+// // A counterclockwise square
+// testCases.add(new TestCase(new float[] {0, 0, 0, 1, 1, 1, 1, 0,}));
+//
+// // A clockwise square
+// testCases.add(new TestCase(new float[] {0, 0, 1, 0, 1, 1, 0, 1,}));
+//
+// // Starfleet insigna
+// testCases.add(new TestCase(new float[] {0, 0, 0.6f, 0.4f, 1, 0, 0.5f, 1,}));
+//
+// // Starfleet insigna with repeated point
+// testCases.add(new TestCase(new float[] {0, 0, 0.6f, 0.4f, 0.6f, 0.4f, 1, 0, 0.5f, 1,}));
+//
+// // Three collinear points
+// testCases.add(new TestCase(new float[] {0, 0, 1, 0, 2, 0,}));
+//
+// // Four collinear points
+// testCases.add(new TestCase(new float[] {0, 0, 1, 0, 2, 0, 3, 0,}));
+//
+// // Non-consecutive collinear points
+// testCases.add(new TestCase(new float[] {0, 0, 1, 1, 2, 0, 3, 1, 4, 0,}, true));
+//
+// // Plus shape
+// testCases.add(new TestCase(new float[] {1, 0, 2, 0, 2, 1, 3, 1, 3, 2, 2, 2, 2, 3, 1, 3, 1, 2, 0, 2, 0, 1, 1, 1,}));
+//
+// // Star shape
+// testCases.add(new TestCase(new float[] {4, 0, 5, 3, 8, 4, 5, 5, 4, 8, 3, 5, 0, 4, 3, 3,}));
+//
+// // U shape
+// testCases.add(new TestCase(new float[] {1, 0, 2, 0, 3, 1, 3, 3, 2, 3, 2, 1, 1, 1, 1, 3, 0, 3, 0, 1,}));
+//
+// // Spiral
+// testCases.add(new TestCase(new float[] {1, 0, 4, 0, 5, 1, 5, 4, 4, 5, 1, 5, 0, 4, 0, 3, 1, 2, 2, 2, 3, 3, 1, 3, 1, 4, 4, 4,
+// 4, 1, 0, 1,}));
+//
+// // Test case from http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
+// testCases.add(new TestCase(new float[] {0, 6, 0, 0, 3, 0, 4, 1, 6, 1, 8, 0, 12, 0, 13, 2, 8, 2, 8, 4, 11, 4, 11, 6, 6, 6,
+// 4, 3, 2, 6,}));
+//
+// // Self-intersection
+// testCases.add(new TestCase(new float[] {0, 0, 1, 1, 2, -1, 3, 1, 4, 0,}, true));
+//
+// // Self-touching
+// testCases.add(new TestCase(new float[] {0, 0, 4, 0, 4, 4, 2, 4, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 2, 3, 2, 4, 0, 4,}, true));
+//
+// // Self-overlapping
+// testCases.add(new TestCase(new float[] {0, 0, 4, 0, 4, 4, 1, 4, 1, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 4, 0, 4,}, true));
+//
+// // Test case from http://www.davdata.nl/math/polygons.html
+// testCases.add(new TestCase(new float[] {190, 480, 140, 180, 310, 100, 330, 390, 290, 390, 280, 260, 220, 260, 220, 430,
+// 370, 430, 350, 30, 50, 30, 160, 560, 730, 510, 710, 20, 410, 30, 470, 440, 640, 410, 630, 140, 590, 140, 580, 360, 510,
+// 370, 510, 60, 650, 70, 660, 450, 190, 480,}));
+//
+// // Issue 815, http://code.google.com/p/libgdx/issues/detail?id=815
+// testCases.add(new TestCase(new float[] {-2.0f, 0.0f, -2.0f, 0.5f, 0.0f, 1.0f, 0.5f, 2.875f, 1.0f, 0.5f, 1.5f, 1.0f, 2.0f,
+// 1.0f, 2.0f, 0.0f,}));
+//
+// // Issue 207, comment #1, http://code.google.com/p/libgdx/issues/detail?id=207#c1
+// testCases.add(new TestCase(new float[] {72.42465f, 197.07095f, 78.485535f, 189.92776f, 86.12059f, 180.92929f, 99.68253f,
+// 164.94557f, 105.24325f, 165.79604f, 107.21862f, 166.09814f, 112.41958f, 162.78253f, 113.73238f, 161.94562f, 123.29477f,
+// 167.93805f, 126.70667f, 170.07617f, 73.22717f, 199.51062f,}));
+//
+// // Issue 207, comment #11, http://code.google.com/p/libgdx/issues/detail?id=207#c11
+// // Also on issue 1081, http://code.google.com/p/libgdx/issues/detail?id=1081
+// testCases.add(new TestCase(new float[] {2400.0f, 480.0f, 2400.0f, 176.0f, 1920.0f, 480.0f, 1920.0459f, 484.22314f,
+// 1920.1797f, 487.91016f, 1920.3955f, 491.0874f, 1920.6875f, 493.78125f, 1921.0498f, 496.01807f, 1921.4766f, 497.82422f,
+// 1921.9619f, 499.22607f, 1922.5f, 500.25f, 1923.085f, 500.92236f, 1923.7109f, 501.26953f, 1924.3721f, 501.31787f,
+// 1925.0625f, 501.09375f, 1925.7764f, 500.62354f, 1926.5078f, 499.9336f, 1927.251f, 499.0503f, 1928.0f, 498.0f, 1928.749f,
+// 496.80908f, 1929.4922f, 495.5039f, 1930.2236f, 494.11084f, 1930.9375f, 492.65625f, 1931.6279f, 491.1665f, 1932.2891f,
+// 489.66797f, 1932.915f, 488.187f, 1933.5f, 486.75f, 1934.0381f, 485.3833f, 1934.5234f, 484.11328f, 1934.9502f, 482.9663f,
+// 1935.3125f, 481.96875f, 1935.6045f, 481.14697f, 1935.8203f, 480.52734f, 1935.9541f, 480.13623f, 1936.0f, 480.0f,}));
+//
+// // Issue 1407, http://code.google.com/p/libgdx/issues/detail?id=1407
+// testCases.add(new TestCase(new float[] {3.914329f, 1.9008259f, 4.414321f, 1.903619f, 4.8973203f, 1.9063174f, 5.4979978f,
+// 1.9096732f,}, true));
+//
+// // Issue 1407, http://code.google.com/p/libgdx/issues/detail?id=1407,
+// // with an additional point to show what is happening.
+// testCases.add(new TestCase(new float[] {3.914329f, 1.9008259f, 4.414321f, 1.903619f, 4.8973203f, 1.9063174f, 5.4979978f,
+// 1.9096732f, 4, 4,}));
+//
+// casesX = (int)Math.ceil(Math.sqrt(testCases.size()));
+// casesY = (int)Math.ceil((float)testCases.size() / casesX);
+//
+// Gdx.input.setInputProcessor(new InputAdapter() {
+// @Override
+// public boolean keyDown (int keycode) {
+// switch (keycode) {
+// case Keys.RIGHT:
+// cycle(1);
+// break;
+// case Keys.LEFT:
+// cycle(-1);
+// break;
+// case Keys.SPACE:
+// reverse();
+// break;
+// default:
+// return super.keyDown(keycode);
+// }
+// return true;
+// }
+// });
+// }
+//
+// @Override
+// public void render () {
+// Gdx.gl.glClearColor(1, 1, 1, 1);
+// Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+//
+// int w = Gdx.graphics.getWidth();
+// int h = Gdx.graphics.getHeight();
+// Gdx.gl20.glViewport(0, 0, w, h);
+//
+// final float M = 0.1f;
+// Gdx.gl10.glMatrixMode(GL10.GL_PROJECTION);
+// Gdx.gl10.glLoadIdentity();
+// Gdx.gl10.glOrthof(-M, casesX * (1 + M), -M, casesY * (1 + M), -1, 1);
+// Gdx.gl10.glMatrixMode(GL10.GL_MODELVIEW);
+// Gdx.gl10.glLoadIdentity();
+//
+// int x = 0;
+// int y = 0;
+// for (TestCase testCase : testCases) {
+// Gdx.gl10.glPushMatrix();
+// Gdx.gl10.glTranslatef(x * (1 + M), y * (1 + M), 0);
+// testCase.render();
+// Gdx.gl10.glPopMatrix();
+//
+// x++;
+// if (x >= casesX) {
+// x = 0;
+// y++;
+// }
+// }
+// }
+//
+// @Override
+// public void dispose () {
+// for (TestCase testCase : testCases) {
+// testCase.dispose();
+// }
+// }
+//
+// void cycle (int step) {
+// for (TestCase testCase : testCases) {
+// testCase.cycle(step);
+// }
+// }
+//
+// void reverse () {
+// for (TestCase testCase : testCases) {
+// testCase.reverse();
+// }
+// }
+//
+// static final Color VALID_COLOR = new Color(0.8f, 1.0f, 0.8f, 1.0f);
+// static final Color INVALID_COLOR = new Color(1.0f, 0.8f, 0.8f, 1.0f);
+//
+// private class TestCase implements Disposable {
+// final FloatArray polygon;
+// final boolean invalid;
+//
+// final Mesh polygonMesh;
+// final Mesh interiorMesh;
+// final Mesh triangleOutlineMesh;
+// final Rectangle boundingRect;
+//
+// public TestCase (float[] p) {
+// this(p, false);
+// }
+//
+// public TestCase (float[] p, boolean invalid) {
+// this.invalid = invalid;
+// polygon = new FloatArray(p);
+//
+// int numPolygonVertices = polygon.size;
+// Vector2 min = new Vector2(Float.MAX_VALUE, Float.MAX_VALUE);
+// Vector2 max = new Vector2(-Float.MAX_VALUE, -Float.MAX_VALUE);
+// for (int i = 0; i < numPolygonVertices; i++) {
+// float x = polygon.get(i++);
+// float y = polygon.get(i);
+// min.x = Math.min(min.x, x);
+// min.y = Math.min(min.y, y);
+// max.x = Math.max(max.x, x);
+// max.y = Math.max(max.y, y);
+// }
+// boundingRect = new Rectangle(min.x, min.y, Math.max(0.001f, max.x - min.x), Math.max(0.001f, max.y - min.y));
+//
+// int numTriangles = Math.max(0, polygon.size / 2 - 2);
+// VertexAttributes position = new VertexAttributes(
+// new VertexAttribute(Usage.Position, 2, ShaderProgram.POSITION_ATTRIBUTE));
+// VertexAttributes positionAndColor = new VertexAttributes(new VertexAttribute(Usage.Position, 2,
+// ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.Color, 4, ShaderProgram.COLOR_ATTRIBUTE));
+// polygonMesh = new Mesh(true, polygon.size / 2, 0, position);
+// interiorMesh = new Mesh(true, 3 * numTriangles, 0, positionAndColor);
+// triangleOutlineMesh = new Mesh(true, 6 * numTriangles, 0, position);
+//
+// triangulate();
+// }
+//
+// private void triangulate () {
+// ShortArray triangles = new EarClippingTriangulator().computeTriangles(polygon);
+//
+// FloatArray triangleOutlines = new FloatArray(triangles.size * 2);
+// for (int i = 0; i < triangles.size; i += 3) {
+// float ax = polygon.get(triangles.get(i) * 2);
+// float ay = polygon.get(triangles.get(i) * 2 + 1);
+// float bx = polygon.get(triangles.get(i + 1) * 2);
+// float by = polygon.get(triangles.get(i + 1) * 2 + 1);
+// float cx = polygon.get(triangles.get(i + 2) * 2);
+// float cy = polygon.get(triangles.get(i + 2) * 2 + 1);
+// triangleOutlines.add(ax);
+// triangleOutlines.add(ay);
+// triangleOutlines.add(bx);
+// triangleOutlines.add(by);
+// triangleOutlines.add(bx);
+// triangleOutlines.add(by);
+// triangleOutlines.add(cx);
+// triangleOutlines.add(cy);
+// triangleOutlines.add(cx);
+// triangleOutlines.add(cy);
+// triangleOutlines.add(ax);
+// triangleOutlines.add(ay);
+// }
+//
+// polygonMesh.setVertices(polygon.items, 0, polygon.size);
+// interiorMesh.setVertices(listToColoredVertexArray(polygon, triangles, getColor()));
+// triangleOutlineMesh.setVertices(triangleOutlines.items, 0, triangleOutlines.size);
+// }
+//
+// public void cycle (int step) {
+// if (polygon.size == 0) {
+// return;
+// }
+// while (step > 0) {
+// polygon.insert(0, polygon.pop());
+// polygon.insert(0, polygon.pop());
+// --step;
+// }
+// while (step < 0) {
+// polygon.add(polygon.removeIndex(0));
+// ++step;
+// }
+// triangulate();
+// }
+//
+// public void reverse () {
+// float[] vertices = polygon.items;
+// for (int i = 0, lastIndex = polygon.size - 2, n = polygon.size / 2; i < n; i++) {
+// int ii = lastIndex - i;
+// float temp = vertices[i];
+// vertices[i] = vertices[ii];
+// vertices[ii] = temp;
+// i++;
+// ii++;
+// temp = vertices[i];
+// vertices[i] = vertices[ii];
+// vertices[ii] = temp;
+// }
+// }
+//
+// private Color getColor () {
+// if (invalid) {
+// return INVALID_COLOR;
+// } else {
+// return VALID_COLOR;
+// }
+// }
+//
+// public void render () {
+// Gdx.gl10.glScalef(1 / boundingRect.width, 1 / boundingRect.height, 1);
+// Gdx.gl10.glTranslatef(-boundingRect.x, -boundingRect.y, 0);
+//
+// interiorMesh.render(GL10.GL_TRIANGLES);
+//
+// Gdx.gl10.glColor4f(0.4f, 0.4f, 0.4f, 1.0f);
+// Gdx.gl10.glLineWidth(1.0f);
+// triangleOutlineMesh.render(GL10.GL_LINES);
+//
+// Gdx.gl10.glColor4f(0.3f, 0.0f, 0.0f, 1.0f);
+// Gdx.gl10.glLineWidth(2.0f);
+// polygonMesh.render(GL10.GL_LINE_LOOP);
+// }
+//
+// @Override
+// public void dispose () {
+// polygonMesh.dispose();
+// interiorMesh.dispose();
+// triangleOutlineMesh.dispose();
+// }
+// }
+//
+// static float[] listToColoredVertexArray (FloatArray vertices, ShortArray triangles, Color color) {
+// int n = triangles.size;
+// float[] array = new float[n * 6];
+// int i = 0;
+// int j = 0;
+// for (int k = 0; k < n; k++, j++) {
+// float percent = n <= 3 ? 1 : (j / 3) / (float)(n / 3 - 1);
+// float brightness = 0.3f + 0.4f * percent;
+// array[i++] = vertices.get(triangles.get(k) * 2);
+// array[i++] = vertices.get(triangles.get(k) * 2 + 1);
+// array[i++] = color.r * brightness;
+// array[i++] = color.g * brightness;
+// array[i++] = color.b * brightness;
+// array[i++] = 1;
+// }
+// return array;
+// }
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
index 3da8a31..c8d08c4 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
@@ -37,7 +37,7 @@ import com.badlogic.gdx.tests.utils.GdxTest;
 public class EdgeDetectionTest extends GdxTest {
 
 	FPSLogger logger;
-	//ShaderProgram shader;
+	// ShaderProgram shader;
 	Model scene;
 	ModelInstance sceneInstance;
 	ModelBatch modelBatch;
@@ -55,11 +55,11 @@ public class EdgeDetectionTest extends GdxTest {
 
 	public void create () {
 		ShaderProgram.pedantic = false;
-		/*shader = new ShaderProgram(Gdx.files.internal("data/shaders/default.vert").readString(), Gdx.files.internal(
-			"data/shaders/depthtocolor.frag").readString());
-		if (!shader.isCompiled()) {
-			Gdx.app.log("EdgeDetectionTest", "couldn't compile scene shader: " + shader.getLog());
-		}*/
+		/*
+		 * shader = new ShaderProgram(Gdx.files.internal("data/shaders/default.vert").readString(), Gdx.files.internal(
+		 * "data/shaders/depthtocolor.frag").readString()); if (!shader.isCompiled()) { Gdx.app.log("EdgeDetectionTest",
+		 * "couldn't compile scene shader: " + shader.getLog()); }
+		 */
 		batchShader = new ShaderProgram(Gdx.files.internal("data/shaders/batch.vert").readString(), Gdx.files.internal(
 			"data/shaders/convolution.frag").readString());
 		if (!batchShader.isCompiled()) {
@@ -69,7 +69,7 @@ public class EdgeDetectionTest extends GdxTest {
 		ObjLoader objLoader = new ObjLoader();
 		scene = objLoader.loadObj(Gdx.files.internal("data/scene.obj"));
 		sceneInstance = new ModelInstance(scene);
-		modelBatch = new ModelBatch();		
+		modelBatch = new ModelBatch();
 		fbo = new FrameBuffer(Format.RGB565, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(0, 0, 10);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTextureTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTextureTest.java
index 253e9fd..062c7b3 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTextureTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTextureTest.java
@@ -42,64 +42,40 @@ public class FloatTextureTest extends GdxTest {
 	public void create () {
 		fb = new FrameBuffer(Format.RGBA8888, 200, 100, false);
 		ffb = new FloatFrameBuffer(200, 100, false);
-		
-		
-		String vertexShader = "attribute vec4 a_position; " +
-			"varying vec2 v_position; " +
-
-			"void main(){ " +
-			"    v_position = a_position.xy; " +
-			"    gl_Position = vec4(a_position.x, a_position.y, 0.0, 1.0); " +
-			"}";
-		
-		String fragmentShader = "#ifdef GL_ES\n" + "precision mediump float;\n" + "#endif\n" +
-			"uniform vec3 u_color;" +
-			"uniform vec2 u_viewport; " +
-	
-			"void main(void){ " +
-			"    vec2 uv = gl_FragCoord.xy/u_viewport; " +
-			"    float res = mix(0.0, 0.0001, uv.x); " + // <--- regular (non-float) texture loses precision here, res == 0 for every fragment
-			"    gl_FragColor = vec4(u_color, res); " +
-		"}";
-		
+
+		String vertexShader = "attribute vec4 a_position; " + "varying vec2 v_position; " +
+
+		"void main(){ " + "    v_position = a_position.xy; " + "    gl_Position = vec4(a_position.x, a_position.y, 0.0, 1.0); "
+			+ "}";
+
+		String fragmentShader = "#ifdef GL_ES\n" + "precision mediump float;\n" + "#endif\n" + "uniform vec3 u_color;"
+			+ "uniform vec2 u_viewport; " +
+
+			"void main(void){ " + "    vec2 uv = gl_FragCoord.xy/u_viewport; " + "    float res = mix(0.0, 0.0001, uv.x); " + // <---
+// regular (non-float) texture loses precision here, res == 0 for every fragment
+			"    gl_FragColor = vec4(u_color, res); " + "}";
+
 		fbshader = new ShaderProgram(vertexShader, fragmentShader);
-		
-		vertexShader = "attribute vec4 a_position; "+
-			"attribute vec4 a_color; "+
-			"attribute vec2 a_texCoords; "+
-			"uniform mat4 u_worldView; "+
-			"varying vec4 v_color; "+
-			"varying vec2 v_texCoords; "+
-			
-			"void main() "+                  
-			"{ "+                            
-			"    v_color = a_color; "+ 
-			"    v_texCoords = a_texCoords; "+ 
-			"    gl_Position =  u_worldView * a_position; "+
-			"}";
-		
-		fragmentShader = "#ifdef GL_ES\n" + "precision mediump float;\n" + "#endif\n" +
-			"varying vec2 v_texCoords; " +
-			"uniform sampler2D u_fbtex, u_ffbtex; " +
-			
-			"vec4 getValue(vec4 col) {"+
-			"    if (col.a > 0.00005)" +
-			"        return vec4(col.rgb, 1.0);" +
-			"    else"+
-			"        return vec4(0.0, 0.0, 0.0, 1.0);"+
-			"}"+
-			
-			"void main() " +                                  
-			"{ " +
-			"    if (v_texCoords.y < 0.45)" +
-			"        gl_FragColor = getValue(texture2D(u_fbtex, v_texCoords)); " +
-			"    else if (v_texCoords.y > 0.55)" +
-			"        gl_FragColor = getValue(texture2D(u_ffbtex, v_texCoords)); " +
-			"}";
-		
+
+		vertexShader = "attribute vec4 a_position; " + "attribute vec4 a_color; " + "attribute vec2 a_texCoords; "
+			+ "uniform mat4 u_worldView; " + "varying vec4 v_color; " + "varying vec2 v_texCoords; " +
+
+			"void main() " + "{ " + "    v_color = a_color; " + "    v_texCoords = a_texCoords; "
+			+ "    gl_Position =  u_worldView * a_position; " + "}";
+
+		fragmentShader = "#ifdef GL_ES\n" + "precision mediump float;\n" + "#endif\n" + "varying vec2 v_texCoords; "
+			+ "uniform sampler2D u_fbtex, u_ffbtex; " +
+
+			"vec4 getValue(vec4 col) {" + "    if (col.a > 0.00005)" + "        return vec4(col.rgb, 1.0);" + "    else"
+			+ "        return vec4(0.0, 0.0, 0.0, 1.0);" + "}" +
+
+			"void main() " + "{ " + "    if (v_texCoords.y < 0.45)"
+			+ "        gl_FragColor = getValue(texture2D(u_fbtex, v_texCoords)); " + "    else if (v_texCoords.y > 0.55)"
+			+ "        gl_FragColor = getValue(texture2D(u_ffbtex, v_texCoords)); " + "}";
+
 		shader = new ShaderProgram(vertexShader, fragmentShader);
 		createQuad();
-		
+
 		screenCamera = new OrthographicCamera(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		createScreenQuad();
 	}
@@ -109,61 +85,52 @@ public class FloatTextureTest extends GdxTest {
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		fb.begin();
-			fbshader.begin();
-			fbshader.setUniformf("u_viewport", fb.getWidth(), fb.getHeight());
-			fbshader.setUniformf("u_color", 0.0f, 1.0f, 0.0f);
-			quad.render(fbshader, GL20.GL_TRIANGLES);
-			fbshader.end();
+		fbshader.begin();
+		fbshader.setUniformf("u_viewport", fb.getWidth(), fb.getHeight());
+		fbshader.setUniformf("u_color", 0.0f, 1.0f, 0.0f);
+		quad.render(fbshader, GL20.GL_TRIANGLES);
+		fbshader.end();
 		fb.end();
-		
+
 		ffb.begin();
-			fbshader.begin();
-			fbshader.setUniformf("u_viewport", ffb.getWidth(), ffb.getHeight());
-			fbshader.setUniformf("u_color", 1.0f, 0.0f, 0.0f);
-			quad.render(fbshader, GL20.GL_TRIANGLES);
-			fbshader.end();
+		fbshader.begin();
+		fbshader.setUniformf("u_viewport", ffb.getWidth(), ffb.getHeight());
+		fbshader.setUniformf("u_color", 1.0f, 0.0f, 0.0f);
+		quad.render(fbshader, GL20.GL_TRIANGLES);
+		fbshader.end();
 		ffb.end();
-		
+
 		shader.begin();
 		fb.getColorBufferTexture().bind(0);
 		ffb.getColorBufferTexture().bind(1);
-      shader.setUniformMatrix("u_worldView", screenCamera.combined);
-      shader.setUniformi("u_fbtex", 0);
-      shader.setUniformi("u_ffbtex", 1);
-      screenQuad.render(shader, GL20.GL_TRIANGLES);
-      shader.end();
+		shader.setUniformMatrix("u_worldView", screenCamera.combined);
+		shader.setUniformi("u_fbtex", 0);
+		shader.setUniformi("u_ffbtex", 1);
+		screenQuad.render(shader, GL20.GL_TRIANGLES);
+		shader.end();
 	}
-	
-	
-	private void createQuad() {
-		if (quad != null)
-			return;
-		quad = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3,
-	        "a_position"), new VertexAttribute(Usage.Color, 4, "a_color"),
-	        new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
-
-	    quad.setVertices(new float[]{-1, -1, 0, 1, 1, 1, 1, 0, 1,
-	                1, -1, 0, 1, 1, 1, 1, 1, 1,
-	                1, 1, 0, 1, 1, 1, 1, 1, 0,
-	                -1, 1, 0, 1, 1, 1, 1, 0, 0});
-		quad.setIndices(new short[]{0, 1, 2, 2, 3, 0});
+
+	private void createQuad () {
+		if (quad != null) return;
+		quad = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.Color, 4,
+			"a_color"), new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
+
+		quad.setVertices(new float[] {-1, -1, 0, 1, 1, 1, 1, 0, 1, 1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, -1, 1, 0,
+			1, 1, 1, 1, 0, 0});
+		quad.setIndices(new short[] {0, 1, 2, 2, 3, 0});
 	}
-	
-	private void createScreenQuad() {
-		if (screenQuad != null)
-			return;
-		screenQuad = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3,
-	        "a_position"), new VertexAttribute(Usage.Color, 4, "a_color"),
-	        new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
-
-	    Vector3 vec0 = new Vector3(0, 0, 0);
-	    screenCamera.unproject(vec0);
-	    Vector3 vec1 = new Vector3(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), 0);
-	    screenCamera.unproject(vec1);
-	    screenQuad.setVertices(new float[]{vec0.x, vec0.y, 0, 1, 1, 1, 1, 0, 1,
-	                vec1.x, vec0.y, 0, 1, 1, 1, 1, 1, 1,
-	                vec1.x, vec1.y, 0, 1, 1, 1, 1, 1, 0,
-	                vec0.x, vec1.y, 0, 1, 1, 1, 1, 0, 0});
-		screenQuad.setIndices(new short[]{0, 1, 2, 2, 3, 0});
+
+	private void createScreenQuad () {
+		if (screenQuad != null) return;
+		screenQuad = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.Color, 4,
+			"a_color"), new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
+
+		Vector3 vec0 = new Vector3(0, 0, 0);
+		screenCamera.unproject(vec0);
+		Vector3 vec1 = new Vector3(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), 0);
+		screenCamera.unproject(vec1);
+		screenQuad.setVertices(new float[] {vec0.x, vec0.y, 0, 1, 1, 1, 1, 0, 1, vec1.x, vec0.y, 0, 1, 1, 1, 1, 1, 1, vec1.x,
+			vec1.y, 0, 1, 1, 1, 1, 1, 0, vec0.x, vec1.y, 0, 1, 1, 1, 1, 0, 0});
+		screenQuad.setIndices(new short[] {0, 1, 2, 2, 3, 0});
 	}
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
index 3b61cb7..3801f11 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
@@ -52,7 +52,7 @@ public class FramebufferToTextureTest extends GdxTest {
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), true);
 		texture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
 		ObjLoader objLoader = new ObjLoader();
-		mesh =  objLoader.loadObj(Gdx.files.internal("data/cube.obj"));
+		mesh = objLoader.loadObj(Gdx.files.internal("data/cube.obj"));
 		mesh.materials.get(0).set(new TextureAttribute(TextureAttribute.Diffuse, texture));
 		modelInstance = new ModelInstance(mesh);
 		modelBatch = new ModelBatch();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/FreeTypeDisposeTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/FreeTypeDisposeTest.java
index 45a3bd8..ed34518 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/FreeTypeDisposeTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/FreeTypeDisposeTest.java
@@ -12,44 +12,45 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
-import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
-import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.FreeTypeBitmapFontData;
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.g2d.BitmapFont;
+import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
+import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.FreeTypeBitmapFontData;
 import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.FreeTypeFontParameter;
-import com.badlogic.gdx.tests.utils.GdxTest;
-
-public class FreeTypeDisposeTest extends GdxTest {
-	BitmapFont font;
-	
-	@Override
-	public void create () {
-		super.create();
-	}
-	
-	public void render() {
-		if(Gdx.input.justTouched()) {
-			for(int i = 0; i < 10; i++) {
-				if(font != null) {
-					font.dispose();
-				}
-				FileHandle fontFile = Gdx.files.internal("data/arial.ttf");
+import com.badlogic.gdx.tests.utils.GdxTest;
+
+public class FreeTypeDisposeTest extends GdxTest {
+	BitmapFont font;
+
+	@Override
+	public void create () {
+		super.create();
+	}
+
+	public void render () {
+		if (Gdx.input.justTouched()) {
+			for (int i = 0; i < 10; i++) {
+				if (font != null) {
+					font.dispose();
+				}
+				FileHandle fontFile = Gdx.files.internal("data/arial.ttf");
 				FreeTypeFontGenerator generator = new FreeTypeFontGenerator(fontFile);
-				
+
 				FreeTypeFontParameter parameter = new FreeTypeFontParameter();
 				parameter.size = 15;
-				
-				font = generator.generateFont(parameter);		
-				generator.dispose();
-			}
-			for(int i = 0; i < 10; i++) System.gc();
-			Gdx.app.log("FreeTypeDisposeTest", "generated 10 fonts");
-			Gdx.app.log("FreeTypeDisposeTest", Gdx.app.getJavaHeap() + ", " + Gdx.app.getNativeHeap());
-		}
-	}
-}
\ No newline at end of file
+
+				font = generator.generateFont(parameter);
+				generator.dispose();
+			}
+			for (int i = 0; i < 10; i++)
+				System.gc();
+			Gdx.app.log("FreeTypeDisposeTest", "generated 10 fonts");
+			Gdx.app.log("FreeTypeDisposeTest", Gdx.app.getJavaHeap() + ", " + Gdx.app.getNativeHeap());
+		}
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/FullscreenTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/FullscreenTest.java
index 53f4973..e7ed10b 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/FullscreenTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/FullscreenTest.java
@@ -49,7 +49,7 @@ public class FullscreenTest extends GdxTest {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		if (Gdx.input.justTouched()) {
-			if(fullscreen) {
+			if (fullscreen) {
 				Gdx.graphics.setDisplayMode(480, 320, false);
 				fullscreen = false;
 			} else {
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java
index 3e6d5b4..db9b4ce 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java
@@ -12,8 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -40,30 +40,30 @@ public class GamepadTest extends GdxTest {
 	Stage stage;
 	ScrollPane scrollPane;
 	List<String> console;
-	
+
 	@Override
 	public void create () {
 		setupUi();
-		
+
 		// print the currently connected controllers to the console
 		print("Controllers: " + Controllers.getControllers().size);
 		int i = 0;
-		for(Controller controller: Controllers.getControllers()) {
+		for (Controller controller : Controllers.getControllers()) {
 			print("#" + i++ + ": " + controller.getName());
 		}
-		if(Controllers.getControllers().size == 0) print("No controllers attached");
-		
+		if (Controllers.getControllers().size == 0) print("No controllers attached");
+
 		// setup the listener that prints events to the console
 		Controllers.addListener(new ControllerListener() {
-			public int indexOf(Controller controller) {
+			public int indexOf (Controller controller) {
 				return Controllers.getControllers().indexOf(controller, true);
 			}
-			
+
 			@Override
 			public void connected (Controller controller) {
 				print("connected " + controller.getName());
 				int i = 0;
-				for(Controller c: Controllers.getControllers()) {
+				for (Controller c : Controllers.getControllers()) {
 					print("#" + i++ + ": " + c.getName());
 				}
 			}
@@ -72,10 +72,10 @@ public class GamepadTest extends GdxTest {
 			public void disconnected (Controller controller) {
 				print("disconnected " + controller.getName());
 				int i = 0;
-				for(Controller c: Controllers.getControllers()) {
+				for (Controller c : Controllers.getControllers()) {
 					print("#" + i++ + ": " + c.getName());
 				}
-				if(Controllers.getControllers().size == 0) print("No controllers attached");
+				if (Controllers.getControllers().size == 0) print("No controllers attached");
 			}
 
 			@Override
@@ -121,23 +121,23 @@ public class GamepadTest extends GdxTest {
 			}
 		});
 	}
-	
-	void print(String message) {
+
+	void print (String message) {
 		String[] lines = console.getItems().toArray();
 		String[] newLines = new String[lines.length + 1];
 		System.arraycopy(lines, 0, newLines, 0, lines.length);
-		newLines[newLines.length-1] = message;
+		newLines[newLines.length - 1] = message;
 		console.setItems(newLines);
 		scrollPane.invalidate();
 		scrollPane.validate();
 		scrollPane.setScrollPercentY(1.0f);
 	}
-	
-	void clear() {
+
+	void clear () {
 		console.setItems(new String[0]);
 	}
 
-	private void setupUi() {
+	private void setupUi () {
 		// setup a tiny ui with a console and a clear button.
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		stage = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
@@ -159,7 +159,7 @@ public class GamepadTest extends GdxTest {
 		});
 		Gdx.input.setInputProcessor(stage);
 	}
-	
+
 	@Override
 	public void resize (int width, int height) {
 		ui.setSize(width, height);
@@ -173,4 +173,4 @@ public class GamepadTest extends GdxTest {
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java
index 29f6f26..62deea4 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java
@@ -72,7 +72,7 @@ public class GestureDetectorTest extends GdxTest implements ApplicationListener
 			camera.position.add(-deltaX * camera.zoom, deltaY * camera.zoom, 0);
 			return false;
 		}
-		
+
 		@Override
 		public boolean panStop (float x, float y, int pointer, int button) {
 			Gdx.app.log("GestureDetectorTest", "pan stop at " + x + ", " + y);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/HexagonalTiledMapTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/HexagonalTiledMapTest.java
index 5487b7b..119ed68 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/HexagonalTiledMapTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/HexagonalTiledMapTest.java
@@ -32,64 +32,64 @@ import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
 
 public class HexagonalTiledMapTest extends GdxTest {
-		TiledMap map;
-		OrthographicCamera camera;
-		OrthoCamController cameraController;
-		HexagonalTiledMapRenderer renderer;
-		Texture hexture;
-		
-		@Override
-		public void create() {
-			super.create();
-			float w = Gdx.graphics.getWidth();
-			float h = Gdx.graphics.getHeight();
-			
-			camera = new OrthographicCamera();
-			camera.setToOrtho(false, (w / h) * 480, 480);
-			camera.update();
-			
-			cameraController = new OrthoCamController(camera);
-			Gdx.input.setInputProcessor(cameraController);
-			
-			hexture = new Texture(Gdx.files.internal("data/maps/tiled/hex/hexes.png"));
-			TextureRegion[][] hexes = TextureRegion.split(hexture, 112, 97);
-			map = new TiledMap();
-			MapLayers layers = map.getLayers();
-			TiledMapTile[] tiles = new TiledMapTile[3];
-			tiles[0] = new StaticTiledMapTile(new TextureRegion(hexes[0][0]));
-			tiles[1] = new StaticTiledMapTile(new TextureRegion(hexes[0][1]));
-			tiles[2] = new StaticTiledMapTile(new TextureRegion(hexes[1][0]));
-			
-			for (int l = 0; l < 1; l++) {
-				TiledMapTileLayer layer = new TiledMapTileLayer(45, 30, 112, 97);
-				for (int y = 0; y < 30; y++) {
-					for (int x = 0; x < 45; x++) {
-						int id = (int)(Math.random() * 3);						
-						Cell cell = new Cell();
-						cell.setTile(tiles[id]);
-						layer.setCell(x, y, cell);
-					}	
+	TiledMap map;
+	OrthographicCamera camera;
+	OrthoCamController cameraController;
+	HexagonalTiledMapRenderer renderer;
+	Texture hexture;
+
+	@Override
+	public void create () {
+		super.create();
+		float w = Gdx.graphics.getWidth();
+		float h = Gdx.graphics.getHeight();
+
+		camera = new OrthographicCamera();
+		camera.setToOrtho(false, (w / h) * 480, 480);
+		camera.update();
+
+		cameraController = new OrthoCamController(camera);
+		Gdx.input.setInputProcessor(cameraController);
+
+		hexture = new Texture(Gdx.files.internal("data/maps/tiled/hex/hexes.png"));
+		TextureRegion[][] hexes = TextureRegion.split(hexture, 112, 97);
+		map = new TiledMap();
+		MapLayers layers = map.getLayers();
+		TiledMapTile[] tiles = new TiledMapTile[3];
+		tiles[0] = new StaticTiledMapTile(new TextureRegion(hexes[0][0]));
+		tiles[1] = new StaticTiledMapTile(new TextureRegion(hexes[0][1]));
+		tiles[2] = new StaticTiledMapTile(new TextureRegion(hexes[1][0]));
+
+		for (int l = 0; l < 1; l++) {
+			TiledMapTileLayer layer = new TiledMapTileLayer(45, 30, 112, 97);
+			for (int y = 0; y < 30; y++) {
+				for (int x = 0; x < 45; x++) {
+					int id = (int)(Math.random() * 3);
+					Cell cell = new Cell();
+					cell.setTile(tiles[id]);
+					layer.setCell(x, y, cell);
 				}
-				layers.add(layer);						
 			}
-			
-			renderer = new HexagonalTiledMapRenderer(map);
+			layers.add(layer);
 		}
 
-		@Override
-		public void render() {
-			Gdx.gl.glClearColor(0.25f, 0.25f, 0.25f, 1f);
-			Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-			camera.update();
-			renderer.setView(camera);
-			renderer.render();
-		}
-		
-		@Override
-		public void dispose () {
-			renderer.dispose();
-			hexture.dispose();
-			map.dispose();
-		}
-		
+		renderer = new HexagonalTiledMapRenderer(map);
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(0.25f, 0.25f, 0.25f, 1f);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		camera.update();
+		renderer.setView(camera);
+		renderer.render();
+	}
+
+	@Override
+	public void dispose () {
+		renderer.dispose();
+		hexture.dispose();
+		map.dispose();
+	}
+
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java
index e394c0c..36e99a1 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java
@@ -33,7 +33,6 @@ public class IndexBufferObjectShaderTest extends GdxTest {
 	VertexBufferObject vbo;
 	IndexBufferObject ibo;
 
-
 	@Override
 	public void dispose () {
 		texture.dispose();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/LabelScaleTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/LabelScaleTest.java
index df086cc..4516e34 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/LabelScaleTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/LabelScaleTest.java
@@ -45,7 +45,8 @@ public class LabelScaleTest extends GdxTest {
 
 		Label label1 = new Label("This text is scaled 2x.", skin);
 		label1.setFontScale(2);
-		Label label2 = new Label("This text is scaled. This text is scaled. This text is scaled. This text is scaled. This text is scaled. ", skin);
+		Label label2 = new Label(
+			"This text is scaled. This text is scaled. This text is scaled. This text is scaled. This text is scaled. ", skin);
 		label2.setWrap(true);
 		label2.setFontScale(0.75f, 0.75f);
 
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/MultitouchTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/MultitouchTest.java
index aadbd53..dcd0bf9 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/MultitouchTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/MultitouchTest.java
@@ -31,8 +31,8 @@ public class MultitouchTest extends GdxTest {
 	OrthographicCamera camera;
 	long startTime = TimeUtils.nanoTime();
 
-	Color[] colors = {Color.RED, Color.BLUE, Color.GREEN, Color.WHITE, Color.PINK, Color.ORANGE, 
-		Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.LIGHT_GRAY, Color.GRAY, Color.DARK_GRAY};
+	Color[] colors = {Color.RED, Color.BLUE, Color.GREEN, Color.WHITE, Color.PINK, Color.ORANGE, Color.YELLOW, Color.MAGENTA,
+		Color.CYAN, Color.LIGHT_GRAY, Color.GRAY, Color.DARK_GRAY};
 
 	@Override
 	public void render () {
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/NinePatchTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/NinePatchTest.java
index d7c8856..d709331 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/NinePatchTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/NinePatchTest.java
@@ -12,8 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -35,31 +35,31 @@ public class NinePatchTest extends GdxTest {
 	private static class TestPatch {
 		public final String name;
 		public final NinePatch ninePatch;
-		
-		TestPatch(String n) {
+
+		TestPatch (String n) {
 			this.name = n;
-			this.ninePatch = NinePatchTest.newNinePatch(); 
+			this.ninePatch = NinePatchTest.newNinePatch();
 		}
 
-		TestPatch(String n, NinePatch np) {
+		TestPatch (String n, NinePatch np) {
 			this.name = n;
 			this.ninePatch = np;
 		}
 	}
-	
+
 	private OrthographicCamera camera;
 	private SpriteBatch b;
 	private Array<TestPatch> ninePatches = new Array<TestPatch>(10);
 
 	private final long start = System.currentTimeMillis();
-	
+
 	@Override
-	public void create () { 
+	public void create () {
 		TestPatch tp;
 
 		// Create all the NinePatches to test
 		ninePatches.add(new TestPatch("default"));
-		
+
 		tp = new TestPatch("20px width");
 		int bWidth = 20;
 		tp.ninePatch.setLeftWidth(bWidth);
@@ -67,148 +67,148 @@ public class NinePatchTest extends GdxTest {
 		tp.ninePatch.setTopHeight(bWidth);
 		tp.ninePatch.setBottomHeight(bWidth);
 		ninePatches.add(tp);
-		
+
 		tp = new TestPatch("fat left");
 		tp.ninePatch.setLeftWidth(3 * tp.ninePatch.getRightWidth());
 		ninePatches.add(tp);
-		
+
 		tp = new TestPatch("fat top");
 		tp.ninePatch.setTopHeight(3 * tp.ninePatch.getBottomHeight());
 		ninePatches.add(tp);
-		
+
 		tp = new TestPatch("degenerate", newDegenerateNinePatch());
 		ninePatches.add(tp);
-		
+
 		tp = new TestPatch("upper-left quad", newULQuadPatch());
 		ninePatches.add(tp);
-		
+
 		tp = new TestPatch("no middle row", newMidlessPatch());
 		ninePatches.add(tp);
-		
+
 		b = new SpriteBatch();
 	}
-	
-	// Make a new 'pixmapSize' square texture region with 'patchSize' patches in it.  Each patch is a different color.
-	static TextureRegion newPatchPix(int patchSize, int pixmapSize) {
-		final int pixmapDim = MathUtils.nextPowerOfTwo(pixmapSize);  
+
+	// Make a new 'pixmapSize' square texture region with 'patchSize' patches in it. Each patch is a different color.
+	static TextureRegion newPatchPix (int patchSize, int pixmapSize) {
+		final int pixmapDim = MathUtils.nextPowerOfTwo(pixmapSize);
 
 		Pixmap p = new Pixmap(pixmapDim, pixmapDim, Pixmap.Format.RGBA8888);
 		p.setColor(1, 1, 1, 0);
 		p.fill();
-						
+
 		for (int x = 0; x < pixmapSize; x += patchSize) {
 			for (int y = 0; y < pixmapSize; y += patchSize) {
-				p.setColor(x/(float)pixmapSize, y/(float)pixmapSize, 1.0f, 1.0f);
+				p.setColor(x / (float)pixmapSize, y / (float)pixmapSize, 1.0f, 1.0f);
 				p.fillRectangle(x, y, patchSize, patchSize);
 			}
 		}
-		
-		return new TextureRegion(new Texture(p), pixmapSize, pixmapSize); 
+
+		return new TextureRegion(new Texture(p), pixmapSize, pixmapSize);
 	}
-	
-	// Make a degenerate NinePatch 
-	static NinePatch newDegenerateNinePatch() {
-		final int patchSize = 8; 
+
+	// Make a degenerate NinePatch
+	static NinePatch newDegenerateNinePatch () {
+		final int patchSize = 8;
 		final int pixmapSize = patchSize * 3;
 		TextureRegion tr = newPatchPix(patchSize, pixmapSize);
 		return new NinePatch(tr);
 	}
 
 	// Make a basic NinePatch with different colors in each of the nine patches
-	static NinePatch newNinePatch() {
-		final int patchSize = 8; 
+	static NinePatch newNinePatch () {
+		final int patchSize = 8;
 		final int pixmapSize = patchSize * 3;
 		TextureRegion tr = newPatchPix(patchSize, pixmapSize);
-		
+
 		return new NinePatch(tr, patchSize, patchSize, patchSize, patchSize);
 	}
-		
+
 	// Make a upper-left "quad" patch (only 4 patches defined in the top-left corner of the ninepatch)
-	static NinePatch newULQuadPatch() {
-		final int patchSize = 8; 
+	static NinePatch newULQuadPatch () {
+		final int patchSize = 8;
 		final int pixmapSize = patchSize * 2;
-		TextureRegion tr = newPatchPix(patchSize, pixmapSize);		
-		
+		TextureRegion tr = newPatchPix(patchSize, pixmapSize);
+
 		return new NinePatch(tr, patchSize, 0, patchSize, 0);
 	}
 
 	// Make a ninepatch with no middle band, just top three and bottom three.
-	static NinePatch newMidlessPatch() {
-		final int patchSize = 8; 
+	static NinePatch newMidlessPatch () {
+		final int patchSize = 8;
 		final int fullPatchHeight = patchSize * 2;
 		final int fullPatchWidth = patchSize * 3;
-		final int pixmapDim = MathUtils.nextPowerOfTwo(Math.max(fullPatchWidth, fullPatchHeight));  
-		
+		final int pixmapDim = MathUtils.nextPowerOfTwo(Math.max(fullPatchWidth, fullPatchHeight));
+
 		Pixmap testPatch = new Pixmap(pixmapDim, pixmapDim, Pixmap.Format.RGBA8888);
 		testPatch.setColor(1, 1, 1, 0);
 		testPatch.fill();
-						
+
 		for (int x = 0; x < fullPatchWidth; x += patchSize) {
 			for (int y = 0; y < fullPatchHeight; y += patchSize) {
-				testPatch.setColor(x/(float)fullPatchWidth, y/(float)fullPatchHeight, 1.0f, 1.0f);
+				testPatch.setColor(x / (float)fullPatchWidth, y / (float)fullPatchHeight, 1.0f, 1.0f);
 				testPatch.fillRectangle(x, y, patchSize, patchSize);
 			}
 		}
-		
-		return new NinePatch(new TextureRegion(new Texture(testPatch), fullPatchWidth, fullPatchHeight), 
-			patchSize, patchSize, patchSize, patchSize);
+
+		return new NinePatch(new TextureRegion(new Texture(testPatch), fullPatchWidth, fullPatchHeight), patchSize, patchSize,
+			patchSize, patchSize);
 	}
 
 	private float timePassed = 0;
 	private final Color filterColor = new Color();
 	private final Color oldColor = new Color();
-	
+
 	@Override
 	public void render () {
 		final int screenWidth = Gdx.graphics.getWidth();
 		final int screenHeight = Gdx.graphics.getHeight();
-		
+
 		Gdx.gl.glClearColor(0, 0, 0, 0);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		
+
 		timePassed += Gdx.graphics.getDeltaTime();
-		
+
 		b.begin();
 		final int sz = ninePatches.size;
 		final int XGAP = 10;
-		final int pheight = (int)((screenHeight * 0.5f) / ((sz+1) / 2));
+		final int pheight = (int)((screenHeight * 0.5f) / ((sz + 1) / 2));
 		int x = XGAP;
 		int y = 10;
-		
+
 		// Test that batch color is applied to NinePatch
 		if (timePassed < 2) {
 			b.setColor(1, 1, 1, Interpolation.sine.apply(timePassed / 2f));
 		}
-		
+
 		// Test that the various nine patches render
 		for (int i = 0; i < sz; i += 2) {
-			int pwidth = (int)(0.44f * screenWidth); 
+			int pwidth = (int)(0.44f * screenWidth);
 
-			final NinePatch np1 = ninePatches.get(i).ninePatch;	
-			np1.draw(b, x, y, pwidth, pheight);			
-			
-			if (i+1 < sz) {
-				final NinePatch np2 = ninePatches.get(i+1).ninePatch;
+			final NinePatch np1 = ninePatches.get(i).ninePatch;
+			np1.draw(b, x, y, pwidth, pheight);
+
+			if (i + 1 < sz) {
+				final NinePatch np2 = ninePatches.get(i + 1).ninePatch;
 				final int x2 = x + pwidth + XGAP;
 				final int pwidth2 = screenWidth - XGAP - x2;
-				
-				np2.draw(b, x2 , y, pwidth2, pheight);
+
+				np2.draw(b, x2, y, pwidth2, pheight);
 			}
-			
-			y += pheight + 2; 
+
+			y += pheight + 2;
 		}
-		
-		// Dim a np by setting its color.  Also test sending same np to batch twice
+
+		// Dim a np by setting its color. Also test sending same np to batch twice
 		NinePatch np = ninePatches.get(0).ninePatch;
 		oldColor.set(np.getColor());
 		filterColor.set(0.3f, 0.3f, 0.3f, 1.0f);
 		np.setColor(filterColor);
 		np.draw(b, x, y, 100, 30);
 		np.setColor(oldColor);
-		
+
 		b.end();
 	}
-	
+
 	@Override
 	public void resize (int width, int height) {
 		float ratio = ((float)Gdx.graphics.getWidth() / (float)Gdx.graphics.getHeight());
@@ -216,4 +216,4 @@ public class NinePatchTest extends GdxTest {
 		int w = (int)(h * ratio);
 		camera = new OrthographicCamera(w, h);
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/PixelPerfectTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/PixelPerfectTest.java
index 2f276c7..976f2da 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/PixelPerfectTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/PixelPerfectTest.java
@@ -12,52 +12,52 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.tests.utils.GdxTest;
-
-public class PixelPerfectTest extends GdxTest {
-	SpriteBatch batch;
-	OrthographicCamera cam;
-	Texture tex;
-
-	@Override
-	public void create () {
-		Pixmap pixmap = new Pixmap(16, 16, Pixmap.Format.RGBA8888);
-		pixmap.setColor(Color.BLUE);
-		pixmap.fill();
-		pixmap.setColor(Color.RED);
-		pixmap.drawLine(0, 0, 15, 15);
-		pixmap.drawLine(0, 15, 15, 0);
-		
-		tex = new Texture(pixmap);
-		batch = new SpriteBatch();
-		cam = new OrthographicCamera();
-		cam.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-	}
-
-	@Override
-	public void resize (int width, int height) {
-		cam.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-	}
-
-	@Override
-	public void render () {
-		Gdx.gl.glClearColor(1, 0, 1, 1);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		cam.update();
-		batch.setProjectionMatrix(cam.combined);
-		batch.begin();
-		batch.draw(tex, 1, 1);
-		batch.end();
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.OrthographicCamera;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.tests.utils.GdxTest;
+
+public class PixelPerfectTest extends GdxTest {
+	SpriteBatch batch;
+	OrthographicCamera cam;
+	Texture tex;
+
+	@Override
+	public void create () {
+		Pixmap pixmap = new Pixmap(16, 16, Pixmap.Format.RGBA8888);
+		pixmap.setColor(Color.BLUE);
+		pixmap.fill();
+		pixmap.setColor(Color.RED);
+		pixmap.drawLine(0, 0, 15, 15);
+		pixmap.drawLine(0, 15, 15, 0);
+
+		tex = new Texture(pixmap);
+		batch = new SpriteBatch();
+		cam = new OrthographicCamera();
+		cam.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+	}
+
+	@Override
+	public void resize (int width, int height) {
+		cam.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(1, 0, 1, 1);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		cam.update();
+		batch.setProjectionMatrix(cam.combined);
+		batch.begin();
+		batch.draw(tex, 1, 1);
+		batch.end();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java
index 4279e1a..72ed95f 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java
@@ -56,8 +56,8 @@ public class ProjectTest extends GdxTest {
 		cam.far = 200;
 		Random rand = new Random();
 		for (int i = 0; i < instances.length; i++) {
-			instances[i] = new ModelInstance(sphere, rand.nextFloat() * 100 - rand.nextFloat() * 100, 
-				rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * -100 - 3);
+			instances[i] = new ModelInstance(sphere, rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * 100
+				- rand.nextFloat() * 100, rand.nextFloat() * -100 - 3);
 		}
 		batch = new SpriteBatch();
 		font = new BitmapFont();
@@ -72,7 +72,7 @@ public class ProjectTest extends GdxTest {
 		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);
 
 		cam.update();
-		
+
 		modelBatch.begin(cam);
 
 		int visible = 0;
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
index ac6f932..6326c9b 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
@@ -76,7 +76,7 @@ public class ProjectiveTextureTest extends GdxTest {
 		multiplexer.addProcessor(controller);
 		Gdx.input.setInputProcessor(multiplexer);
 
-		//renderer = new ImmediateModeRenderer20(false, true, 0);
+		// renderer = new ImmediateModeRenderer20(false, true, 0);
 	}
 
 	public void setupScene () {
@@ -84,7 +84,7 @@ public class ProjectiveTextureTest extends GdxTest {
 			Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE));
 		plane.setVertices(new float[] {-10, -1, 10, 0, 1, 0, 10, -1, 10, 0, 1, 0, 10, -1, -10, 0, 1, 0, -10, -1, -10, 0, 1, 0});
 		plane.setIndices(new short[] {3, 2, 1, 1, 0, 3});
-		
+
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), Format.RGB565, true);
 		texture.setFilter(TextureFilter.MipMap, TextureFilter.Nearest);
 
@@ -154,14 +154,15 @@ public class ProjectiveTextureTest extends GdxTest {
 
 		if (camera.getSelectedIndex() == 0) {
 			renderMesh(projTexShader, cam.combined, projector.combined, planeTrans, plane, Color.WHITE);
-			/* TODO: Fix method rendering
-			renderMesh(projTexShader, cam.combined, projector.combined, cubeTrans, cube, Color.WHITE);
-			*/
+			/*
+			 * TODO: Fix method rendering renderMesh(projTexShader, cam.combined, projector.combined, cubeTrans, cube, Color.WHITE);
+			 */
 		} else {
 			renderMesh(projTexShader, projector.combined, projector.combined, planeTrans, plane, Color.WHITE);
-			/* TODO: Fix method rendering
-			renderMesh(projTexShader, projector.combined, projector.combined, cubeTrans, cube, Color.WHITE);
-			*/
+			/*
+			 * TODO: Fix method rendering renderMesh(projTexShader, projector.combined, projector.combined, cubeTrans, cube,
+			 * Color.WHITE);
+			 */
 		}
 
 		projTexShader.end();
@@ -195,6 +196,6 @@ public class ProjectiveTextureTest extends GdxTest {
 		projTexShader.dispose();
 		ui.dispose();
 		skin.dispose();
-		//renderer.dispose();
+		// renderer.dispose();
 	}
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/RunnablePostTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/RunnablePostTest.java
index 8669d49..6d5552d 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/RunnablePostTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/RunnablePostTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-			
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -21,25 +21,24 @@ import com.badlogic.gdx.tests.utils.GdxTest;
 
 /** Test that unchecked exceptions thrown from a runnable get posted and terminate the app. */
 public class RunnablePostTest extends GdxTest {
-	
+
 	private static final String TAG = "RunnablePostTest";
 	static boolean expectIt = false;
-	
+
 	static private Thread.UncaughtExceptionHandler exHandler = new Thread.UncaughtExceptionHandler() {
 		@Override
-		public void uncaughtException(Thread t, Throwable e) {
+		public void uncaughtException (Thread t, Throwable e) {
 			if (expectIt) {
 				Gdx.app.log(TAG, "PASSED: " + e.getMessage());
 			} else {
-				Gdx.app.log(TAG, "FAILED!  Unexpected exception received.");				
+				Gdx.app.log(TAG, "FAILED!  Unexpected exception received.");
 				e.printStackTrace(System.err);
 			}
 		}
 	};
-	
-	
+
 	public void create () {
-		Thread.setDefaultUncaughtExceptionHandler(exHandler);		
+		Thread.setDefaultUncaughtExceptionHandler(exHandler);
 	}
 
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/ShapeRendererTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/ShapeRendererTest.java
index 7c6e2cc..1578659 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/ShapeRendererTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/ShapeRendererTest.java
@@ -58,62 +58,61 @@ public class ShapeRendererTest extends GdxTest {
 		renderer.translate(-0.5f, -0.5f, 0);
 
 		MathUtils.random.setSeed(0);
-		
+
 		renderer.begin(ShapeType.Point);
-		
+
 		renderer.setColor(Color.PINK);
-		for(int i=0; i<100; i++)
+		for (int i = 0; i < 100; i++)
 			renderer.point(MathUtils.random(0.0f, 1.0f), MathUtils.random(0.0f, 1.0f), 0);
-		
+
 		renderer.end();
 
-		if(Gdx.input.isKeyPressed(Keys.F)){
+		if (Gdx.input.isKeyPressed(Keys.F)) {
 			renderer.begin(ShapeType.Filled);
-			
+
 			renderer.setColor(Color.RED);
 			renderer.rect(0, 0, 1, 1);
-			
+
 			renderer.setColor(Color.BLUE);
 			renderer.circle(0.2f, 0.2f, 0.5f, 40);
-			
+
 			renderer.setColor(Color.WHITE);
 			renderer.box(0.1f, 0.1f, 0.1f, 0.3f, 0.25f, 0.1f);
 
 			renderer.setColor(Color.GREEN);
 			renderer.cone(0.6f, 0.6f, 0, 0.3f, 0.75f, 20);
-			
+
 			renderer.setColor(Color.MAGENTA);
 			renderer.triangle(-0.1f, 0.1f, -0.6f, -0.1f, -0.3f, 0.5f);
-			
+
 			renderer.end();
-		}
-		else {
+		} else {
 			renderer.begin(ShapeType.Line);
-			
+
 			renderer.setColor(Color.RED);
 			renderer.rect(0, 0, 1, 1);
-			
+
 			renderer.setColor(Color.BLUE);
 			renderer.circle(0.2f, 0.2f, 0.5f, 40);
-			
+
 			renderer.setColor(Color.YELLOW);
 			renderer.line(0, 0, 1, 1);
-			
+
 			renderer.setColor(Color.WHITE);
 			renderer.box(0.1f, 0.1f, 0.1f, 0.3f, 0.25f, 0.1f);
-			
+
 			renderer.setColor(Color.GREEN);
 			renderer.cone(0.6f, 0.6f, 0, 0.3f, 0.75f, 20);
-			
+
 			renderer.setColor(Color.MAGENTA);
 			renderer.triangle(-0.1f, 0.1f, -0.6f, -0.1f, -0.3f, 0.5f);
 
 			renderer.setColor(Color.CYAN);
 			renderer.curve(0.0f, 0.25f, 0.2f, 0.3f, 0.3f, 0.6f, 0.1f, 0.5f, 30);
-			
+
 			renderer.end();
 		}
-		
+
 		batch.begin();
 		font.draw(batch, "fps: " + Gdx.graphics.getFramesPerSecond(), 0, 20);
 		batch.end();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/StagePerformanceTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/StagePerformanceTest.java
index e0e24c1..147f43f 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/StagePerformanceTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/StagePerformanceTest.java
@@ -34,7 +34,6 @@ import com.badlogic.gdx.utils.Array;
 
 public class StagePerformanceTest extends GdxTest {
 
-
 	Texture texture;
 	TextureRegion[] regions;
 	Stage stage;
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TextureDownloadTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TextureDownloadTest.java
index 28ca4dc..bae42bd 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TextureDownloadTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TextureDownloadTest.java
@@ -54,7 +54,7 @@ public class TextureDownloadTest extends GdxTest {
 					while (true) {
 						int length = in.read(out, readBytes, out.length - readBytes);
 						if (length == -1) break;
-						readBytes += length;						
+						readBytes += length;
 					}
 					return readBytes;
 				} catch (Exception ex) {
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TideMapAssetManagerTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TideMapAssetManagerTest.java
index 9cab8f0..8c1dd9e 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TideMapAssetManagerTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TideMapAssetManagerTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.assets.AssetManager;
 import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
@@ -29,50 +29,50 @@ import com.badlogic.gdx.maps.tiled.TiledMapRenderer;
 import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
-
-public class TideMapAssetManagerTest extends GdxTest {
-	
-	private TiledMap map;
-	private TiledMapRenderer renderer;
-	private OrthographicCamera camera;
-	private OrthoCamController cameraController;
-	private AssetManager assetManager;
-	private BitmapFont font;
-	private SpriteBatch batch;
-	
-	@Override
-	public void create() {		
-		float w = Gdx.graphics.getWidth();
-		float h = Gdx.graphics.getHeight();
-		
-		camera = new OrthographicCamera();
-		camera.setToOrtho(false, (w / h) * 10, 10);
-		camera.zoom = 2;
-		camera.update();
-		
-		cameraController = new OrthoCamController(camera);
-		Gdx.input.setInputProcessor(cameraController);
-	
-		font = new BitmapFont();
-		batch = new SpriteBatch();
-		
-		assetManager = new AssetManager();
-		assetManager.setLoader(TiledMap.class, new TideMapLoader(new InternalFileHandleResolver()));
-		assetManager.load("data/maps/tide/Map01.tide", TiledMap.class);
-		assetManager.finishLoading();
-		map = assetManager.get("data/maps/tide/Map01.tide");
-		renderer = new OrthogonalTiledMapRenderer(map, 1f / 32f);
-	}
-
-	@Override
-	public void render() {
-		Gdx.gl.glClearColor(0.55f, 0.55f, 0.55f, 1f);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		camera.update();
-		renderer.setView(camera);
-		renderer.render();
-		batch.begin();
-		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20); 
-		batch.end();
-	}
-}
\ No newline at end of file
+
+public class TideMapAssetManagerTest extends GdxTest {
+
+	private TiledMap map;
+	private TiledMapRenderer renderer;
+	private OrthographicCamera camera;
+	private OrthoCamController cameraController;
+	private AssetManager assetManager;
+	private BitmapFont font;
+	private SpriteBatch batch;
+
+	@Override
+	public void create () {
+		float w = Gdx.graphics.getWidth();
+		float h = Gdx.graphics.getHeight();
+
+		camera = new OrthographicCamera();
+		camera.setToOrtho(false, (w / h) * 10, 10);
+		camera.zoom = 2;
+		camera.update();
+
+		cameraController = new OrthoCamController(camera);
+		Gdx.input.setInputProcessor(cameraController);
+
+		font = new BitmapFont();
+		batch = new SpriteBatch();
+
+		assetManager = new AssetManager();
+		assetManager.setLoader(TiledMap.class, new TideMapLoader(new InternalFileHandleResolver()));
+		assetManager.load("data/maps/tide/Map01.tide", TiledMap.class);
+		assetManager.finishLoading();
+		map = assetManager.get("data/maps/tide/Map01.tide");
+		renderer = new OrthogonalTiledMapRenderer(map, 1f / 32f);
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(0.55f, 0.55f, 0.55f, 1f);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		camera.update();
+		renderer.setView(camera);
+		renderer.render();
+		batch.begin();
+		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20);
+		batch.end();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TideMapDirectLoaderTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TideMapDirectLoaderTest.java
index 1d831e4..d9e5da6 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TideMapDirectLoaderTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TideMapDirectLoaderTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
@@ -27,49 +27,49 @@ import com.badlogic.gdx.maps.tiled.TiledMapRenderer;
 import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
-
-public class TideMapDirectLoaderTest extends GdxTest {
-	
-	private TiledMap map;
-	private TiledMapRenderer renderer;
-	private OrthographicCamera camera;
-	private OrthoCamController cameraController;
-	private BitmapFont font;
-	private SpriteBatch batch;
-	
-	@Override
-	public void create() {		
-		float w = Gdx.graphics.getWidth();
-		float h = Gdx.graphics.getHeight();
-		
-		camera = new OrthographicCamera();
-		camera.setToOrtho(false, (w / h) * 10, 10);
-		camera.update();
-		
-		cameraController = new OrthoCamController(camera);
-		Gdx.input.setInputProcessor(cameraController);
-	
-		font = new BitmapFont();
-		batch = new SpriteBatch();
-		
-		map = new TideMapLoader().load("data/maps/tide/Map01.tide");
-		renderer = new OrthogonalTiledMapRenderer(map, 1f / 32f);
-	}
-
-	@Override
-	public void render() {
-		Gdx.gl.glClearColor(0.55f, 0.55f, 0.55f, 1f);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		camera.update();
-		renderer.setView(camera);
-		renderer.render();
-		batch.begin();
-		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20); 
-		batch.end();
-	}
-
-	@Override
-	public void dispose () {
-		map.dispose();
-	}
-}
\ No newline at end of file
+
+public class TideMapDirectLoaderTest extends GdxTest {
+
+	private TiledMap map;
+	private TiledMapRenderer renderer;
+	private OrthographicCamera camera;
+	private OrthoCamController cameraController;
+	private BitmapFont font;
+	private SpriteBatch batch;
+
+	@Override
+	public void create () {
+		float w = Gdx.graphics.getWidth();
+		float h = Gdx.graphics.getHeight();
+
+		camera = new OrthographicCamera();
+		camera.setToOrtho(false, (w / h) * 10, 10);
+		camera.update();
+
+		cameraController = new OrthoCamController(camera);
+		Gdx.input.setInputProcessor(cameraController);
+
+		font = new BitmapFont();
+		batch = new SpriteBatch();
+
+		map = new TideMapLoader().load("data/maps/tide/Map01.tide");
+		renderer = new OrthogonalTiledMapRenderer(map, 1f / 32f);
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(0.55f, 0.55f, 0.55f, 1f);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		camera.update();
+		renderer.setView(camera);
+		renderer.render();
+		batch.begin();
+		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20);
+		batch.end();
+	}
+
+	@Override
+	public void dispose () {
+		map.dispose();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAssetManagerTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAssetManagerTest.java
index 1956b1d..8c771de 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAssetManagerTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAssetManagerTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.assets.AssetManager;
 import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
@@ -29,50 +29,50 @@ import com.badlogic.gdx.maps.tiled.TmxMapLoader;
 import com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
-
-public class TiledMapAssetManagerTest extends GdxTest {
-	
-	private TiledMap map;
-	private TiledMapRenderer renderer;
-	private OrthographicCamera camera;
-	private OrthoCamController cameraController;
-	private AssetManager assetManager;
-	private BitmapFont font;
-	private SpriteBatch batch;
-	
-	@Override
-	public void create() {		
-		float w = Gdx.graphics.getWidth();
-		float h = Gdx.graphics.getHeight();
-		
-		camera = new OrthographicCamera();
-		camera.setToOrtho(false, (w / h) * 10, 10);
-		camera.zoom = 2;
-		camera.update();
-		
-		cameraController = new OrthoCamController(camera);
-		Gdx.input.setInputProcessor(cameraController);
-	
-		font = new BitmapFont();
-		batch = new SpriteBatch();
-		
-		assetManager = new AssetManager();
-		assetManager.setLoader(TiledMap.class, new TmxMapLoader(new InternalFileHandleResolver()));
-		assetManager.load("data/maps/tiled/isometric_grass_and_water.tmx", TiledMap.class);
-		assetManager.finishLoading();
-		map = assetManager.get("data/maps/tiled/isometric_grass_and_water.tmx");
-		renderer = new IsometricTiledMapRenderer(map, 1f / 64f);
-	}
-
-	@Override
-	public void render() {
-		Gdx.gl.glClearColor(100f / 255f, 100f / 255f, 250f / 255f, 1f);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		camera.update();
-		renderer.setView(camera);
-		renderer.render();
-		batch.begin();
-		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20); 
-		batch.end();
-	}
-}
\ No newline at end of file
+
+public class TiledMapAssetManagerTest extends GdxTest {
+
+	private TiledMap map;
+	private TiledMapRenderer renderer;
+	private OrthographicCamera camera;
+	private OrthoCamController cameraController;
+	private AssetManager assetManager;
+	private BitmapFont font;
+	private SpriteBatch batch;
+
+	@Override
+	public void create () {
+		float w = Gdx.graphics.getWidth();
+		float h = Gdx.graphics.getHeight();
+
+		camera = new OrthographicCamera();
+		camera.setToOrtho(false, (w / h) * 10, 10);
+		camera.zoom = 2;
+		camera.update();
+
+		cameraController = new OrthoCamController(camera);
+		Gdx.input.setInputProcessor(cameraController);
+
+		font = new BitmapFont();
+		batch = new SpriteBatch();
+
+		assetManager = new AssetManager();
+		assetManager.setLoader(TiledMap.class, new TmxMapLoader(new InternalFileHandleResolver()));
+		assetManager.load("data/maps/tiled/isometric_grass_and_water.tmx", TiledMap.class);
+		assetManager.finishLoading();
+		map = assetManager.get("data/maps/tiled/isometric_grass_and_water.tmx");
+		renderer = new IsometricTiledMapRenderer(map, 1f / 64f);
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(100f / 255f, 100f / 255f, 250f / 255f, 1f);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		camera.update();
+		renderer.setView(camera);
+		renderer.render();
+		batch.begin();
+		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20);
+		batch.end();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAtlasDirectLoaderTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAtlasDirectLoaderTest.java
index 244d302..e511f01 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAtlasDirectLoaderTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAtlasDirectLoaderTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
@@ -27,49 +27,49 @@ import com.badlogic.gdx.maps.tiled.TiledMapRenderer;
 import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
-
-public class TiledMapAtlasDirectLoaderTest extends GdxTest {
-
-	private TiledMap map;
-	private TiledMapRenderer renderer;
-	private OrthographicCamera camera;
-	private OrthoCamController cameraController;
-	private BitmapFont font;
-	private SpriteBatch batch;
-
-	@Override
-	public void create () {
-		float w = Gdx.graphics.getWidth();
-		float h = Gdx.graphics.getHeight();
-
-		camera = new OrthographicCamera();
-		camera.setToOrtho(false, (w / h) * 10, 10);
-		camera.update();
-
-		cameraController = new OrthoCamController(camera);
-		Gdx.input.setInputProcessor(cameraController);
-
-		font = new BitmapFont();
-		batch = new SpriteBatch();
-
-		map = new AtlasTmxMapLoader().load("data/maps/tiled-atlas-processed/test.tmx");
-		renderer = new OrthogonalTiledMapRenderer(map, 1f / 32f);
-	}
-
-	@Override
-	public void render () {
-		Gdx.gl.glClearColor(0.55f, 0.55f, 0.55f, 1f);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		camera.update();
-		renderer.setView(camera);
-		renderer.render();
-		batch.begin();
-		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20);
-		batch.end();
-	}
-
-	@Override
-	public void dispose () {
-		map.dispose();
-	}
-}
\ No newline at end of file
+
+public class TiledMapAtlasDirectLoaderTest extends GdxTest {
+
+	private TiledMap map;
+	private TiledMapRenderer renderer;
+	private OrthographicCamera camera;
+	private OrthoCamController cameraController;
+	private BitmapFont font;
+	private SpriteBatch batch;
+
+	@Override
+	public void create () {
+		float w = Gdx.graphics.getWidth();
+		float h = Gdx.graphics.getHeight();
+
+		camera = new OrthographicCamera();
+		camera.setToOrtho(false, (w / h) * 10, 10);
+		camera.update();
+
+		cameraController = new OrthoCamController(camera);
+		Gdx.input.setInputProcessor(cameraController);
+
+		font = new BitmapFont();
+		batch = new SpriteBatch();
+
+		map = new AtlasTmxMapLoader().load("data/maps/tiled-atlas-processed/test.tmx");
+		renderer = new OrthogonalTiledMapRenderer(map, 1f / 32f);
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(0.55f, 0.55f, 0.55f, 1f);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		camera.update();
+		renderer.setView(camera);
+		renderer.render();
+		batch.begin();
+		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20);
+		batch.end();
+	}
+
+	@Override
+	public void dispose () {
+		map.dispose();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapDirectLoaderTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapDirectLoaderTest.java
index 28d615f..69e7681 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapDirectLoaderTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapDirectLoaderTest.java
@@ -12,8 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -29,42 +29,42 @@ import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
 
 public class TiledMapDirectLoaderTest extends GdxTest {
-	
+
 	private TiledMap map;
 	private TiledMapRenderer renderer;
 	private OrthographicCamera camera;
 	private OrthoCamController cameraController;
 	private BitmapFont font;
 	private SpriteBatch batch;
-	
+
 	@Override
-	public void create() {		
+	public void create () {
 		float w = Gdx.graphics.getWidth();
 		float h = Gdx.graphics.getHeight();
-		
+
 		camera = new OrthographicCamera();
 		camera.setToOrtho(false, (w / h) * 10, 10);
 		camera.update();
-		
+
 		cameraController = new OrthoCamController(camera);
 		Gdx.input.setInputProcessor(cameraController);
-	
+
 		font = new BitmapFont();
 		batch = new SpriteBatch();
-		
+
 		map = new TmxMapLoader().load("data/maps/tiled/super-koalio/level1.tmx");
 		renderer = new OrthogonalTiledMapRenderer(map, 1f / 32f);
 	}
 
 	@Override
-	public void render() {
+	public void render () {
 		Gdx.gl.glClearColor(0.55f, 0.55f, 0.55f, 1f);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		camera.update();
-		renderer.setView(camera);
+		renderer.setView(camera);
 		renderer.render();
 		batch.begin();
-		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20); 
+		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20);
 		batch.end();
 	}
 
@@ -72,4 +72,4 @@ public class TiledMapDirectLoaderTest extends GdxTest {
 	public void dispose () {
 		map.dispose();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TimeUtilsTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TimeUtilsTest.java
index d3237d7..24186e5 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TimeUtilsTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TimeUtilsTest.java
@@ -24,42 +24,41 @@ import com.badlogic.gdx.utils.TimeUtils;
  * @author Jon Renner */
 public class TimeUtilsTest extends GdxTest {
 	final long oneMilliInNanos = 1000000;
-	
+
 	@Override
-	public void create() {
+	public void create () {
 		// test nanos -> millis -> nanos
 		long now = TimeUtils.nanoTime();
 		long nowConvertToMillis = TimeUtils.nanosToMillis(now);
 		long nowConvertBackToNanos = TimeUtils.millisToNanos(nowConvertToMillis);
-		
+
 		assertEpsilonEqual(now, nowConvertBackToNanos, "Nano -> Millis conversion");
-		
+
 		// test millis -> nanos -> millis
 		long millis = TimeUtils.millis();
 		long millisToNanos = TimeUtils.millisToNanos(millis);
 		long nanosToMillis = TimeUtils.nanosToMillis(millisToNanos);
-		
+
 		assertAbsoluteEqual(millis, nanosToMillis, "Millis -> Nanos conversion");
 
-		
 		// test comparison for 1 sec
 		long oneSecondMillis = 1000;
 		long oneSecondNanos = 1000000000;
-				
+
 		assertAbsoluteEqual(oneSecondMillis, TimeUtils.nanosToMillis(oneSecondNanos), "One Second Comparison, Nano -> Millis");
 		assertAbsoluteEqual(TimeUtils.millisToNanos(oneSecondMillis), oneSecondNanos, "One Second Comparison, Millis -> Nanos");
 	}
-	
+
 	@Override
-	public void render() {
-		
+	public void render () {
+
 	}
-	
-	private void failTest(String testName) {
-		throw new GdxRuntimeException("FAILED TEST: [" + testName + "]");		
+
+	private void failTest (String testName) {
+		throw new GdxRuntimeException("FAILED TEST: [" + testName + "]");
 	}
-	
-	private void assertAbsoluteEqual(long a, long b, String testName) {
+
+	private void assertAbsoluteEqual (long a, long b, String testName) {
 		// because of precision loss in conversion, epsilon = 1 ms worth of nanos
 		System.out.println("Compare " + a + " to " + b);
 		if (a != b) {
@@ -68,8 +67,8 @@ public class TimeUtilsTest extends GdxTest {
 			System.out.println("TEST PASSED: " + testName);
 		}
 	}
-	
-	private void assertEpsilonEqual(long a, long b, String testName) { 
+
+	private void assertEpsilonEqual (long a, long b, String testName) {
 		System.out.println("Compare " + a + " to " + b);
 		if (Math.abs(a - b) > oneMilliInNanos) {
 			failTest(testName + " - NOT EQUAL");
@@ -77,6 +76,5 @@ public class TimeUtilsTest extends GdxTest {
 			System.out.println("TEST PASSED: " + testName);
 		}
 	}
-	
-	
+
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TimerTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TimerTest.java
index 091475e..fb8b2c1 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TimerTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TimerTest.java
@@ -12,23 +12,23 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.tests.utils.GdxTest;
-import com.badlogic.gdx.utils.Timer;
-import com.badlogic.gdx.utils.Timer.Task;
-
-public class TimerTest extends GdxTest {
-	@Override
-	public void create () {
-		new Timer().scheduleTask(new Task() {
-			@Override
-			public void run () {
-				Gdx.app.log("TimerTest", "ping");
-			}
-		}, 0, 1);
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.Timer;
+import com.badlogic.gdx.utils.Timer.Task;
+
+public class TimerTest extends GdxTest {
+	@Override
+	public void create () {
+		new Timer().scheduleTask(new Task() {
+			@Override
+			public void run () {
+				Gdx.app.log("TimerTest", "ping");
+			}
+		}, 0, 1);
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TouchpadTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TouchpadTest.java
index d7cb51c..f49c2a0 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TouchpadTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TouchpadTest.java
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -38,7 +39,7 @@ public class TouchpadTest extends GdxTest {
 	}
 
 	public void render () {
-		//System.out.println(touchpad.getKnobPercentX() + " " + touchpad.getKnobPercentY());
+		// System.out.println(touchpad.getKnobPercentX() + " " + touchpad.getKnobPercentY());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
@@ -51,4 +52,4 @@ public class TouchpadTest extends GdxTest {
 	public void dispose () {
 		stage.dispose();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TreeTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TreeTest.java
index 726c084..050bdf5 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TreeTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TreeTest.java
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -77,4 +78,4 @@ public class TreeTest extends GdxTest {
 	public void dispose () {
 		stage.dispose();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/UBJsonTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/UBJsonTest.java
index 821604c..9a02832 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/UBJsonTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/UBJsonTest.java
@@ -12,92 +12,91 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-
-package com.badlogic.gdx.tests;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.tests.utils.GdxTest;
-import com.badlogic.gdx.utils.JsonValue;
-import com.badlogic.gdx.utils.UBJsonReader;
-import com.badlogic.gdx.utils.UBJsonWriter;
-
-public class UBJsonTest extends GdxTest {
-	static final String fn = "test.ubjson";
-	static final String longString;
-	static {
-		StringBuilder sb = new StringBuilder();
-		for (int i = 0; i < 300; i++)
-			sb.append((char)((i % 26) + 'a'));
-		longString = sb.toString();
-	}
-
-	@Override
-	public void create () {
-		try {
-
-			UBJsonWriter uw = new UBJsonWriter(Gdx.files.external(fn).write(false));
-			uw.object();
-			uw.set(longString, longString);
-			uw.set("0floats", new float[] {});
-			uw.set("3floats", new float[] {1, 2, 3.456789f});
-			uw.set("xfloats", new float[] {Float.MIN_VALUE, Float.MAX_VALUE, Float.NaN, Float.NEGATIVE_INFINITY});
-			uw.set("double", 0.000000000000000000001);
-			uw.set("long", Long.MAX_VALUE);
-			uw.array("arr");
-			uw.object().pop();
-			uw.value(true).value(false).value(true);
-			uw.value((byte)254);
-			uw.value((byte)(-2));
-			uw.value((short)-32000);
-			uw.value((int)-123456);
-			uw.value((long)(-((1 << 63) - 1)));
-			uw.pop();
-			uw.pop();
-			uw.close();
-			UBJsonReader ur = new UBJsonReader();
-			ur.oldFormat = false;
-			JsonValue v = ur.parse(Gdx.files.external(fn));
-			Gdx.app.log("UBJsonTest", "result = \n" + v.toString());
-			performanceTest();
-			Gdx.app.log("UBJsonTest", "Test succeeded");
-		} catch (Throwable t) {
-			Gdx.app.error("UBJsonTest", "Test failed", t);
-		}
-	}
-
-	private void performanceTest () throws Exception {
-		Gdx.app.log("UBJsonTest", "--- performanceTest ---");
-		long start = System.currentTimeMillis();
-		UBJsonWriter uw = new UBJsonWriter(Gdx.files.external(fn).write(false, 8192));
-		uw.object();
-		uw.set("0floats", new float[] {});
-		uw.set("3floats", new float[] {1, 2, 3.456789f});
-		uw.set("xfloats", new float[] {Float.MIN_VALUE, Float.MAX_VALUE, Float.NaN, Float.NEGATIVE_INFINITY});
-		uw.set("double", 0.000000000000000000001);
-		uw.set("long", Long.MAX_VALUE);
-		uw.array("arr");
-		uw.object().pop();
-		for (int i = 0; i < 50000; i++) {
-			uw.value(true).value(false).value(true);
-			uw.value((byte)254);
-			uw.value((byte)(-2));
-			uw.value((short)-32000);
-			uw.value((int)-123456);
-			uw.value((long)(-((1 << 63) - 1)));
-			uw.value(longString);
-		}
-		uw.pop();
-		uw.pop();
-		uw.close();
-
-		Gdx.app.log("UBJsonTest", "Writing the test file took " + (System.currentTimeMillis() - start) + "ms");
-		Gdx.app.log("UBJsonTest", "File size is " + Gdx.files.external(fn).length());
-		UBJsonReader ur = new UBJsonReader();
-		ur.oldFormat = false;
-		start = System.currentTimeMillis();
-		ur.parse(Gdx.files.external(fn));
-		Gdx.app.log("UBJsonTest", "Parsing the test file took " + (System.currentTimeMillis() - start) + "ms");
-	}
-}
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.JsonValue;
+import com.badlogic.gdx.utils.UBJsonReader;
+import com.badlogic.gdx.utils.UBJsonWriter;
+
+public class UBJsonTest extends GdxTest {
+	static final String fn = "test.ubjson";
+	static final String longString;
+	static {
+		StringBuilder sb = new StringBuilder();
+		for (int i = 0; i < 300; i++)
+			sb.append((char)((i % 26) + 'a'));
+		longString = sb.toString();
+	}
+
+	@Override
+	public void create () {
+		try {
+
+			UBJsonWriter uw = new UBJsonWriter(Gdx.files.external(fn).write(false));
+			uw.object();
+			uw.set(longString, longString);
+			uw.set("0floats", new float[] {});
+			uw.set("3floats", new float[] {1, 2, 3.456789f});
+			uw.set("xfloats", new float[] {Float.MIN_VALUE, Float.MAX_VALUE, Float.NaN, Float.NEGATIVE_INFINITY});
+			uw.set("double", 0.000000000000000000001);
+			uw.set("long", Long.MAX_VALUE);
+			uw.array("arr");
+			uw.object().pop();
+			uw.value(true).value(false).value(true);
+			uw.value((byte)254);
+			uw.value((byte)(-2));
+			uw.value((short)-32000);
+			uw.value((int)-123456);
+			uw.value((long)(-((1 << 63) - 1)));
+			uw.pop();
+			uw.pop();
+			uw.close();
+			UBJsonReader ur = new UBJsonReader();
+			ur.oldFormat = false;
+			JsonValue v = ur.parse(Gdx.files.external(fn));
+			Gdx.app.log("UBJsonTest", "result = \n" + v.toString());
+			performanceTest();
+			Gdx.app.log("UBJsonTest", "Test succeeded");
+		} catch (Throwable t) {
+			Gdx.app.error("UBJsonTest", "Test failed", t);
+		}
+	}
+
+	private void performanceTest () throws Exception {
+		Gdx.app.log("UBJsonTest", "--- performanceTest ---");
+		long start = System.currentTimeMillis();
+		UBJsonWriter uw = new UBJsonWriter(Gdx.files.external(fn).write(false, 8192));
+		uw.object();
+		uw.set("0floats", new float[] {});
+		uw.set("3floats", new float[] {1, 2, 3.456789f});
+		uw.set("xfloats", new float[] {Float.MIN_VALUE, Float.MAX_VALUE, Float.NaN, Float.NEGATIVE_INFINITY});
+		uw.set("double", 0.000000000000000000001);
+		uw.set("long", Long.MAX_VALUE);
+		uw.array("arr");
+		uw.object().pop();
+		for (int i = 0; i < 50000; i++) {
+			uw.value(true).value(false).value(true);
+			uw.value((byte)254);
+			uw.value((byte)(-2));
+			uw.value((short)-32000);
+			uw.value((int)-123456);
+			uw.value((long)(-((1 << 63) - 1)));
+			uw.value(longString);
+		}
+		uw.pop();
+		uw.pop();
+		uw.close();
+
+		Gdx.app.log("UBJsonTest", "Writing the test file took " + (System.currentTimeMillis() - start) + "ms");
+		Gdx.app.log("UBJsonTest", "File size is " + Gdx.files.external(fn).length());
+		UBJsonReader ur = new UBJsonReader();
+		ur.oldFormat = false;
+		start = System.currentTimeMillis();
+		ur.parse(Gdx.files.external(fn));
+		Gdx.app.log("UBJsonTest", "Parsing the test file took " + (System.currentTimeMillis() - start) + "ms");
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/UtfFontTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/UtfFontTest.java
index 3f8f0c0..84d363c 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/UtfFontTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/UtfFontTest.java
@@ -1,3 +1,4 @@
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -6,15 +7,12 @@ import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
-/**
- * See <a href="https://github.com/libgdx/libgdx/issues/1315">#1315</a>
- * @author badlogic
- *
- */
+/** See <a href="https://github.com/libgdx/libgdx/issues/1315">#1315</a>
+ * @author badlogic */
 public class UtfFontTest extends GdxTest {
 	BitmapFont font;
 	SpriteBatch batch;
-	
+
 	@Override
 	public void create () {
 		batch = new SpriteBatch();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/Vector2dTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/Vector2dTest.java
index 8fa3794..fbea533 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/Vector2dTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/Vector2dTest.java
@@ -12,8 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
@@ -38,15 +38,14 @@ public class Vector2dTest extends GdxTest {
 	private Vector2 sum = new Vector2().add(Vector2.X).add(Vector2.Y).nor();
 	private Vector2 mash = new Vector2(Vector2.Y);
 
-	
 	private final long start = System.currentTimeMillis();
-	
+
 	@Override
 	public void create () {
 		renderer = new ShapeRenderer();
 	}
-	
-	private void renderVectorAt(float x, float y, Vector2 v) {
+
+	private void renderVectorAt (float x, float y, Vector2 v) {
 		renderer.line(x, y, x + v.x, y + v.y);
 	}
 
@@ -54,17 +53,17 @@ public class Vector2dTest extends GdxTest {
 	public void render () {
 		Gdx.gl.glClearColor(0, 0, 0, 0);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		
+
 		renderer.setProjectionMatrix(camera.combined);
-		
+
 		// Render the 'lerp' vector target as a circle
 		renderer.begin(ShapeType.Filled);
 		renderer.setColor(1.0f, 0, 0, 0.3f);
-		renderer.circle(-2 + lerpTarget.x, 2 + lerpTarget.y , 0.08f, 16);
+		renderer.circle(-2 + lerpTarget.x, 2 + lerpTarget.y, 0.08f, 16);
 		renderer.end();
 
 		renderer.begin(ShapeType.Line);
-		
+
 		// Render the three fixed X, Y and sum vectors:
 		renderer.setColor(Color.RED);
 		renderVectorAt(0, 0, Vector2.X);
@@ -72,18 +71,18 @@ public class Vector2dTest extends GdxTest {
 		renderVectorAt(0, 0, Vector2.Y);
 		renderer.setColor(Color.YELLOW);
 		renderVectorAt(0, 0, sum);
-		
+
 		final float changeRate = Gdx.graphics.getDeltaTime();
 		renderer.setColor(Color.WHITE);
-		
+
 		renderVectorAt(2, 2, rotating);
 		rotating.rotate(93 * changeRate);
-		
+
 		renderVectorAt(2, -2, scalingX);
-		scalingX.set(0, MathUtils.sin((System.currentTimeMillis() - start)/520.0f));
+		scalingX.set(0, MathUtils.sin((System.currentTimeMillis() - start) / 520.0f));
 		renderVectorAt(2, -2, scalingY);
-		scalingY.set(MathUtils.cos((System.currentTimeMillis() - start)/260.0f), 0);
-		
+		scalingY.set(MathUtils.cos((System.currentTimeMillis() - start) / 260.0f), 0);
+
 		renderVectorAt(-2, 2, lerping1);
 		lerping1.lerp(lerpTarget, 0.025f);
 		if (lerping1.epsilonEquals(lerpTarget, 0.05f)) {
@@ -92,7 +91,7 @@ public class Vector2dTest extends GdxTest {
 
 		renderVectorAt(-2, -2, mash);
 		mash.set(0, 0).add(rotating).add(scalingX).add(scalingY).add(lerping1);
-	
+
 		renderer.end();
 	}
 
@@ -103,4 +102,4 @@ public class Vector2dTest extends GdxTest {
 		int w = (int)(h * ratio);
 		camera = new OrthographicCamera(w, h);
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/YDownTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/YDownTest.java
index 9e4ee0e..c8daf1f 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/YDownTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/YDownTest.java
@@ -54,10 +54,10 @@ public class YDownTest extends GdxTest {
 		// a texture region, note the flipping on y again
 		region = new TextureRegion(new Texture("data/badlogic.jpg"));
 		region.flip(false, true);
-		
+
 		// a texture atlas, note the boolean
 		atlas = new TextureAtlas(Gdx.files.internal("data/pack"), true);
-		
+
 		// a sprite, created from a region in the atlas
 		sprite = atlas.createSprite("badlogicsmall");
 		sprite.setPosition(0, 0);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bench/TiledMapBench.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bench/TiledMapBench.java
index 7861c7d..d0f0620 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bench/TiledMapBench.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bench/TiledMapBench.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.bench;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.bench;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.assets.AssetManager;
 import com.badlogic.gdx.graphics.GL20;
@@ -33,67 +33,67 @@ import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
 import com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
-
-public class TiledMapBench extends GdxTest {
-	
-	private TiledMap map;
-	private TiledMapRenderer renderer;
-	private OrthographicCamera camera;
-	private OrthoCamController cameraController;
-	private AssetManager assetManager;
-	private Texture tiles;
-	private Texture texture;
-	private BitmapFont font;
-	private SpriteBatch batch;
-	
-	@Override
-	public void create() {		
-		float w = Gdx.graphics.getWidth();
-		float h = Gdx.graphics.getHeight();
-		
-		camera = new OrthographicCamera();
-		camera.setToOrtho(false, (w / h) * 320, 320);
-		camera.update();
-		
-		cameraController = new OrthoCamController(camera);
-		Gdx.input.setInputProcessor(cameraController);
-	
-		font = new BitmapFont();
-		batch = new SpriteBatch();
-		
-		{
-			tiles = new Texture(Gdx.files.internal("data/maps/tiled/tiles.png"));
-			TextureRegion[][] splitTiles = TextureRegion.split(tiles, 32, 32);
-			map = new TiledMap();
-			MapLayers layers = map.getLayers();
-			for (int l = 0; l < 20; l++) {
-				TiledMapTileLayer layer = new TiledMapTileLayer(150, 100, 32, 32);
-				for (int x = 0; x < 150; x++) {
-					for (int y = 0; y < 100; y++) {
-						int ty = (int)(Math.random() * splitTiles.length);
-						int tx = (int)(Math.random() * splitTiles[ty].length);
-						Cell cell = new Cell();
-						cell.setTile(new StaticTiledMapTile(splitTiles[ty][tx]));
-						layer.setCell(x, y, cell);
-					}
-				}
-				layers.add(layer);
-			}
-		}
-		
-		renderer = new OrthogonalTiledMapRenderer(map);
-
-	}
-
-	@Override
-	public void render() {
-		Gdx.gl.glClearColor(100f / 255f, 100f / 255f, 250f / 255f, 1f);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		camera.update();
-		renderer.setView(camera);
-		renderer.render();
-		batch.begin();
-		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20); 
-		batch.end();
-	}
-}
\ No newline at end of file
+
+public class TiledMapBench extends GdxTest {
+
+	private TiledMap map;
+	private TiledMapRenderer renderer;
+	private OrthographicCamera camera;
+	private OrthoCamController cameraController;
+	private AssetManager assetManager;
+	private Texture tiles;
+	private Texture texture;
+	private BitmapFont font;
+	private SpriteBatch batch;
+
+	@Override
+	public void create () {
+		float w = Gdx.graphics.getWidth();
+		float h = Gdx.graphics.getHeight();
+
+		camera = new OrthographicCamera();
+		camera.setToOrtho(false, (w / h) * 320, 320);
+		camera.update();
+
+		cameraController = new OrthoCamController(camera);
+		Gdx.input.setInputProcessor(cameraController);
+
+		font = new BitmapFont();
+		batch = new SpriteBatch();
+
+		{
+			tiles = new Texture(Gdx.files.internal("data/maps/tiled/tiles.png"));
+			TextureRegion[][] splitTiles = TextureRegion.split(tiles, 32, 32);
+			map = new TiledMap();
+			MapLayers layers = map.getLayers();
+			for (int l = 0; l < 20; l++) {
+				TiledMapTileLayer layer = new TiledMapTileLayer(150, 100, 32, 32);
+				for (int x = 0; x < 150; x++) {
+					for (int y = 0; y < 100; y++) {
+						int ty = (int)(Math.random() * splitTiles.length);
+						int tx = (int)(Math.random() * splitTiles[ty].length);
+						Cell cell = new Cell();
+						cell.setTile(new StaticTiledMapTile(splitTiles[ty][tx]));
+						layer.setCell(x, y, cell);
+					}
+				}
+				layers.add(layer);
+			}
+		}
+
+		renderer = new OrthogonalTiledMapRenderer(map);
+
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(100f / 255f, 100f / 255f, 250f / 255f, 1f);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+		camera.update();
+		renderer.setView(camera);
+		renderer.render();
+		batch.begin();
+		font.draw(batch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 10, 20);
+		batch.end();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ConveyorBelt.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ConveyorBelt.java
index 36c8a20..ca9b5a8 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ConveyorBelt.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ConveyorBelt.java
@@ -12,8 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests.box2d;
 
 import com.badlogic.gdx.math.Vector2;
@@ -36,12 +36,12 @@ public class ConveyorBelt extends Box2DTest implements ContactListener {
 	@Override
 	protected void createWorld (World world) {
 		world.setContactListener(this);
-		
+
 		// Ground
 		{
 			BodyDef bodyDef = new BodyDef();
 			groundBody = world.createBody(bodyDef);
-			
+
 			EdgeShape shape = new EdgeShape();
 			shape.set(new Vector2(-20.0f, 0.0f), new Vector2(20.0f, 0.0f));
 			groundBody.createFixture(shape, 0.0f);
@@ -86,7 +86,7 @@ public class ConveyorBelt extends Box2DTest implements ContactListener {
 
 	@Override
 	public void beginContact (Contact contact) {
-		
+
 	}
 
 	@Override
@@ -96,4 +96,4 @@ public class ConveyorBelt extends Box2DTest implements ContactListener {
 	@Override
 	public void postSolve (Contact contact, ContactImpulse impulse) {
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
index b968835..89bacdc 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
@@ -30,11 +30,9 @@ import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute;
 import com.badlogic.gdx.graphics.g3d.environment.DirectionalLight;
-import com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight;
 import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
 import com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.Ray;
 import com.badlogic.gdx.physics.bullet.Bullet;
 import com.badlogic.gdx.physics.bullet.dynamics.btRigidBody;
@@ -45,26 +43,24 @@ import com.badlogic.gdx.utils.Disposable;
 
 /** @author xoppa */
 public class BaseBulletTest extends BulletTest {
-	// Set this to the path of the lib to use it on desktop instead of default lib. 
-	private final static String customDesktopLib = null;//"D:\\Data\\code\\android\\libs\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\x64\\Debug\\gdxBullet.dll";
-	
+	// Set this to the path of the lib to use it on desktop instead of default lib.
+	private final static String customDesktopLib = null;// "D:\\Data\\code\\android\\libs\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\x64\\Debug\\gdxBullet.dll";
+
 	private static boolean initialized = false;
-	
-	public static boolean shadows = true;
-	
-	public static void init() {
+
+	public static void init () {
 		if (initialized) return;
 		// Need to initialize bullet before using it.
 		if (Gdx.app.getType() == ApplicationType.Desktop && customDesktopLib != null) {
 			System.load(customDesktopLib);
 		} else
 			Bullet.init();
-		Gdx.app.log("Bullet", "Version = "+LinearMath.btGetVersion());
+		Gdx.app.log("Bullet", "Version = " + LinearMath.btGetVersion());
 		initialized = true;
 	}
-	
-	public Environment environment;
-	public DirectionalLight light;
+
+	public Environment lights;
+	public DirectionalLight shadowLight;
 	public ModelBatch shadowBatch;
 
 	public BulletWorld world;
@@ -74,24 +70,21 @@ public class BaseBulletTest extends BulletTest {
 	public Array<Disposable> disposables = new Array<Disposable>();
 	private int debugMode = DebugDrawModes.DBG_NoDebug;
 
-	public BulletWorld createWorld() {
+	public BulletWorld createWorld () {
 		return new BulletWorld();
 	}
-	
+
 	@Override
 	public void create () {
 		init();
-		environment = new Environment();
-		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.3f, 0.3f, 0.3f, 1.f));
-		light = shadows ? new DirectionalShadowLight(1024, 1024, 20f, 20f, 1f, 300f) : new DirectionalLight();
-		light.set(0.8f, 0.8f, 0.8f, -0.5f, -1f, 0.7f);
-		environment.add(light);
-		if (shadows)
-			environment.shadowMap = (DirectionalShadowLight)light;
+		lights = new Environment();
+		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.3f, 0.3f, 0.3f, 1.f));
+		lights.add((shadowLight = new DirectionalLight()).set(0.8f, 0.8f, 0.8f, -0.5f, -1f, 0.7f));
+// lights.shadowMap = shadowLight;
 		shadowBatch = new ModelBatch(new DepthShaderProvider());
-		
+
 		modelBatch = new ModelBatch();
-		
+
 		world = createWorld();
 		world.performanceCounter = performanceCounter;
 
@@ -104,15 +97,29 @@ public class BaseBulletTest extends BulletTest {
 		camera.position.set(10f, 10f, 10f);
 		camera.lookAt(0, 0, 0);
 		camera.update();
-		
+
 		// Create some simple models
-		final Model groundModel = modelBuilder.createRect(20f, 0f, -20f, -20f, 0f, -20f, -20f, 0f, 20f, 20f, 0f, 20f, 0, 1, 0, 
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(16f)),
-			Usage.Position | Usage.Normal);
+		final Model groundModel = modelBuilder.createRect(
+			20f,
+			0f,
+			-20f,
+			-20f,
+			0f,
+			-20f,
+			-20f,
+			0f,
+			20f,
+			20f,
+			0f,
+			20f,
+			0,
+			1,
+			0,
+			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute
+				.createShininess(16f)), Usage.Position | Usage.Normal);
 		disposables.add(groundModel);
-		final Model boxModel = modelBuilder.createBox(1f, 1f, 1f,
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f)), 
-			Usage.Position | Usage.Normal);
+		final Model boxModel = modelBuilder.createBox(1f, 1f, 1f, new Material(ColorAttribute.createDiffuse(Color.WHITE),
+			ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f)), Usage.Position | Usage.Normal);
 		disposables.add(boxModel);
 
 		// Add the constructors
@@ -120,101 +127,97 @@ public class BaseBulletTest extends BulletTest {
 		world.addConstructor("box", new BulletConstructor(boxModel, 1f)); // mass = 1kg: dynamic body
 		world.addConstructor("staticbox", new BulletConstructor(boxModel, 0f)); // mass = 0: static body
 	}
-	
+
 	@Override
 	public void dispose () {
 		world.dispose();
 		world = null;
-		
+
 		for (Disposable disposable : disposables)
 			disposable.dispose();
 		disposables.clear();
-		
+
 		modelBatch.dispose();
 		modelBatch = null;
-		
+
 		shadowBatch.dispose();
 		shadowBatch = null;
-		
-		if (shadows)
-			((DirectionalShadowLight)light).dispose();
-		light = null;
-		
+
+// shadowLight.dispose();
+		shadowLight = null;
+
 		super.dispose();
 	}
-	
+
 	@Override
 	public void render () {
 		render(true);
 	}
-		
-	public void render(boolean update) {
+
+	public void render (boolean update) {
 		fpsCounter.put(Gdx.graphics.getFramesPerSecond());
-		
-		if (update)
-			update();
-		
+
+		if (update) update();
+
 		beginRender(true);
 
 		renderWorld();
 
 		Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
-		if (debugMode != DebugDrawModes.DBG_NoDebug)
-			world.setDebugMode(debugMode, camera.combined);
+		if (debugMode != DebugDrawModes.DBG_NoDebug) world.setDebugMode(debugMode, camera.combined);
 		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);
-		
+
 		performance.setLength(0);
 		performance.append("FPS: ").append(fpsCounter.value).append(", Bullet: ")
-			.append((int)(performanceCounter.load.value*100f)).append("%");
+			.append((int)(performanceCounter.load.value * 100f)).append("%");
 	}
-	
-	protected void beginRender(boolean lighting) {
+
+	protected void beginRender (boolean lighting) {
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClearColor(0,0,0,0);
+		Gdx.gl.glClearColor(0, 0, 0, 0);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 		camera.update();
 	}
-	
-	protected void renderWorld() {
-		if (shadows) {
-			((DirectionalShadowLight)light).begin(Vector3.Zero, camera.direction);
-			shadowBatch.begin(((DirectionalShadowLight)light).getCamera());
-			world.render(shadowBatch, null);
-			shadowBatch.end();
-			((DirectionalShadowLight)light).end();
-		}
-		
+
+	protected void renderWorld () {
+// shadowLight.begin(Vector3.Zero, camera.direction);
+// shadowBatch.begin(shadowLight.getCamera());
+// world.render(shadowBatch, null);
+// shadowBatch.end();
+// shadowLight.end();
+
 		modelBatch.begin(camera);
-		world.render(modelBatch, environment);
+		world.render(modelBatch, lights);
 		modelBatch.end();
 	}
-	
-	public void update() {
+
+	public void update () {
 		world.update();
 	}
-	
-	public BulletEntity shoot(final float x, final float y) {
-		return shoot(x,y,30f);
+
+	public BulletEntity shoot (final float x, final float y) {
+		return shoot(x, y, 30f);
 	}
-	
-	public BulletEntity shoot(final float x, final float y, final float impulse) {
+
+	public BulletEntity shoot (final float x, final float y, final float impulse) {
 		return shoot("box", x, y, impulse);
 	}
-	
-	public BulletEntity shoot(final String what, final float x, final float y, final float impulse) {
+
+	public BulletEntity shoot (final String what, final float x, final float y, final float impulse) {
 		// Shoot a box
 		Ray ray = camera.getPickRay(x, y);
 		BulletEntity entity = world.add(what, ray.origin.x, ray.origin.y, ray.origin.z);
-		entity.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+		entity.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+			1f);
 		((btRigidBody)entity.body).applyCentralImpulse(ray.direction.scl(impulse));
 		return entity;
 	}
-	
-	public void setDebugMode(final int mode) {
+
+	public void setDebugMode (final int mode) {
 		world.setDebugMode(debugMode = mode, camera.combined);
 	}
-	
-	public void toggleDebugMode() {
+
+	public void toggleDebugMode () {
 		if (world.getDebugMode() == DebugDrawModes.DBG_NoDebug)
 			setDebugMode(DebugDrawModes.DBG_DrawWireframe);
 		else if (world.renderMeshes)
@@ -224,13 +227,13 @@ public class BaseBulletTest extends BulletTest {
 			setDebugMode(DebugDrawModes.DBG_NoDebug);
 		}
 	}
-	
+
 	@Override
 	public boolean longPress (float x, float y) {
 		toggleDebugMode();
 		return true;
 	}
-	
+
 	@Override
 	public boolean keyUp (int keycode) {
 		if (keycode == Keys.ENTER) {
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java
index 0f521d0..698bb48 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.Color;
@@ -24,27 +25,27 @@ import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Disposable;
 
-/** @author xoppa
- * Base class specifying only a renderable entity  
- */
+/** @author xoppa Base class specifying only a renderable entity */
 public abstract class BaseEntity implements Disposable {
 	public Matrix4 transform;
 	public ModelInstance modelInstance;
 	private Color color = new Color(1f, 1f, 1f, 1f);
+
 	public Color getColor () {
 		return color;
 	}
+
 	public void setColor (Color color) {
 		setColor(color.r, color.g, color.b, color.a);
 	}
+
 	public void setColor (float r, float g, float b, float a) {
 		color.set(r, g, b, a);
 		if (modelInstance != null) {
 			for (Material m : modelInstance.materials) {
 				ColorAttribute ca = (ColorAttribute)m.get(ColorAttribute.Diffuse);
-				if (ca != null)
-					ca.color.set(r, g, b, a);
-			}				
+				if (ca != null) ca.color.set(r, g, b, a);
+			}
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
index 19dbbdc..0719c3e 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.g3d.Environment;
@@ -23,72 +24,72 @@ import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.ObjectMap;
 
-/** @author xoppa 
- * No physics, simple base class for rendering a bunch of entities.  
- */
+/** @author xoppa No physics, simple base class for rendering a bunch of entities. */
 public class BaseWorld<T extends BaseEntity> implements Disposable {
 	public static abstract class Constructor<T extends BaseEntity> implements Disposable {
 		public Model model = null;
-		public abstract T construct(final float x, final float y, final float z);
-		public abstract T construct(final Matrix4 transform);
+
+		public abstract T construct (final float x, final float y, final float z);
+
+		public abstract T construct (final Matrix4 transform);
 	}
-	
+
 	private final ObjectMap<String, Constructor<T>> constructors = new ObjectMap<String, Constructor<T>>();
 	protected final Array<T> entities = new Array<T>();
 	private final Array<Model> models = new Array<Model>();
-	
-	public void addConstructor(final String name, final Constructor<T> constructor) {
+
+	public void addConstructor (final String name, final Constructor<T> constructor) {
 		constructors.put(name, constructor);
-		if (constructor.model != null && !models.contains(constructor.model, true))
-			models.add(constructor.model);
+		if (constructor.model != null && !models.contains(constructor.model, true)) models.add(constructor.model);
 	}
-	
-	public Constructor<T> getConstructor(final String name) {
+
+	public Constructor<T> getConstructor (final String name) {
 		return constructors.get(name);
 	}
-	
-	public void add(final T entity) {
+
+	public void add (final T entity) {
 		entities.add(entity);
 	}
-	
-	public T add(final String type, float x, float y, float z) {
+
+	public T add (final String type, float x, float y, float z) {
 		final T entity = constructors.get(type).construct(x, y, z);
 		add(entity);
 		return entity;
 	}
-	
-	public T add(final String type, final Matrix4 transform) {
+
+	public T add (final String type, final Matrix4 transform) {
 		final T entity = constructors.get(type).construct(transform);
 		add(entity);
 		return entity;
 	}
-	
-	public void render(final ModelBatch batch, final Environment lights) {
+
+	public void render (final ModelBatch batch, final Environment lights) {
 		render(batch, lights, entities);
 	}
-	
-	public void render(final ModelBatch batch, final Environment lights, final Iterable<T> entities) {
+
+	public void render (final ModelBatch batch, final Environment lights, final Iterable<T> entities) {
 		for (final T e : entities) {
 			batch.render(e.modelInstance, lights);
 		}
 	}
-	
-	public void render(final ModelBatch batch, final Environment lights, final T entity) {
+
+	public void render (final ModelBatch batch, final Environment lights, final T entity) {
 		batch.render(entity.modelInstance, lights);
 	}
-	
-	public void update() {	}
-	
+
+	public void update () {
+	}
+
 	@Override
 	public void dispose () {
 		for (int i = 0; i < entities.size; i++)
 			entities.get(i).dispose();
 		entities.clear();
-		
+
 		for (Constructor<T> constructor : constructors.values())
 			constructor.dispose();
 		constructors.clear();
-		
+
 		models.clear();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicBulletTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicBulletTest.java
index 8e00c0e..e58c347 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicBulletTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicBulletTest.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
@@ -53,7 +54,7 @@ public class BasicBulletTest extends BulletTest {
 	ModelBatch modelBatch;
 	Environment lights;
 	ModelBuilder modelBuilder = new ModelBuilder();
-	
+
 	btCollisionConfiguration collisionConfiguration;
 	btCollisionDispatcher dispatcher;
 	btBroadphaseInterface broadphase;
@@ -67,17 +68,17 @@ public class BasicBulletTest extends BulletTest {
 	Array<btDefaultMotionState> motionStates = new Array<btDefaultMotionState>();
 	Array<btRigidBodyConstructionInfo> bodyInfos = new Array<btRigidBodyConstructionInfo>();
 	Array<btCollisionShape> shapes = new Array<btCollisionShape>();
-	Array<btRigidBody> bodies = new Array<btRigidBody>();	
+	Array<btRigidBody> bodies = new Array<btRigidBody>();
 
 	@Override
 	public void create () {
 		super.create();
 		instructions = "Swipe for next test";
-		
+
 		lights = new Environment();
 		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.2f, 0.2f, 0.2f, 1.f));
 		lights.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -0.5f, -1f, -0.7f));
-		
+
 		// Set up the camera
 		final float width = Gdx.graphics.getWidth();
 		final float height = Gdx.graphics.getHeight();
@@ -91,13 +92,33 @@ public class BasicBulletTest extends BulletTest {
 		// Create the model batch
 		modelBatch = new ModelBatch();
 		// Create some basic models
-		final Model groundModel = modelBuilder.createRect(20f, 0f, -20f, -20f, 0f, -20f, -20f, 0f, 20f, 20f, 0f, 20f, 0, 1, 0, 
-			new Material(ColorAttribute.createDiffuse(Color.BLUE), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(16f)),
-			Usage.Position | Usage.Normal);
+		final Model groundModel = modelBuilder.createRect(
+			20f,
+			0f,
+			-20f,
+			-20f,
+			0f,
+			-20f,
+			-20f,
+			0f,
+			20f,
+			20f,
+			0f,
+			20f,
+			0,
+			1,
+			0,
+			new Material(ColorAttribute.createDiffuse(Color.BLUE), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute
+				.createShininess(16f)), Usage.Position | Usage.Normal);
 		models.add(groundModel);
-		final Model sphereModel = modelBuilder.createSphere(1f, 1f, 1f, 10, 10,
-			new Material(ColorAttribute.createDiffuse(Color.RED), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f)), 
-			Usage.Position | Usage.Normal);
+		final Model sphereModel = modelBuilder.createSphere(
+			1f,
+			1f,
+			1f,
+			10,
+			10,
+			new Material(ColorAttribute.createDiffuse(Color.RED), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute
+				.createShininess(64f)), Usage.Position | Usage.Normal);
 		models.add(sphereModel);
 		// Load the bullet library
 		BaseBulletTest.init(); // Normally use: Bullet.init();
@@ -131,10 +152,10 @@ public class BasicBulletTest extends BulletTest {
 		// Create the spheres
 		for (float x = -10f; x <= 10f; x += 2f) {
 			for (float y = 5f; y <= 15f; y += 2f) {
-				for (float z = 0f; z <= 0f; z+= 2f) {
+				for (float z = 0f; z <= 0f; z += 2f) {
 					ModelInstance sphere = new ModelInstance(sphereModel);
 					instances.add(sphere);
-					sphere.transform.trn(x+0.1f*MathUtils.random(), y+0.1f*MathUtils.random(), z+0.1f*MathUtils.random());
+					sphere.transform.trn(x + 0.1f * MathUtils.random(), y + 0.1f * MathUtils.random(), z + 0.1f * MathUtils.random());
 					btDefaultMotionState sphereMotionState = new btDefaultMotionState();
 					sphereMotionState.setWorldTransform(sphere.transform);
 					motionStates.add(sphereMotionState);
@@ -146,33 +167,33 @@ public class BasicBulletTest extends BulletTest {
 			}
 		}
 	}
-	
+
 	@Override
 	public void render () {
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
-		
+
 		fpsCounter.put(Gdx.graphics.getFramesPerSecond());
-		
+
 		performanceCounter.tick();
 		performanceCounter.start();
 		((btDynamicsWorld)collisionWorld).stepSimulation(Gdx.graphics.getDeltaTime(), 5);
 		performanceCounter.stop();
-		
+
 		int c = motionStates.size;
 		for (int i = 0; i < c; i++) {
 			motionStates.get(i).getWorldTransform(instances.get(i).transform);
 		}
-		
+
 		modelBatch.begin(camera);
 		modelBatch.render(instances, lights);
 		modelBatch.end();
-		
+
 		performance.setLength(0);
 		performance.append("FPS: ").append(fpsCounter.value).append(", Bullet: ")
-			.append((int)(performanceCounter.load.value*100f)).append("%");
+			.append((int)(performanceCounter.load.value * 100f)).append("%");
 	}
-	
+
 	@Override
 	public void dispose () {
 		collisionWorld.dispose();
@@ -180,7 +201,7 @@ public class BasicBulletTest extends BulletTest {
 		broadphase.dispose();
 		dispatcher.dispose();
 		collisionConfiguration.dispose();
-		
+
 		for (btRigidBody body : bodies)
 			body.dispose();
 		bodies.clear();
@@ -193,7 +214,7 @@ public class BasicBulletTest extends BulletTest {
 		for (btRigidBodyConstructionInfo info : bodyInfos)
 			info.dispose();
 		bodyInfos.clear();
-		
+
 		modelBatch.dispose();
 		instances.clear();
 		for (Model model : models)
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java
index 8f64261..bfbff8b 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java
@@ -12,8 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
@@ -38,42 +38,43 @@ public class BasicShapesTest extends BaseBulletTest {
 
 		final Texture texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
 		disposables.add(texture);
-		final Material material = new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(1,1,1,1), FloatAttribute.createShininess(8f));
+		final Material material = new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(1, 1, 1, 1),
+			FloatAttribute.createShininess(8f));
 		final long attributes = Usage.Position | Usage.Normal | Usage.TextureCoordinates;
-		
+
 		final Model sphere = modelBuilder.createSphere(4f, 4f, 4f, 24, 24, material, attributes);
 		disposables.add(sphere);
 		world.addConstructor("sphere", new BulletConstructor(sphere, 10f, new btSphereShape(2f)));
-		
+
 		final Model cylinder = modelBuilder.createCylinder(4f, 6f, 4f, 16, material, attributes);
 		disposables.add(cylinder);
 		world.addConstructor("cylinder", new BulletConstructor(cylinder, 10f, new btCylinderShape(Vector3.tmp.set(2f, 3f, 2f))));
-		
+
 		final Model capsule = modelBuilder.createCapsule(2f, 6f, 16, material, attributes);
 		disposables.add(capsule);
 		world.addConstructor("capsule", new BulletConstructor(capsule, 10f, new btCapsuleShape(2f, 2f)));
-		
+
 		final Model box = modelBuilder.createBox(4f, 4f, 2f, material, attributes);
 		disposables.add(box);
 		world.addConstructor("box2", new BulletConstructor(box, 10f, new btBoxShape(Vector3.tmp.set(2f, 2f, 1f))));
-		
+
 		final Model cone = modelBuilder.createCone(4f, 6f, 4f, 16, material, attributes);
 		disposables.add(cone);
-		world.addConstructor("cone", new BulletConstructor(cone, 10f, new btConeShape(2f,6f)));
+		world.addConstructor("cone", new BulletConstructor(cone, 10f, new btConeShape(2f, 6f)));
 
 		// Create the entities
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
 		world.add("sphere", 0, 5, 5);
 		world.add("cylinder", 5, 5, 0);
 		world.add("box2", 0, 5, 0);
 		world.add("capsule", 5, 5, 5);
 		world.add("cone", 10, 5, 0);
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java
index 614c0ed..1422ee3 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.Mesh;
@@ -25,67 +26,54 @@ import com.badlogic.gdx.physics.bullet.collision.btCollisionObject;
 import com.badlogic.gdx.physics.bullet.collision.btCollisionShape;
 import com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyConstructionInfo;
 
-/** @author xoppa
- *  Holds the information necessary to create a bullet btRigidBody. This class should outlive the btRigidBody (entity) itself.
- */
+/** @author xoppa Holds the information necessary to create a bullet btRigidBody. This class should outlive the btRigidBody (entity)
+ *         itself. */
 public class BulletConstructor extends BaseWorld.Constructor<BulletEntity> {
 	public btRigidBodyConstructionInfo bodyInfo = null;
 	public btCollisionShape shape = null;
-		
-	/**
-	 * Specify null for the shape to use only the renderable part of this entity and not the physics part. 
-	 */
+
+	/** Specify null for the shape to use only the renderable part of this entity and not the physics part. */
 	public BulletConstructor (final Model model, final float mass, final btCollisionShape shape) {
 		create(model, mass, shape);
 	}
-	
-	/**
-	 * Specify null for the shape to use only the renderable part of this entity and not the physics part. 
-	 */
+
+	/** Specify null for the shape to use only the renderable part of this entity and not the physics part. */
 	public BulletConstructor (final Model model, final btCollisionShape shape) {
 		this(model, -1f, shape);
 	}
 
-	/**
-	 * Creates a btBoxShape with the specified dimensions.
-	 */
+	/** Creates a btBoxShape with the specified dimensions. */
 	public BulletConstructor (final Model model, final float mass, final float width, final float height, final float depth) {
 		create(model, mass, width, height, depth);
 	}
-	
-	/**
-	 * Creates a btBoxShape with the specified dimensions and NO rigidbody.
-	 */
+
+	/** Creates a btBoxShape with the specified dimensions and NO rigidbody. */
 	public BulletConstructor (final Model model, final float width, final float height, final float depth) {
 		this(model, -1f, width, height, depth);
 	}
-	
-	/**
-	 * Creates a btBoxShape with the same dimensions as the shape.
-	 */
+
+	/** Creates a btBoxShape with the same dimensions as the shape. */
 	public BulletConstructor (final Model model, final float mass) {
-		final BoundingBox boundingBox = new BoundingBox(); 
+		final BoundingBox boundingBox = new BoundingBox();
 		model.calculateBoundingBox(boundingBox);
 		final Vector3 dimensions = boundingBox.getDimensions();
 		create(model, mass, dimensions.x, dimensions.y, dimensions.z);
 	}
-	
-	/**
-	 * Creates a btBoxShape with the same dimensions as the shape and NO rigidbody.
-	 */
+
+	/** Creates a btBoxShape with the same dimensions as the shape and NO rigidbody. */
 	public BulletConstructor (final Model model) {
 		this(model, -1f);
 	}
-	
-	private void create (final Model model, final float mass, final float width, final float height, final float depth) {			
+
+	private void create (final Model model, final float mass, final float width, final float height, final float depth) {
 		// Create a simple boxshape
 		create(model, mass, new btBoxShape(Vector3.tmp.set(width * 0.5f, height * 0.5f, depth * 0.5f)));
 	}
-	
-	private void create(final Model model, final float mass, final btCollisionShape shape) {
+
+	private void create (final Model model, final float mass, final btCollisionShape shape) {
 		this.model = model;
 		this.shape = shape;
-		
+
 		if (shape != null && mass >= 0) {
 			// Calculate the local inertia, bodies with no mass are static
 			Vector3 localInertia;
@@ -95,7 +83,7 @@ public class BulletConstructor extends BaseWorld.Constructor<BulletEntity> {
 				shape.calculateLocalInertia(mass, Vector3.tmp);
 				localInertia = Vector3.tmp;
 			}
-			
+
 			// For now just pass null as the motionstate, we'll add that to the body in the entity itself
 			bodyInfo = new btRigidBodyConstructionInfo(mass, null, shape, localInertia);
 		}
@@ -120,7 +108,7 @@ public class BulletConstructor extends BaseWorld.Constructor<BulletEntity> {
 		} else
 			return new BulletEntity(model, bodyInfo, x, y, z);
 	}
-	
+
 	@Override
 	public BulletEntity construct (final Matrix4 transform) {
 		if (bodyInfo == null && shape != null) {
@@ -128,6 +116,6 @@ public class BulletConstructor extends BaseWorld.Constructor<BulletEntity> {
 			obj.setCollisionShape(shape);
 			return new BulletEntity(model, obj, transform);
 		} else
-		return new BulletEntity(model, bodyInfo, transform);
+			return new BulletEntity(model, bodyInfo, transform);
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java
index 66f0307..53b7c99 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.Mesh;
@@ -25,9 +26,7 @@ import com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyConstructionInfo;
 import com.badlogic.gdx.physics.bullet.linearmath.btMotionState;
 import com.badlogic.gdx.utils.Disposable;
 
-/** @author xoppa
- * Renderable BaseEntity with a bullet physics body. 
- */
+/** @author xoppa Renderable BaseEntity with a bullet physics body. */
 public class BulletEntity extends BaseEntity {
 	private final static Matrix4 tmpM = new Matrix4();
 	public BulletEntity.MotionState motionState;
@@ -36,24 +35,24 @@ public class BulletEntity extends BaseEntity {
 	public BulletEntity (final Model model, final btRigidBodyConstructionInfo bodyInfo, final float x, final float y, final float z) {
 		this(model, bodyInfo == null ? null : new btRigidBody(bodyInfo), x, y, z);
 	}
-	
+
 	public BulletEntity (final Model model, final btRigidBodyConstructionInfo bodyInfo, final Matrix4 transform) {
 		this(model, bodyInfo == null ? null : new btRigidBody(bodyInfo), transform);
 	}
-	
+
 	public BulletEntity (final Model model, final btCollisionObject body, final float x, final float y, final float z) {
 		this(model, body, tmpM.setToTranslation(x, y, z));
 	}
-	
+
 	public BulletEntity (final Model model, final btCollisionObject body, final Matrix4 transform) {
 		this(new ModelInstance(model, transform.cpy()), body);
 	}
-		
+
 	public BulletEntity (final ModelInstance modelInstance, final btCollisionObject body) {
 		this.modelInstance = modelInstance;
 		this.transform = this.modelInstance.transform;
 		this.body = body;
-		
+
 		if (body != null) {
 			body.userData = this;
 			if (body instanceof btRigidBody) {
@@ -73,29 +72,25 @@ public class BulletEntity extends BaseEntity {
 		motionState = null;
 		body = null;
 	}
-	
+
 	static class MotionState extends btMotionState {
 		private final Matrix4 transform;
-		
-		public MotionState(final Matrix4 transform) {
+
+		public MotionState (final Matrix4 transform) {
 			this.transform = transform;
 		}
-		
-		/**
-		 * For dynamic and static bodies this method is called by bullet once to get the initial state of the body.
-		 * For kinematic bodies this method is called on every update, unless the body is deactivated.
-		 */
+
+		/** For dynamic and static bodies this method is called by bullet once to get the initial state of the body. For kinematic
+		 * bodies this method is called on every update, unless the body is deactivated. */
 		@Override
 		public void getWorldTransform (final Matrix4 worldTrans) {
 			worldTrans.set(transform);
 		}
 
-		/**
-		 * For dynamic bodies this method is called by bullet every update to inform about the new position and rotation.
-		 */
+		/** For dynamic bodies this method is called by bullet every update to inform about the new position and rotation. */
 		@Override
 		public void setWorldTransform (final Matrix4 worldTrans) {
 			transform.set(worldTrans);
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
index 8086805..2720223 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
@@ -36,43 +37,39 @@ import com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSol
 import com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw;
 import com.badlogic.gdx.utils.PerformanceCounter;
 
-/** @author xoppa
- * Bullet physics world that holds all bullet entities and constructors.  
- */
+/** @author xoppa Bullet physics world that holds all bullet entities and constructors. */
 public class BulletWorld extends BaseWorld<BulletEntity> {
 	public DebugDrawer debugDrawer = null;
 	public boolean renderMeshes = true;
-	
+
 	public final btCollisionConfiguration collisionConfiguration;
 	public final btCollisionDispatcher dispatcher;
 	public final btBroadphaseInterface broadphase;
 	public final btConstraintSolver solver;
 	public final btCollisionWorld collisionWorld;
 	public PerformanceCounter performanceCounter;
-	public final Vector3 gravity;	
-	
+	public final Vector3 gravity;
+
 	public int maxSubSteps = 5;
 	public float fixedTimeStep = 1f / 60f;
-	
-	public BulletWorld(final btCollisionConfiguration collisionConfiguration, final btCollisionDispatcher dispatcher,
-		final btBroadphaseInterface broadphase, final btConstraintSolver solver, final btCollisionWorld world,  
-		final Vector3 gravity) {
+
+	public BulletWorld (final btCollisionConfiguration collisionConfiguration, final btCollisionDispatcher dispatcher,
+		final btBroadphaseInterface broadphase, final btConstraintSolver solver, final btCollisionWorld world, final Vector3 gravity) {
 		this.collisionConfiguration = collisionConfiguration;
 		this.dispatcher = dispatcher;
 		this.broadphase = broadphase;
 		this.solver = solver;
 		this.collisionWorld = world;
-		if (world instanceof btDynamicsWorld)
-			((btDynamicsWorld)this.collisionWorld).setGravity(gravity);
+		if (world instanceof btDynamicsWorld) ((btDynamicsWorld)this.collisionWorld).setGravity(gravity);
 		this.gravity = gravity;
 	}
-	
-	public BulletWorld(final btCollisionConfiguration collisionConfiguration, final btCollisionDispatcher dispatcher,
+
+	public BulletWorld (final btCollisionConfiguration collisionConfiguration, final btCollisionDispatcher dispatcher,
 		final btBroadphaseInterface broadphase, final btConstraintSolver solver, final btCollisionWorld world) {
 		this(collisionConfiguration, dispatcher, broadphase, solver, world, new Vector3(0, -10, 0));
 	}
-	
-	public BulletWorld(final Vector3 gravity) {
+
+	public BulletWorld (final Vector3 gravity) {
 		collisionConfiguration = new btDefaultCollisionConfiguration();
 		dispatcher = new btCollisionDispatcher(collisionConfiguration);
 		broadphase = new btDbvtBroadphase();
@@ -81,24 +78,24 @@ public class BulletWorld extends BaseWorld<BulletEntity> {
 		((btDynamicsWorld)collisionWorld).setGravity(gravity);
 		this.gravity = gravity;
 	}
-	
-	public BulletWorld() {
+
+	public BulletWorld () {
 		this(new Vector3(0, -10, 0));
 	}
-	
+
 	@Override
-	public void add(final BulletEntity entity) {
+	public void add (final BulletEntity entity) {
 		super.add(entity);
 		if (entity.body != null) {
 			if (entity.body instanceof btRigidBody)
 				((btDiscreteDynamicsWorld)collisionWorld).addRigidBody((btRigidBody)entity.body);
 			else
 				collisionWorld.addCollisionObject(entity.body);
-			// Store the index of the entity in the collision object.  
-			entity.body.setUserValue(entities.size-1);
+			// Store the index of the entity in the collision object.
+			entity.body.setUserValue(entities.size - 1);
 		}
 	}
-	
+
 	@Override
 	public void update () {
 		if (performanceCounter != null) {
@@ -107,10 +104,9 @@ public class BulletWorld extends BaseWorld<BulletEntity> {
 		}
 		if (collisionWorld instanceof btDynamicsWorld)
 			((btDynamicsWorld)collisionWorld).stepSimulation(Gdx.graphics.getDeltaTime(), maxSubSteps, fixedTimeStep);
-		if (performanceCounter != null)
-			performanceCounter.stop();
+		if (performanceCounter != null) performanceCounter.stop();
 	}
-	
+
 	@Override
 	public void render (ModelBatch batch, Environment lights, Iterable<BulletEntity> entities) {
 		if (debugDrawer != null && debugDrawer.getDebugMode() > 0) {
@@ -118,10 +114,9 @@ public class BulletWorld extends BaseWorld<BulletEntity> {
 			collisionWorld.debugDrawWorld();
 			debugDrawer.end();
 		}
-		if (renderMeshes)
-			super.render(batch, lights, entities);
+		if (renderMeshes) super.render(batch, lights, entities);
 	}
-	
+
 	@Override
 	public void dispose () {
 		for (int i = 0; i < entities.size; i++) {
@@ -133,30 +128,24 @@ public class BulletWorld extends BaseWorld<BulletEntity> {
 					collisionWorld.removeCollisionObject(body);
 			}
 		}
-		
+
 		super.dispose();
-		
+
 		collisionWorld.dispose();
-		if (solver != null)
-			solver.dispose();
-		if (broadphase != null)
-			broadphase.dispose();
-		if (dispatcher != null)
-			dispatcher.dispose();
-		if (collisionConfiguration != null)
-			collisionConfiguration.dispose();
+		if (solver != null) solver.dispose();
+		if (broadphase != null) broadphase.dispose();
+		if (dispatcher != null) dispatcher.dispose();
+		if (collisionConfiguration != null) collisionConfiguration.dispose();
 	}
-	
-	public void setDebugMode(final int mode, final Matrix4 projMatrix) {
-		if (mode == btIDebugDraw.DebugDrawModes.DBG_NoDebug && debugDrawer == null)
-			return;
-		if (debugDrawer == null)
-			collisionWorld.setDebugDrawer(debugDrawer = new DebugDrawer());
+
+	public void setDebugMode (final int mode, final Matrix4 projMatrix) {
+		if (mode == btIDebugDraw.DebugDrawModes.DBG_NoDebug && debugDrawer == null) return;
+		if (debugDrawer == null) collisionWorld.setDebugDrawer(debugDrawer = new DebugDrawer());
 		debugDrawer.lineRenderer.setProjectionMatrix(projMatrix);
 		debugDrawer.setDebugMode(mode);
 	}
-	
-	public int getDebugMode() {
+
+	public int getDebugMode () {
 		return (debugDrawer == null) ? 0 : debugDrawer.getDebugMode();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CharacterTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CharacterTest.java
deleted file mode 100644
index 936f163..0000000
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CharacterTest.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package com.badlogic.gdx.tests.bullet;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Material;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute;
-import com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.physics.bullet.collision.btAxisSweep3;
-import com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy;
-import com.badlogic.gdx.physics.bullet.collision.btCapsuleShape;
-import com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher;
-import com.badlogic.gdx.physics.bullet.collision.btCollisionObject;
-import com.badlogic.gdx.physics.bullet.collision.btConvexShape;
-import com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase;
-import com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConfiguration;
-import com.badlogic.gdx.physics.bullet.collision.btGhostPairCallback;
-import com.badlogic.gdx.physics.bullet.collision.btPairCachingGhostObject;
-import com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld;
-import com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld;
-import com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController;
-import com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver;
-
-public class CharacterTest extends BaseBulletTest {
-	final int BOXCOUNT_X = 5;
-	final int BOXCOUNT_Y = 5;
-	final int BOXCOUNT_Z = 1;
-
-	final float BOXOFFSET_X = -2.5f;
-	final float BOXOFFSET_Y = 0.5f;
-	final float BOXOFFSET_Z = 0f;
-	
-	BulletEntity ground;
-	BulletEntity character;
-	
-	btGhostPairCallback ghostPairCallback;
-	btPairCachingGhostObject ghostObject;
-	btConvexShape ghostShape;
-	btKinematicCharacterController characterController;
-	Matrix4 characterTransform;
-	Vector3 characterDirection = new Vector3();
-	Vector3 walkDirection = new Vector3();
-	
-	@Override
-	public BulletWorld createWorld () {
-		// We create the world using an axis sweep broadphase for this test
-		btDefaultCollisionConfiguration collisionConfiguration = new btDefaultCollisionConfiguration();
-		btCollisionDispatcher dispatcher = new btCollisionDispatcher(collisionConfiguration);
-		btAxisSweep3 sweep = new btAxisSweep3(new Vector3(-1000, -1000, -1000), new Vector3(1000, 1000, 1000));
-		btSequentialImpulseConstraintSolver solver = new btSequentialImpulseConstraintSolver();
-		btDiscreteDynamicsWorld collisionWorld = new btDiscreteDynamicsWorld(dispatcher, sweep, solver, collisionConfiguration);
-		ghostPairCallback = new btGhostPairCallback();
-		sweep.getOverlappingPairCache().setInternalGhostPairCallback(ghostPairCallback);
-		return new BulletWorld(collisionConfiguration, dispatcher, sweep, solver, collisionWorld);
-	}
-	
-	@Override
-	public void create () {
-		super.create();
-		instructions = "Tap to shoot\nArrow keys to move\nR to reset\nLong press to toggle debug mode\nSwipe for next test";
-		
-		// Create a visual representation of the character (note that we don't use the physics part of BulletEntity, we'll do that manually)
-		final Texture texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
-		disposables.add(texture);
-		final Material material = new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(1,1,1,1), FloatAttribute.createShininess(8f));
-		final long attributes = Usage.Position | Usage.Normal | Usage.TextureCoordinates;
-		final Model capsule = modelBuilder.createCapsule(1.75f, 4.25f, 16, material, attributes);
-		disposables.add(capsule);
-		world.addConstructor("capsule", new BulletConstructor(capsule, null));
-		character = world.add("capsule", 5f, 2.125f, 5f);
-		characterTransform = character.transform; // Set by reference
-		
-		// Create the physics representation of the character
-		ghostObject = new btPairCachingGhostObject();
-		ghostObject.setWorldTransform(characterTransform);
-		ghostShape = new btCapsuleShape(1.75f, 1.75f);
-		ghostObject.setCollisionShape(ghostShape);
-		ghostObject.setCollisionFlags(btCollisionObject.CollisionFlags.CF_CHARACTER_OBJECT);
-		characterController = new btKinematicCharacterController(ghostObject, ghostShape, .35f);
-		
-		// And add it to the physics world
-		world.collisionWorld.addCollisionObject(ghostObject, 
-			(short)btBroadphaseProxy.CollisionFilterGroups.CharacterFilter,
-			(short)(btBroadphaseProxy.CollisionFilterGroups.StaticFilter | btBroadphaseProxy.CollisionFilterGroups.DefaultFilter));
-		((btDiscreteDynamicsWorld)(world.collisionWorld)).addAction(characterController);
-		
-		// Add the ground
-		(ground = world.add("ground", 0f, 0f, 0f))
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		// Create some boxes to play with
-		for (int x = 0; x < BOXCOUNT_X; x++) {
-			for (int y = 0; y < BOXCOUNT_Y; y++) {
-				for (int z = 0; z < BOXCOUNT_Z; z++) {
-					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
-				}
-			}
-		}
-	}
-	
-	@Override
-	public void update () {
-		// If the left or right key is pressed, rotate the character and update its physics update accordingly.
-		if (Gdx.input.isKeyPressed(Keys.LEFT)) {
-			characterTransform.rotate(0, 1, 0, 5f);
-			ghostObject.setWorldTransform(characterTransform);
-		}
-		if (Gdx.input.isKeyPressed(Keys.RIGHT)) {
-			characterTransform.rotate(0, 1, 0, -5f);
-			ghostObject.setWorldTransform(characterTransform);
-		}
-		// Fetch which direction the character is facing now
-		characterDirection.set(-1,0,0).rot(characterTransform).nor();
-		// Set the walking direction accordingly (either forward or backward)
-		walkDirection.set(0,0,0);
-		if (Gdx.input.isKeyPressed(Keys.UP))
-			walkDirection.add(characterDirection);
-		if (Gdx.input.isKeyPressed(Keys.DOWN))
-			walkDirection.add(-characterDirection.x, -characterDirection.y, -characterDirection.z);
-		walkDirection.scl(4f * Gdx.graphics.getDeltaTime());
-		// And update the character controller
-		characterController.setWalkDirection(walkDirection);
-		// Now we can update the world as normally
-		super.update();
-		// And fetch the new transformation of the character (this will make the model be rendered correctly)
-		ghostObject.getWorldTransform(characterTransform);
-	}
-	
-	@Override
-	protected void renderWorld () {
-		// TODO Auto-generated method stub
-		super.renderWorld();
-	}
-	
-	@Override
-	public boolean tap (float x, float y, int count, int button) {
-		shoot(x, y);
-		return true;
-	}
-	
-	@Override
-	public void dispose () {
-		((btDiscreteDynamicsWorld)(world.collisionWorld)).removeAction(characterController);
-		world.collisionWorld.removeCollisionObject(ghostObject);
-		super.dispose();
-		characterController.dispose();
-		ghostObject.dispose();
-		ghostShape.dispose();
-		ghostPairCallback.dispose();
-		ground = null;
-	}
-}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionTest.java
index 32a9343..f5f0fb5 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionTest.java
@@ -33,25 +33,24 @@ public class CollisionTest extends ShootTest {
 	Array<BulletEntity> hits = new Array<BulletEntity>();
 	Array<BulletEntity> contacts = new Array<BulletEntity>();
 	Array<Color> colors = new Array<Color>();
-	
-	public class TestContactResultCallback extends ContactResultCallback
-	{
+
+	public class TestContactResultCallback extends ContactResultCallback {
 		@Override
 		public float addSingleResult (btManifoldPoint cp, btCollisionObjectWrapper colObj0Wrap, int partId0, int index0,
 			btCollisionObjectWrapper colObj1Wrap, int partId1, int index1) {
-			btCollisionObject other = colObj0Wrap.getCollisionObject() == projectile.body ?
-					colObj1Wrap.getCollisionObject() : colObj0Wrap.getCollisionObject();
+			btCollisionObject other = colObj0Wrap.getCollisionObject() == projectile.body ? colObj1Wrap.getCollisionObject()
+				: colObj0Wrap.getCollisionObject();
 			if (other != null && other.userData != null && other.userData instanceof BulletEntity) {
 				BulletEntity ent = (BulletEntity)other.userData;
-				if (ent != ground && !hits.contains(ent, true))
-					hits.add((BulletEntity)other.userData);
+				if (ent != ground && !hits.contains(ent, true)) hits.add((BulletEntity)other.userData);
 			}
 			return 0f;
 		}
 	}
+
 	TestContactResultCallback contactCB;
-	
-	public void updateContactInfo() {
+
+	public void updateContactInfo () {
 		int n = world.dispatcher.getNumManifolds();
 		for (int i = 0; i < n; i++) {
 			btPersistentManifold manifold = world.dispatcher.getManifoldByIndexInternal(i);
@@ -59,14 +58,12 @@ public class CollisionTest extends ShootTest {
 			btCollisionObject objB = manifold.getBody1();
 			if (objA != ground.body && objB != ground.body) {
 				if (objA.userData != null && objA.userData instanceof BulletEntity) {
-					BulletEntity ent = (BulletEntity)objA.userData; 
-					if (ent != projectile && !contacts.contains(ent, true) && !hits.contains(ent, true))
-						contacts.add(ent);
+					BulletEntity ent = (BulletEntity)objA.userData;
+					if (ent != projectile && !contacts.contains(ent, true) && !hits.contains(ent, true)) contacts.add(ent);
 				}
 				if (objB.userData != null && objB.userData instanceof BulletEntity) {
 					BulletEntity ent = (BulletEntity)objB.userData;
-					if (ent != projectile && !contacts.contains(ent, true) && !hits.contains(ent, true))
-						contacts.add(ent);
+					if (ent != projectile && !contacts.contains(ent, true) && !hits.contains(ent, true)) contacts.add(ent);
 				}
 			}
 		}
@@ -75,30 +72,31 @@ public class CollisionTest extends ShootTest {
 	@Override
 	public void create () {
 		super.create();
-		
+
 		contactCB = new TestContactResultCallback();
 	}
-	
+
 	@Override
 	public void render () {
 		process();
 	}
-	
+
 	private Pool<Color> colorPool = new Pool<Color>() {
-		@Override 
+		@Override
 		protected Color newObject () {
 			return new Color();
 		}
 	};
-	public void process() {
+
+	public void process () {
 		Color color = null;
 		update();
 		hits.clear();
 		contacts.clear();
-		
+
 		// Note that this might miss collisions, use InternalTickCallback to check for collision on every tick.
 		// See InternalTickTest on how to implement it.
-		
+
 		// Check what the projectile hits
 		if (projectile != null) {
 			color = projectile.getColor();
@@ -107,7 +105,7 @@ public class CollisionTest extends ShootTest {
 		}
 		// Check for other collisions
 		updateContactInfo();
-		
+
 		if (hits.size > 0) {
 			for (int i = 0; i < hits.size; i++) {
 				colors.add(colorPool.obtain().set(hits.get(i).getColor()));
@@ -121,22 +119,21 @@ public class CollisionTest extends ShootTest {
 			}
 		}
 		render(false);
-		if (projectile != null)
-			projectile.setColor(color);
+		if (projectile != null) projectile.setColor(color);
 		for (int i = 0; i < hits.size; i++)
 			hits.get(i).setColor(colors.get(i));
 		for (int i = 0; i < contacts.size; i++)
-			contacts.get(i).setColor(colors.get(hits.size+i));
+			contacts.get(i).setColor(colors.get(hits.size + i));
 		colorPool.freeAll(colors);
 		colors.clear();
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		projectile = shoot(x, y);
 		return true;
 	}
-	
+
 	@Override
 	public void dispose () {
 		super.dispose();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java
index d9aedeb..3e3dba8 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java
@@ -36,22 +36,21 @@ public class CollisionWorldTest extends BaseBulletTest {
 	boolean hit = false;
 	Color normalColor = new Color();
 	btCollisionObject other;
-		
-	public class TestContactResultCallback extends ContactResultCallback
-	{
+
+	public class TestContactResultCallback extends ContactResultCallback {
 		@Override
 		public float addSingleResult (btManifoldPoint cp, btCollisionObjectWrapper colObj0Wrap, int partId0, int index0,
 			btCollisionObjectWrapper colObj1Wrap, int partId1, int index1) {
 			hit = true;
-			other = colObj0Wrap.getCollisionObject() == movingBox.body ?
-					colObj1Wrap.getCollisionObject() : colObj0Wrap.getCollisionObject();
-			
+			other = colObj0Wrap.getCollisionObject() == movingBox.body ? colObj1Wrap.getCollisionObject() : colObj0Wrap
+				.getCollisionObject();
+
 			return 0f;
 		}
 	}
+
 	TestContactResultCallback contactCB;
-	
-	
+
 	@Override
 	public BulletWorld createWorld () {
 		btDefaultCollisionConfiguration collisionConfig = new btDefaultCollisionConfiguration();
@@ -60,78 +59,77 @@ public class CollisionWorldTest extends BaseBulletTest {
 		btCollisionWorld collisionWorld = new btCollisionWorld(dispatcher, broadphase, collisionConfig);
 		return new BulletWorld(collisionConfig, dispatcher, broadphase, null, collisionWorld);
 	}
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
+
 		instructions = "Long press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
-		
+
 		contactCB = new TestContactResultCallback();
-		
+
 		Model groundModel = world.getConstructor("ground").model;
 		Model boxModel = world.getConstructor("box").model;
-		
+
 		world.addConstructor("collisionGround", new BulletConstructor(groundModel));
 		world.addConstructor("collisionBox", new BulletConstructor(boxModel));
-		
-		world.add("collisionGround", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
-		world.add("collisionBox", 0f, 1f, 5f)
-			.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
-		world.add("collisionBox", 0f, 1f, -5f)
-			.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
-		world.add("collisionBox", 5f, 1f, 0f)
-			.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
-		world.add("collisionBox", -5f, 1f, 0f)
-			.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+
+		world.add("collisionGround", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
+		world.add("collisionBox", 0f, 1f, 5f).setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+			0.5f + 0.5f * (float)Math.random(), 1f);
+		world.add("collisionBox", 0f, 1f, -5f).setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+			0.5f + 0.5f * (float)Math.random(), 1f);
+		world.add("collisionBox", 5f, 1f, 0f).setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+			0.5f + 0.5f * (float)Math.random(), 1f);
+		world.add("collisionBox", -5f, 1f, 0f).setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+			0.5f + 0.5f * (float)Math.random(), 1f);
 		movingBox = world.add("collisionBox", -5f, 1f, 0f);
-		normalColor.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+		normalColor.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+			1f);
 	}
-	
+
 	Color tmpColor = new Color();
+
 	@Override
 	public void render () {
 		movingBox.transform.val[Matrix4.M03] = movingBox.transform.val[Matrix4.M13] = movingBox.transform.val[Matrix4.M23] = 0f;
 		movingBox.transform.rotate(Vector3.Y, Gdx.graphics.getDeltaTime() * 45f);
 		movingBox.transform.translate(-5f, 1f, 0f);
 		movingBox.body.setWorldTransform(movingBox.transform);
-		
+
 		super.render();
 	}
-	
+
 	@Override
 	public void update () {
 		super.update();
 		// Not using dynamics, so update the collision world manually
-		if (world.performanceCounter != null)
-			world.performanceCounter.start();
+		if (world.performanceCounter != null) world.performanceCounter.start();
 		world.collisionWorld.performDiscreteCollisionDetection();
-		if (world.performanceCounter != null)
-			world.performanceCounter.stop();
+		if (world.performanceCounter != null) world.performanceCounter.stop();
 	}
-	
+
 	@Override
 	protected void renderWorld () {
 		hit = false;
 		other = null;
 		world.collisionWorld.contactTest(movingBox.body, contactCB);
 		movingBox.setColor(hit ? Color.RED : normalColor);
-		
+
 		BulletEntity e = null;
-		if (other != null && other.userData != null && other.userData instanceof BulletEntity) { 
+		if (other != null && other.userData != null && other.userData instanceof BulletEntity) {
 			e = (BulletEntity)(other.userData);
 			tmpColor.set(e.getColor());
 			e.setColor(Color.RED);
 		}
-		
+
 		super.renderWorld();
 
-		if (e != null)
-			e.setColor(tmpColor);
+		if (e != null) e.setColor(tmpColor);
 	}
-	
+
 	@Override
 	public void dispose () {
 		super.dispose();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java
index fe9fcb6..8a77a31 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java
@@ -31,47 +31,56 @@ import com.badlogic.gdx.utils.Array;
 /** @author xoppa */
 public class ConstraintsTest extends BaseBulletTest {
 
-	final Array<btTypedConstraint> constraints = new Array<btTypedConstraint>(); 
-	
+	final Array<btTypedConstraint> constraints = new Array<btTypedConstraint>();
+
 	@Override
 	public void create () {
 		super.create();
 
-		final Model barModel = modelBuilder.createBox(10f, 1f, 1f, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)), Usage.Position | Usage.Normal);
+		final Model barModel = modelBuilder.createBox(10f, 1f, 1f, new Material(new ColorAttribute(ColorAttribute.Diffuse,
+			Color.WHITE)), Usage.Position | Usage.Normal);
 		disposables.add(barModel);
 		world.addConstructor("bar", new BulletConstructor(barModel, 0f)); // mass = 0: static body
-		
+
 		// Create the entities
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		BulletEntity bar = world.add("bar", 0f, 7f, 0f);
-		bar.setColor(0.75f + 0.25f * (float)Math.random(), 0.75f + 0.25f * (float)Math.random(), 0.75f + 0.25f * (float)Math.random(), 1f);
-		
+		bar.setColor(0.75f + 0.25f * (float)Math.random(), 0.75f + 0.25f * (float)Math.random(),
+			0.75f + 0.25f * (float)Math.random(), 1f);
+
 		BulletEntity box1 = world.add("box", -4.5f, 6f, 0f);
-		box1.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
-		btPoint2PointConstraint constraint = new btPoint2PointConstraint((btRigidBody)bar.body, (btRigidBody)box1.body, Vector3.tmp.set(-5, -0.5f, -0.5f), Vector3.tmp2.set(-0.5f, 0.5f, -0.5f));
+		box1.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+			1f);
+		btPoint2PointConstraint constraint = new btPoint2PointConstraint((btRigidBody)bar.body, (btRigidBody)box1.body,
+			Vector3.tmp.set(-5, -0.5f, -0.5f), Vector3.tmp2.set(-0.5f, 0.5f, -0.5f));
 		((btDynamicsWorld)world.collisionWorld).addConstraint(constraint, false);
 		constraints.add(constraint);
 		BulletEntity box2 = null;
 		for (int i = 0; i < 10; i++) {
 			if (i % 2 == 0) {
 				box2 = world.add("box", -3.5f + (float)i, 6f, 0f);
-				box2.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
-				constraint = new btPoint2PointConstraint((btRigidBody)box1.body, (btRigidBody)box2.body, Vector3.tmp.set(0.5f, -0.5f, 0.5f), Vector3.tmp2.set(-0.5f, -0.5f, 0.5f));
+				box2.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+					0.5f + 0.5f * (float)Math.random(), 1f);
+				constraint = new btPoint2PointConstraint((btRigidBody)box1.body, (btRigidBody)box2.body, Vector3.tmp.set(0.5f, -0.5f,
+					0.5f), Vector3.tmp2.set(-0.5f, -0.5f, 0.5f));
 			} else {
 				box1 = world.add("box", -3.5f + (float)i, 6f, 0f);
-				box1.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
-				constraint = new btPoint2PointConstraint((btRigidBody)box2.body, (btRigidBody)box1.body, Vector3.tmp.set(0.5f, 0.5f, -0.5f), Vector3.tmp2.set(-0.5f, 0.5f, -0.5f));
+				box1.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+					0.5f + 0.5f * (float)Math.random(), 1f);
+				constraint = new btPoint2PointConstraint((btRigidBody)box2.body, (btRigidBody)box1.body, Vector3.tmp.set(0.5f, 0.5f,
+					-0.5f), Vector3.tmp2.set(-0.5f, 0.5f, -0.5f));
 			}
 			((btDynamicsWorld)world.collisionWorld).addConstraint(constraint, false);
 			constraints.add(constraint);
 		}
-		constraint = new btPoint2PointConstraint((btRigidBody)bar.body, (btRigidBody)box1.body, Vector3.tmp.set(5f, -0.5f, -0.5f), Vector3.tmp2.set(0.5f, 0.5f, -0.5f));
+		constraint = new btPoint2PointConstraint((btRigidBody)bar.body, (btRigidBody)box1.body, Vector3.tmp.set(5f, -0.5f, -0.5f),
+			Vector3.tmp2.set(0.5f, 0.5f, -0.5f));
 		((btDynamicsWorld)world.collisionWorld).addConstraint(constraint, false);
 		constraints.add(constraint);
 	}
-	
+
 	@Override
 	public void dispose () {
 		for (int i = 0; i < constraints.size; i++) {
@@ -81,7 +90,7 @@ public class ConstraintsTest extends BaseBulletTest {
 		constraints.clear();
 		super.dispose();
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCacheTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCacheTest.java
index 94294f3..f2b8405 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCacheTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCacheTest.java
@@ -44,12 +44,12 @@ public class ContactCacheTest extends BaseBulletTest {
 			if (match0) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue0));
 				e.setColor(Color.RED);
-				Gdx.app.log(Float.toString(time), "Contact started "+userValue0);
+				Gdx.app.log(Float.toString(time), "Contact started " + userValue0);
 			}
 			if (match1) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue1));
 				e.setColor(Color.RED);
-				Gdx.app.log(Float.toString(time), "Contact started "+userValue1);
+				Gdx.app.log(Float.toString(time), "Contact started " + userValue1);
 			}
 		}
 
@@ -58,19 +58,19 @@ public class ContactCacheTest extends BaseBulletTest {
 			if (match0) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue0));
 				e.setColor(Color.BLUE);
-				Gdx.app.log(Float.toString(time), "Contact ended "+userValue0);
+				Gdx.app.log(Float.toString(time), "Contact ended " + userValue0);
 			}
 			if (match1) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue1));
 				e.setColor(Color.BLUE);
-				Gdx.app.log(Float.toString(time), "Contact ended "+userValue1);
+				Gdx.app.log(Float.toString(time), "Contact ended " + userValue1);
 			}
 		}
 	}
-	
+
 	public static class TestContactCache extends ContactCache {
 		public Array<BulletEntity> entities;
-	
+
 		@Override
 		public void onContactStarted (btPersistentManifold manifold, boolean match0, boolean match1) {
 			final int userValue0 = manifold.getBody0().getUserValue();
@@ -78,15 +78,15 @@ public class ContactCacheTest extends BaseBulletTest {
 			if (match0) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue0));
 				e.setColor(Color.RED);
-				Gdx.app.log(Float.toString(time), "Contact started "+userValue0);
+				Gdx.app.log(Float.toString(time), "Contact started " + userValue0);
 			}
 			if (match1) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue1));
 				e.setColor(Color.RED);
-				Gdx.app.log(Float.toString(time), "Contact started "+userValue1);
+				Gdx.app.log(Float.toString(time), "Contact started " + userValue1);
 			}
 		}
-		
+
 		@Override
 		public void onContactEnded (btCollisionObject colObj0, boolean match0, btCollisionObject colObj1, boolean match1) {
 			final int userValue0 = colObj0.getUserValue();
@@ -94,16 +94,16 @@ public class ContactCacheTest extends BaseBulletTest {
 			if (match0) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue0));
 				e.setColor(Color.BLUE);
-				Gdx.app.log(Float.toString(time), "Contact ended "+userValue0);
+				Gdx.app.log(Float.toString(time), "Contact ended " + userValue0);
 			}
 			if (match1) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue1));
 				e.setColor(Color.BLUE);
-				Gdx.app.log(Float.toString(time), "Contact ended "+userValue1);
+				Gdx.app.log(Float.toString(time), "Contact ended " + userValue1);
 			}
 		}
 	}
-	
+
 	final int SPHERECOUNT_X = 4;
 	final int SPHERECOUNT_Y = 1;
 	final int SPHERECOUNT_Z = 4;
@@ -111,49 +111,53 @@ public class ContactCacheTest extends BaseBulletTest {
 	final float SPHEREOFFSET_X = -2f;
 	final float SPHEREOFFSET_Y = 10f;
 	final float SPHEREOFFSET_Z = -2f;
-	
+
 	final boolean USE_CONTACT_CACHE = true;
-	
+
 	TestContactListener contactListener;
 	TestContactCache contactCache;
 	public static float time;
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
-		final Model sphereModel = modelBuilder.createSphere(1f, 1f, 1f, 8, 8, 
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), 
-			Usage.Position | Usage.Normal); 
+
+		final Model sphereModel = modelBuilder.createSphere(1f, 1f, 1f, 8, 8,
+			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), Usage.Position
+				| Usage.Normal);
 		disposables.add(sphereModel);
 		final BulletConstructor sphereConstructor = new BulletConstructor(sphereModel, 0.5f, new btSphereShape(0.5f));
 		sphereConstructor.bodyInfo.setRestitution(1f);
 		world.addConstructor("sphere", sphereConstructor);
-		
+
 		final Model sceneModel = objLoader.loadModel(Gdx.files.internal("data/scene.obj"));
 		disposables.add(sceneModel);
-		final BulletConstructor sceneConstructor = new BulletConstructor(sceneModel, 0f, new btBvhTriangleMeshShape(sceneModel.meshParts));
+		final BulletConstructor sceneConstructor = new BulletConstructor(sceneModel, 0f, new btBvhTriangleMeshShape(
+			sceneModel.meshParts));
 		sceneConstructor.bodyInfo.setRestitution(0.25f);
 		world.addConstructor("scene", sceneConstructor);
-		
+
 		final BulletEntity scene = world.add("scene", (new Matrix4()).setToTranslation(0f, 2f, 0f).rotate(Vector3.Y, -90));
-		scene.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+		scene.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
 		scene.body.setContactCallbackFlag(2);
 
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		for (int x = 0; x < SPHERECOUNT_X; x++) {
 			for (int y = 0; y < SPHERECOUNT_Y; y++) {
 				for (int z = 0; z < SPHERECOUNT_Z; z++) {
-					final BulletEntity e = (BulletEntity)world.add("sphere", SPHEREOFFSET_X + x * 3f, SPHEREOFFSET_Y + y * 3f, SPHEREOFFSET_Z + z * 3f);
-					e.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+					final BulletEntity e = (BulletEntity)world.add("sphere", SPHEREOFFSET_X + x * 3f, SPHEREOFFSET_Y + y * 3f,
+						SPHEREOFFSET_Z + z * 3f);
+					e.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+						0.5f + 0.5f * (float)Math.random(), 1f);
 
 					e.body.setContactCallbackFilter(2);
 				}
 			}
 		}
-		
+
 		if (USE_CONTACT_CACHE) {
 			contactCache = new TestContactCache();
 			contactCache.entities = world.entities;
@@ -164,14 +168,13 @@ public class ContactCacheTest extends BaseBulletTest {
 		}
 		time = 0;
 	}
-	
+
 	@Override
 	public void update () {
 		float delta = Gdx.graphics.getRawDeltaTime();
 		time += delta;
 		super.update();
-		if (contactCache != null)
-			contactCache.update(delta);
+		if (contactCache != null) contactCache.update(delta);
 	}
 
 	@Override
@@ -179,14 +182,13 @@ public class ContactCacheTest extends BaseBulletTest {
 		shoot(x, y);
 		return true;
 	}
-	
+
 	@Override
 	public void dispose () {
 		// Deleting the active contact listener, also disables that particular type of contact listener.
-		if (contactListener != null)
-			contactListener.dispose();
+		if (contactListener != null) contactListener.dispose();
 		contactListener = null;
-		
+
 		super.dispose();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java
index 4707b66..fb4b069 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java
@@ -24,11 +24,12 @@ import com.badlogic.gdx.utils.Array;
 /** @author Xoppa */
 public class ContactCallbackTest extends BaseBulletTest {
 	// ContactProcessedListenerXXX is called AFTER the contact is processed.
-	// Use ContactAddedListenerXXX to get a callback BEFORE the contact processed, 
-	// which allows you to alter the objects/manifold before it's processed. 
+	// Use ContactAddedListenerXXX to get a callback BEFORE the contact processed,
+	// which allows you to alter the objects/manifold before it's processed.
 	public static class TestContactProcessedListener extends ContactListener {
 		public Array<BulletEntity> entities;
 		int c = 0;
+
 		@Override
 		public void onContactProcessed (int userValue0, boolean match0, int userValue1, boolean match1) {
 			if (match0) {
@@ -36,18 +37,18 @@ public class ContactCallbackTest extends BaseBulletTest {
 				// Disable future callbacks for this entity
 				e.body.setContactCallbackFilter(0);
 				e.setColor(Color.RED);
-				Gdx.app.log("ContactCallbackTest", "Contact processed "+(++c));
+				Gdx.app.log("ContactCallbackTest", "Contact processed " + (++c));
 			}
 			if (match1) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue1));
 				// Disable future callbacks for this entity
 				e.body.setContactCallbackFilter(0);
 				e.setColor(Color.RED);
-				Gdx.app.log("ContactCallbackTest", "Contact processed "+(++c));
+				Gdx.app.log("ContactCallbackTest", "Contact processed " + (++c));
 			}
 		}
 	}
-	
+
 	final int BOXCOUNT_X = 5;
 	final int BOXCOUNT_Y = 1;
 	final int BOXCOUNT_Z = 5;
@@ -55,46 +56,47 @@ public class ContactCallbackTest extends BaseBulletTest {
 	final float BOXOFFSET_X = -5f;
 	final float BOXOFFSET_Y = 0.5f;
 	final float BOXOFFSET_Z = -5f;
-	
+
 	TestContactProcessedListener contactProcessedListener;
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
+
 		// Create the entities
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
-					final BulletEntity e = (BulletEntity)world.add("box", BOXOFFSET_X + x * 2f, BOXOFFSET_Y + y * 2f, BOXOFFSET_Z + z * 2f);
-					e.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+					final BulletEntity e = (BulletEntity)world.add("box", BOXOFFSET_X + x * 2f, BOXOFFSET_Y + y * 2f, BOXOFFSET_Z + z
+						* 2f);
+					e.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+						0.5f + 0.5f * (float)Math.random(), 1f);
 
 					e.body.setContactCallbackFlag(2);
 					e.body.setContactCallbackFilter(2);
 				}
 			}
 		}
-		
+
 		// Creating a contact listener, also enables that particular type of contact listener and sets it active.
 		contactProcessedListener = new TestContactProcessedListener();
 		contactProcessedListener.entities = world.entities;
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-	
+
 	@Override
 	public void dispose () {
 		// Deleting the active contact listener, also disables that particular type of contact listener.
-		if (contactProcessedListener != null)
-			contactProcessedListener.dispose();
+		if (contactProcessedListener != null) contactProcessedListener.dispose();
 		contactProcessedListener = null;
 		super.dispose();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest2.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest2.java
index 187f460..528223a 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest2.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest2.java
@@ -30,12 +30,12 @@ public class ContactCallbackTest2 extends BaseBulletTest {
 			if (match0) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue0));
 				e.setColor(Color.RED);
-				Gdx.app.log("ContactCallbackTest", "Contact started "+userValue0);
+				Gdx.app.log("ContactCallbackTest", "Contact started " + userValue0);
 			}
 			if (match1) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue1));
 				e.setColor(Color.RED);
-				Gdx.app.log("ContactCallbackTest", "Contact started "+userValue1);
+				Gdx.app.log("ContactCallbackTest", "Contact started " + userValue1);
 			}
 		}
 
@@ -44,16 +44,16 @@ public class ContactCallbackTest2 extends BaseBulletTest {
 			if (match0) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue0));
 				e.setColor(Color.BLUE);
-				Gdx.app.log("ContactCallbackTest", "Contact ended "+userValue0);
+				Gdx.app.log("ContactCallbackTest", "Contact ended " + userValue0);
 			}
 			if (match1) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue1));
 				e.setColor(Color.BLUE);
-				Gdx.app.log("ContactCallbackTest", "Contact ended "+userValue1);
+				Gdx.app.log("ContactCallbackTest", "Contact ended " + userValue1);
 			}
 		}
 	}
-	
+
 	final int BOXCOUNT_X = 5;
 	final int BOXCOUNT_Y = 1;
 	final int BOXCOUNT_Z = 5;
@@ -61,47 +61,48 @@ public class ContactCallbackTest2 extends BaseBulletTest {
 	final float BOXOFFSET_X = -5f;
 	final float BOXOFFSET_Y = 0.5f;
 	final float BOXOFFSET_Z = -5f;
-	
+
 	TestContactListener contactListener;
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
+
 		// Create the entities
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
-					final BulletEntity e = (BulletEntity)world.add("box", BOXOFFSET_X + x * 2f, BOXOFFSET_Y + y * 2f, BOXOFFSET_Z + z * 2f);
-					e.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+					final BulletEntity e = (BulletEntity)world.add("box", BOXOFFSET_X + x * 2f, BOXOFFSET_Y + y * 2f, BOXOFFSET_Z + z
+						* 2f);
+					e.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(),
+						0.5f + 0.5f * (float)Math.random(), 1f);
 
 					e.body.setContactCallbackFlag(2);
 					e.body.setContactCallbackFilter(2);
 				}
 			}
 		}
-		
+
 		// Creating a contact listener, also enables that particular type of contact listener and sets it active.
 		contactListener = new TestContactListener();
 		contactListener.entities = world.entities;
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-	
+
 	@Override
 	public void dispose () {
 		// Deleting the active contact listener, also disables that particular type of contact listener.
-		if (contactListener != null)
-			contactListener.dispose();
+		if (contactListener != null) contactListener.dispose();
 		contactListener = null;
-		
+
 		super.dispose();
 	}
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
index 35e805d..379a3b3 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
@@ -38,25 +38,24 @@ public class ConvexHullTest extends BaseBulletTest {
 		world.addConstructor("car", new BulletConstructor(carModel, 5f, createConvexHullShape(carModel, true)));
 
 		// Create the entities
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		for (float y = 10f; y < 50f; y += 5f)
-			world.add("car", -2f+(float)Math.random()*4f, y, -2f+(float)Math.random()*4f)
-				.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			world.add("car", -2f + (float)Math.random() * 4f, y, -2f + (float)Math.random() * 4f).setColor(
+				0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-	
-	public static btConvexHullShape createConvexHullShape(final Model model, boolean optimize) {
+
+	public static btConvexHullShape createConvexHullShape (final Model model, boolean optimize) {
 		final Mesh mesh = model.meshes.get(0);
 		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(), mesh.getNumVertices(), mesh.getVertexSize());
-		if (!optimize)
-			return shape;
+		if (!optimize) return shape;
 		// now optimize the shape
 		final btShapeHull hull = new btShapeHull(shape);
 		hull.buildHull(shape.getMargin());
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/DebugDrawer.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/DebugDrawer.java
index 34da17e..82237ca 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/DebugDrawer.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/DebugDrawer.java
@@ -42,11 +42,11 @@ public class DebugDrawer extends btIDebugDraw {
 	@Override
 	public void reportErrorWarning (String warningString) {
 	}
-	
+
 	@Override
 	public void draw3dText (btVector3 location, String textString) {
 	}
-	
+
 	@Override
 	public void setDebugMode (int debugMode) {
 		this.debugMode = debugMode;
@@ -56,12 +56,12 @@ public class DebugDrawer extends btIDebugDraw {
 	public int getDebugMode () {
 		return debugMode;
 	}
-	
-	public void begin() {
+
+	public void begin () {
 		lineRenderer.begin(ShapeType.Line);
 	}
-	
-	public void end() {
+
+	public void end () {
 		lineRenderer.end();
 	}
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
index 0ec7451..da68083 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
@@ -46,32 +47,32 @@ public class FrustumCullingTest extends BaseBulletTest {
 	final static int CULL_FRUSTUM = 1;
 	/** Transform the render cam with the frustum */
 	final static int FRUSTUM_CAM = 2;
-	
+
 	final static boolean USE_BULLET_FRUSTUM_CULLING = true;
-	
+
 	int state = 0; // 0 = No culling, look from above
-	
+
 	final static int BOXCOUNT = 200;
-	
+
 	final static float BOX_X_MIN = -25;
 	final static float BOX_Y_MIN = -25;
 	final static float BOX_Z_MIN = -25;
-	
+
 	final static float BOX_X_MAX = 25;
 	final static float BOX_Y_MAX = 25;
 	final static float BOX_Z_MAX = 25;
-	
-	final static float SPEED_X = 360f/7f;
-	final static float SPEED_Y = 360f/19f;
-	final static float SPEED_Z = 360f/13f;
-	
+
+	final static float SPEED_X = 360f / 7f;
+	final static float SPEED_Y = 360f / 19f;
+	final static float SPEED_Z = 360f / 13f;
+
 	final static Vector3 tmpV = new Vector3();
 	final static Matrix4 tmpM = new Matrix4();
-	
+
 	final static int ptrs[] = new int[512];
-	final static Array<btCollisionObject> visibleObjects = new Array<btCollisionObject>(); 
-	
-	public static btPairCachingGhostObject createFrustumObject(final Vector3... points) {
+	final static Array<btCollisionObject> visibleObjects = new Array<btCollisionObject>();
+
+	public static btPairCachingGhostObject createFrustumObject (final Vector3... points) {
 		final btPairCachingGhostObject result = new TestPairCachingGhostObject();
 		final boolean USE_COMPOUND = true;
 		// Using a compound shape is not necessary, but it's good practice to create shapes around the center.
@@ -94,8 +95,9 @@ public class FrustumCullingTest extends BaseBulletTest {
 		result.setCollisionFlags(btCollisionObject.CollisionFlags.CF_NO_CONTACT_RESPONSE);
 		return result;
 	}
-	
-	public static Array<BulletEntity> getEntitiesCollidingWithObject(final BulletWorld world, final btCollisionObject object, final Array<BulletEntity> out, final btPersistentManifoldArray tmpArr) {
+
+	public static Array<BulletEntity> getEntitiesCollidingWithObject (final BulletWorld world, final btCollisionObject object,
+		final Array<BulletEntity> out, final btPersistentManifoldArray tmpArr) {
 		// Fetch the array of contacts
 		btBroadphasePairArray arr = world.broadphase.getOverlappingPairCache().getOverlappingPairArray();
 		// Get the user values (which are indices in the entities array) of all objects colliding with the object
@@ -106,16 +108,18 @@ public class FrustumCullingTest extends BaseBulletTest {
 			out.add(world.entities.get(ptrs[i]));
 		return out;
 	}
-	
-	public static Model createFrustumModel(final Vector3... p) {
-		return ModelBuilder.createFromMesh(new float[] {
-				p[0].x, p[0].y, p[0].z, 0, 0, 1, p[1].x, p[1].y, p[1].z, 0, 0, 1, p[2].x, p[2].y, p[2].z, 0, 0, 1, p[3].x, p[3].y, p[3].z, 0, 0, 1, // near
-				p[4].x, p[4].y, p[4].z, 0, 0, -1, p[5].x, p[5].y, p[5].z, 0, 0, -1, p[6].x, p[6].y, p[6].z, 0, 0, -1, p[7].x, p[7].y, p[7].z, 0, 0, -1},// far
-				new VertexAttribute[] { new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.Normal, 3, "a_normal")},
-				new short[] {0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7},
-				GL20.GL_LINES, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)));
+
+	public static Model createFrustumModel (final Vector3... p) {
+		return ModelBuilder.createFromMesh(new float[] {p[0].x, p[0].y, p[0].z, 0, 0, 1, p[1].x, p[1].y, p[1].z, 0, 0, 1, p[2].x,
+			p[2].y, p[2].z, 0, 0, 1, p[3].x, p[3].y, p[3].z, 0, 0,
+			1, // near
+			p[4].x, p[4].y, p[4].z, 0, 0, -1, p[5].x, p[5].y, p[5].z, 0, 0, -1, p[6].x, p[6].y, p[6].z, 0, 0, -1, p[7].x, p[7].y,
+			p[7].z, 0, 0, -1},// far
+			new VertexAttribute[] {new VertexAttribute(Usage.Position, 3, "a_position"),
+				new VertexAttribute(Usage.Normal, 3, "a_normal")}, new short[] {0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4,
+				1, 5, 2, 6, 3, 7}, GL20.GL_LINES, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)));
 	}
-	
+
 	private float angleX, angleY, angleZ;
 	private btPairCachingGhostObject frustumObject;
 	private BulletEntity frustumEntity;
@@ -127,41 +131,38 @@ public class FrustumCullingTest extends BaseBulletTest {
 	@Override
 	public void create () {
 		super.create();
-		
+
 		instructions = "Tap to toggle view\nLong press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
-		
+
 		tempManifoldArr = new btPersistentManifoldArray();
 
 		world.addConstructor("collisionBox", new BulletConstructor(world.getConstructor("box").model));
-		
+
 		// Create the entities
 		final float dX = BOX_X_MAX - BOX_X_MIN;
 		final float dY = BOX_Y_MAX - BOX_Y_MIN;
 		final float dZ = BOX_Z_MAX - BOX_Z_MIN;
 		for (int i = 0; i < BOXCOUNT; i++)
-			world.add("collisionBox", 
-					BOX_X_MIN + dX * (float)Math.random(), 
-					BOX_Y_MIN + dY * (float)Math.random(), 
-					BOX_Z_MIN + dZ * (float)Math.random()
-				).setColor(Color.GRAY);
-		
+			world.add("collisionBox", BOX_X_MIN + dX * (float)Math.random(), BOX_Y_MIN + dY * (float)Math.random(),
+				BOX_Z_MIN + dZ * (float)Math.random()).setColor(Color.GRAY);
+
 		frustumCam = new PerspectiveCamera(camera.fieldOfView, camera.viewportWidth, camera.viewportHeight);
 		frustumCam.far = Vector3.len(BOX_X_MAX, BOX_Y_MAX, BOX_Z_MAX);
 		frustumCam.update();
-		
+
 		overviewCam = camera;
 		overviewCam.position.set(BOX_X_MAX, BOX_Y_MAX, BOX_Z_MAX);
 		overviewCam.lookAt(Vector3.Zero);
 		overviewCam.far = 150f;
 		overviewCam.update();
-		
+
 		final Model frustumModel = createFrustumModel(frustumCam.frustum.planePoints);
 		disposables.add(frustumModel);
 		frustumObject = createFrustumObject(frustumCam.frustum.planePoints);
 		world.add(frustumEntity = new BulletEntity(frustumModel, frustumObject, 0, 0, 0));
 		frustumEntity.setColor(Color.BLUE);
 	}
-	
+
 	@Override
 	public BulletWorld createWorld () {
 		// No need to use dynamics for this test
@@ -177,14 +178,12 @@ public class FrustumCullingTest extends BaseBulletTest {
 		super.update();
 		// Not using dynamics, so update the collision world manually
 		if (USE_BULLET_FRUSTUM_CULLING) {
-			if (world.performanceCounter != null)
-				world.performanceCounter.start();
+			if (world.performanceCounter != null) world.performanceCounter.start();
 			world.collisionWorld.performDiscreteCollisionDetection();
-			if (world.performanceCounter != null)
-				world.performanceCounter.stop();
+			if (world.performanceCounter != null) world.performanceCounter.stop();
 		}
 	}
-	
+
 	@Override
 	public void render () {
 		final float dt = Gdx.graphics.getDeltaTime();
@@ -198,66 +197,61 @@ public class FrustumCullingTest extends BaseBulletTest {
 		// Transform the frustum cam
 		frustumCam.direction.set(0, 0, -1);
 		frustumCam.up.set(0, 1, 0);
-		frustumCam.position.set(0,0,0);
+		frustumCam.position.set(0, 0, 0);
 		frustumCam.rotate(frustumEntity.transform);
 		frustumCam.update();
 
 		super.render();
-		
+
 		performance.append(" visible: ").append(visibleEntities.size);
 	}
-	
+
 	@Override
 	protected void renderWorld () {
-		if (world.performanceCounter != null)
-			world.performanceCounter.start();
+		if (world.performanceCounter != null) world.performanceCounter.start();
 		if (USE_BULLET_FRUSTUM_CULLING)
 			getEntitiesCollidingWithObject(world, frustumObject, visibleEntities, tempManifoldArr);
 		else {
 			visibleEntities.clear();
 			for (int i = 0; i < world.entities.size; i++) {
 				final BulletEntity e = world.entities.get(i);
-				if (e == frustumEntity)
-					continue;
+				if (e == frustumEntity) continue;
 				e.modelInstance.transform.getTranslation(tmpV);
-				if (frustumCam.frustum.sphereInFrustum(tmpV, 1))
-					visibleEntities.add(e);
+				if (frustumCam.frustum.sphereInFrustum(tmpV, 1)) visibleEntities.add(e);
 			}
 		}
-		if (world.performanceCounter != null)
-			world.performanceCounter.stop();
-		
+		if (world.performanceCounter != null) world.performanceCounter.stop();
+
 		for (int i = 0; i < visibleEntities.size; i++)
 			visibleEntities.get(i).setColor(Color.RED);
 
 		modelBatch.begin(camera);
 		if ((state & CULL_FRUSTUM) == CULL_FRUSTUM) {
-			world.render(modelBatch, environment, visibleEntities);
-			world.render(modelBatch, environment, frustumEntity);
+			world.render(modelBatch, lights, visibleEntities);
+			world.render(modelBatch, lights, frustumEntity);
 		} else
-			world.render(modelBatch, environment);
+			world.render(modelBatch, lights);
 		modelBatch.end();
-		
+
 		for (int i = 0; i < visibleEntities.size; i++)
 			visibleEntities.get(i).setColor(Color.GRAY);
 	}
-	
+
 	@Override
 	protected void beginRender (boolean lighting) {
 		super.beginRender(false);
 	}
-	
+
 	@Override
 	public void dispose () {
 		frustumObject = null;
-		
+
 		super.dispose();
-		
-		if (tempManifoldArr != null)
-			tempManifoldArr.dispose();
+
+		if (tempManifoldArr != null) tempManifoldArr.dispose();
 		tempManifoldArr = null;
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		state = (state + 1) % 3;
@@ -267,21 +261,22 @@ public class FrustumCullingTest extends BaseBulletTest {
 			camera = overviewCam;
 		return true;
 	}
-	
+
 	// Simple helper class to keep a reference to the collision shape
 	public static class TestPairCachingGhostObject extends btPairCachingGhostObject {
-		public btCollisionShape shape; 
+		public btCollisionShape shape;
+
 		@Override
 		public void setCollisionShape (btCollisionShape collisionShape) {
 			shape = collisionShape;
 			super.setCollisionShape(collisionShape);
 		}
+
 		@Override
 		public void dispose () {
 			super.dispose();
-			if (shape != null)
-				shape.dispose();
+			if (shape != null) shape.dispose();
 			shape = null;
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ImportTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ImportTest.java
index 890368a..ad174cc 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ImportTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ImportTest.java
@@ -39,53 +39,54 @@ import com.badlogic.gdx.utils.JsonReader;
 public class ImportTest extends BaseBulletTest {
 	btBulletWorldImporter importer;
 	Model model;
-	
+
 	public class MyImporter extends btBulletWorldImporter {
 		public MyImporter (btDynamicsWorld world) {
 			super(world);
 		}
+
 		@Override
-		public btRigidBody createRigidBody (boolean isDynamic, float mass, Matrix4 startTransform, btCollisionShape shape, String bodyName) {
+		public btRigidBody createRigidBody (boolean isDynamic, float mass, Matrix4 startTransform, btCollisionShape shape,
+			String bodyName) {
 			Vector3 localInertia = new Vector3();
-			if (mass > 0f)
-				shape.calculateLocalInertia(mass, localInertia);
+			if (mass > 0f) shape.calculateLocalInertia(mass, localInertia);
 
 			btRigidBody result = new btRigidBody(mass, null, shape, localInertia);
-			
-			String nodeName = bodyName.split("_", 2)[0]+"_model";
+
+			String nodeName = bodyName.split("_", 2)[0] + "_model";
 			ModelInstance instance = new ModelInstance(model, nodeName, true, true);
 			instance.transform.set(startTransform);
-			
+
 			BulletEntity entity = new BulletEntity(instance, result);
 			ImportTest.this.world.add(entity);
-			
+
 			return result;
 		}
 	}
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
+
 		ModelLoader g3djLoader = new G3dModelLoader(new JsonReader());
 		model = g3djLoader.loadModel(Gdx.files.internal("data/g3d/btscene1.g3dj"));
 		disposables.add(model);
 
 		importer = new MyImporter((btDynamicsWorld)world.collisionWorld);
 		importer.loadFile(Gdx.files.internal("data/g3d/btscene1.bullet"));
-		
-		camera.position.set(10f,15f,20f);
-		camera.up.set(0,1,0);
-		camera.lookAt(-10,8,0);
+
+		camera.position.set(10f, 15f, 20f);
+		camera.up.set(0, 1, 0);
+		camera.lookAt(-10, 8, 0);
 		camera.update();
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-	
+
 	@Override
 	public void dispose () {
 		super.dispose();
@@ -94,4 +95,4 @@ public class ImportTest extends BaseBulletTest {
 		importer.dispose();
 		importer = null;
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
index ba2bbc2..275dbd9 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
@@ -29,7 +29,7 @@ public class InternalTickTest extends BaseBulletTest {
 		public TestInternalTickCallback (btDynamicsWorld dynamicsWorld) {
 			super(dynamicsWorld, true);
 		}
-		
+
 		@Override
 		public void onInternalTick (btDynamicsWorld dynamicsWorld, float timeStep) {
 			btCollisionObjectArray objs = dynamicsWorld.getCollisionObjectArray();
@@ -37,15 +37,14 @@ public class InternalTickTest extends BaseBulletTest {
 			int idx = 0;
 			for (int i = 0; i < objs.size(); i++) {
 				btRigidBody body = (btRigidBody)(objs.at(i));
-				if (body == null || body.isStaticOrKinematicObject())
-					continue;
+				if (body == null || body.isStaticOrKinematicObject()) continue;
 				body.applyGravity();
 				body.applyCentralForce(Vector3.tmp.set(0f, 8.0f + (float)(6.0 * Math.random()), 0f));
 				idx++;
 			}
 		}
 	}
-	
+
 	final int BOXCOUNT_X = 5;
 	final int BOXCOUNT_Y = 5;
 	final int BOXCOUNT_Z = 1;
@@ -53,45 +52,44 @@ public class InternalTickTest extends BaseBulletTest {
 	final float BOXOFFSET_X = -2.5f;
 	final float BOXOFFSET_Y = 0.5f;
 	final float BOXOFFSET_Z = 0f;
-	
+
 	TestInternalTickCallback internalTickCallback;
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
+
 		internalTickCallback = new TestInternalTickCallback((btDynamicsWorld)world.collisionWorld);
 
 		// Create the entities
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
 
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
-					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z).setColor(0.5f + 0.5f * (float)Math.random(),
+						0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				}
 			}
 		}
 	}
-	
+
 	@Override
 	public void dispose () {
 		super.dispose();
-		
-		if (internalTickCallback != null)
-			internalTickCallback.dispose();
+
+		if (internalTickCallback != null) internalTickCallback.dispose();
 		internalTickCallback = null;
 	}
-	
+
 	float toggleTime = 0f;
 	boolean toggleAttach = false;
+
 	@Override
 	public void render () {
 		super.render();
-		if (internalTickCallback == null)
-			return;
+		if (internalTickCallback == null) return;
 		if ((toggleTime += Gdx.graphics.getDeltaTime()) > 1.0f) {
 			toggleTime -= 1.0f;
 			if (toggleAttach)
@@ -101,10 +99,10 @@ public class InternalTickTest extends BaseBulletTest {
 			toggleAttach = !toggleAttach;
 		}
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/KinematicTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/KinematicTest.java
index b8ff5cc..8d1b0ad 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/KinematicTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/KinematicTest.java
@@ -31,34 +31,39 @@ public class KinematicTest extends BaseBulletTest {
 	final static Vector3 position2 = new Vector3(8f, 0.5f, 0f);
 	final static Vector3 position3 = new Vector3(10f, 0.5f, 0f);
 	float angle;
-	
+
 	@Override
 	public void create () {
 		super.create();
 
 		// Create the entities
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		kinematicBox1 = world.add("staticbox", position1.x, position1.y, position1.z);
 		kinematicBox1.setColor(Color.RED);
-		kinematicBox1.body.setCollisionFlags(kinematicBox1.body.getCollisionFlags() | btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);
+		kinematicBox1.body.setCollisionFlags(kinematicBox1.body.getCollisionFlags()
+			| btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);
 		kinematicBox2 = world.add("staticbox", position2.x, position2.y, position2.z);
 		kinematicBox2.setColor(Color.RED);
-		kinematicBox2.body.setCollisionFlags(kinematicBox2.body.getCollisionFlags() | btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);;
+		kinematicBox2.body.setCollisionFlags(kinematicBox2.body.getCollisionFlags()
+			| btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);
+		;
 		kinematicBox3 = world.add("staticbox", position3.x, position3.y, position3.z);
 		kinematicBox3.setColor(Color.RED);
-		kinematicBox3.body.setCollisionFlags(kinematicBox3.body.getCollisionFlags() | btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);;
+		kinematicBox3.body.setCollisionFlags(kinematicBox3.body.getCollisionFlags()
+			| btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);
+		;
 		// This makes bullet call btMotionState#getWorldTransform on every update:
 		kinematicBox3.body.setActivationState(Collision.DISABLE_DEACTIVATION);
 		angle = 360f;
 	}
-	
+
 	@Override
 	public void render () {
 		angle = angle + Gdx.graphics.getDeltaTime() * 360f / 5f;
 		kinematicBox3.transform.idt().rotate(Vector3.Y, 360f - 2f * angle).translate(position3);
-		
+
 		if (angle >= 360f) {
 			angle = 0;
 			kinematicBox = (kinematicBox == kinematicBox1) ? kinematicBox2 : kinematicBox1;
@@ -67,20 +72,20 @@ public class KinematicTest extends BaseBulletTest {
 		kinematicBox.transform.idt().rotate(Vector3.Y, angle).translate(position);
 		// This makes bullet call btMotionState#getWorldTransform once:
 		kinematicBox.body.setActivationState(Collision.ACTIVE_TAG);
-		
+
 		super.render();
 	}
-	
+
 	@Override
 	public void dispose () {
 		kinematicBox = kinematicBox1 = kinematicBox2 = kinematicBox3 = null;
 		position = null;
 		super.dispose();
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java
index 5b1a07f..8ce76cf 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java
@@ -38,38 +38,39 @@ public class MeshShapeTest extends BaseBulletTest {
 	@Override
 	public void create () {
 		super.create();
-		
-		final Model sphereModel = modelBuilder.createSphere(0.5f, 0.5f, 0.5f, 8, 8, 
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), 
-			Usage.Position | Usage.Normal); 
+
+		final Model sphereModel = modelBuilder.createSphere(0.5f, 0.5f, 0.5f, 8, 8,
+			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), Usage.Position
+				| Usage.Normal);
 		disposables.add(sphereModel);
 		final BulletConstructor sphereConstructor = new BulletConstructor(sphereModel, 0.25f, new btSphereShape(0.25f));
 		sphereConstructor.bodyInfo.setRestitution(1f);
 		world.addConstructor("sphere", sphereConstructor);
-		
+
 		final Model sceneModel = objLoader.loadModel(Gdx.files.internal("data/scene.obj"));
 		disposables.add(sceneModel);
-		final BulletConstructor sceneConstructor = new BulletConstructor(sceneModel, 0f, new btBvhTriangleMeshShape(sceneModel.meshParts));
+		final BulletConstructor sceneConstructor = new BulletConstructor(sceneModel, 0f, new btBvhTriangleMeshShape(
+			sceneModel.meshParts));
 		sceneConstructor.bodyInfo.setRestitution(0.25f);
 		world.addConstructor("scene", sceneConstructor);
-		
-		world.add("scene", (new Matrix4()).setToTranslation(0f, 2f, 0f).rotate(Vector3.Y, -90))
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+		world.add("scene", (new Matrix4()).setToTranslation(0f, 2f, 0f).rotate(Vector3.Y, -90)).setColor(
+			0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		for (float x = -3; x < 7; x++) {
 			for (float z = -5; z < 5; z++) {
-				world.add("sphere", x, 10f + (float)Math.random() * 0.1f, z)
-					.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+				world.add("sphere", x, 10f + (float)Math.random() * 0.1f, z).setColor(0.5f + 0.5f * (float)Math.random(),
+					0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 			}
 		}
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
index 2b35eb6..baa6b38 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
@@ -36,40 +36,39 @@ public class RayCastTest extends BaseBulletTest {
 	final float BOXOFFSET_X = 0f;
 	final float BOXOFFSET_Y = 0.5f;
 	final float BOXOFFSET_Z = 2.5f;
-	
+
 	ClosestRayResultCallback rayTestCB;
 	Vector3 rayFrom = new Vector3();
 	Vector3 rayTo = new Vector3();
-	
+
 	@Override
 	public void create () {
 		super.create();
 		instructions = "Tap a box to ray cast\nLong press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
 
 		// Create the entities
-		world.add("ground", -7f, 0f, -7f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+		world.add("ground", -7f, 0f, -7f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
 
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
-					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z).setColor(0.5f + 0.5f * (float)Math.random(),
+						0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				}
 			}
 		}
-		
+
 		rayTestCB = new ClosestRayResultCallback(Vector3.Zero, Vector3.Z);
 	}
-	
+
 	@Override
 	public void dispose () {
-		if (rayTestCB != null)
-			rayTestCB.dispose();
+		if (rayTestCB != null) rayTestCB.dispose();
 		rayTestCB = null;
 		super.dispose();
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		Ray ray = camera.getPickRay(x, y);
@@ -81,9 +80,9 @@ public class RayCastTest extends BaseBulletTest {
 		rayTestCB.setClosestHitFraction(1f);
 		rayTestCB.getRayFromWorld().setValue(rayFrom.x, rayFrom.y, rayFrom.z);
 		rayTestCB.getRayToWorld().setValue(rayTo.x, rayTo.y, rayTo.z);
-		
+
 		world.collisionWorld.rayTest(rayFrom, rayTo, rayTestCB);
-		
+
 		if (rayTestCB.hasHit()) {
 			final btCollisionObject obj = rayTestCB.getCollisionObject();
 			if (!obj.isStaticOrKinematicObject()) {
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
index e93913d..d51f007 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Input.Buttons;
@@ -39,38 +40,43 @@ import com.badlogic.gdx.utils.Array;
 
 /** @author xoppa */
 public class RayPickRagdollTest extends BaseBulletTest {
-	
+
 	final Array<btTypedConstraint> constraints = new Array<btTypedConstraint>();
 	btPoint2PointConstraint pickConstraint = null;
 	btRigidBody pickedBody = null;
 	float pickDistance;
 	Vector3 tmpV = new Vector3();
-	
+
 	@Override
 	public void create () {
 		super.create();
 		instructions = "Tap to shoot\nDrag ragdoll to pick\nLong press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
-		
+
 		camera.position.set(4f, 2f, 4f);
 		camera.lookAt(0f, 1f, 0f);
 		camera.update();
-		
+
 		world.addConstructor("pelvis", new BulletConstructor(createCapsuleModel(0.15f, 0.2f), 1f, new btCapsuleShape(0.15f, 0.2f)));
-		world.addConstructor("spine", new BulletConstructor(createCapsuleModel(0.15f, 0.28f), 1f, new btCapsuleShape(0.15f, 0.28f)));
+		world
+			.addConstructor("spine", new BulletConstructor(createCapsuleModel(0.15f, 0.28f), 1f, new btCapsuleShape(0.15f, 0.28f)));
 		world.addConstructor("head", new BulletConstructor(createCapsuleModel(0.1f, 0.05f), 1f, new btCapsuleShape(0.1f, 0.05f)));
-		world.addConstructor("upperleg", new BulletConstructor(createCapsuleModel(0.07f, 0.45f), 1f, new btCapsuleShape(0.07f, 0.45f)));
-		world.addConstructor("lowerleg", new BulletConstructor(createCapsuleModel(0.05f, 0.37f), 1f, new btCapsuleShape(0.05f, 0.37f)));
-		world.addConstructor("upperarm", new BulletConstructor(createCapsuleModel(0.05f, 0.33f), 1f, new btCapsuleShape(0.05f, 0.33f)));
-		world.addConstructor("lowerarm", new BulletConstructor(createCapsuleModel(0.04f, 0.25f), 1f, new btCapsuleShape(0.04f, 0.25f)));
-		
-		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+		world.addConstructor("upperleg", new BulletConstructor(createCapsuleModel(0.07f, 0.45f), 1f, new btCapsuleShape(0.07f,
+			0.45f)));
+		world.addConstructor("lowerleg", new BulletConstructor(createCapsuleModel(0.05f, 0.37f), 1f, new btCapsuleShape(0.05f,
+			0.37f)));
+		world.addConstructor("upperarm", new BulletConstructor(createCapsuleModel(0.05f, 0.33f), 1f, new btCapsuleShape(0.05f,
+			0.33f)));
+		world.addConstructor("lowerarm", new BulletConstructor(createCapsuleModel(0.04f, 0.25f), 1f, new btCapsuleShape(0.04f,
+			0.25f)));
+
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		addRagdoll(0, 3f, 0);
 		addRagdoll(1f, 6f, 0);
 		addRagdoll(-1f, 12f, 0);
 	}
-	
+
 	@Override
 	public void dispose () {
 		for (int i = 0; i < constraints.size; i++) {
@@ -79,8 +85,8 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		}
 		constraints.clear();
 		super.dispose();
-	}	
-	
+	}
+
 	@Override
 	public boolean touchDown (int screenX, int screenY, int pointer, int button) {
 		boolean result = false;
@@ -94,18 +100,18 @@ public class RayPickRagdollTest extends BaseBulletTest {
 				if (body != null && !body.isStaticObject() && !body.isKinematicObject()) {
 					pickedBody = body;
 					body.setActivationState(Collision.DISABLE_DEACTIVATION);
-					
+
 					tmpV.set(cb.getHitPointWorld().getFloats());
 					tmpV.mul(body.getCenterOfMassTransform().inv());
-					
-					pickConstraint = new btPoint2PointConstraint(body,tmpV);
+
+					pickConstraint = new btPoint2PointConstraint(body, tmpV);
 					btConstraintSetting setting = pickConstraint.getSetting();
 					setting.setImpulseClamp(30f);
 					setting.setTau(0.001f);
 					pickConstraint.setSetting(setting);
-					
+
 					((btDynamicsWorld)world.collisionWorld).addConstraint(pickConstraint);
-		
+
 					pickDistance = Vector3.tmp.sub(camera.position).len();
 					result = true;
 				}
@@ -114,7 +120,7 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		}
 		return result ? result : super.touchDown(screenX, screenY, pointer, button);
 	}
-	
+
 	@Override
 	public boolean touchUp (int screenX, int screenY, int pointer, int button) {
 		boolean result = false;
@@ -133,7 +139,7 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		}
 		return result ? result : super.touchUp(screenX, screenY, pointer, button);
 	}
-	
+
 	@Override
 	public boolean touchDragged (int screenX, int screenY, int pointer) {
 		boolean result = false;
@@ -145,98 +151,103 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		}
 		return result ? result : super.touchDragged(screenX, screenY, pointer);
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-	
+
 	final static float PI = MathUtils.PI;
 	final static float PI2 = 0.5f * PI;
 	final static float PI4 = 0.25f * PI;
-	public void addRagdoll(final float x, final float y, final float z) {
+
+	public void addRagdoll (final float x, final float y, final float z) {
 		final Matrix4 tmpM = new Matrix4();
-		btRigidBody pelvis = (btRigidBody)world.add("pelvis", x, y+1, z).body;
-		btRigidBody spine = (btRigidBody)world.add("spine", x, y+1.2f, z).body;
-		btRigidBody head = (btRigidBody)world.add("head", x, y+1.6f, z).body;
-		btRigidBody leftupperleg = (btRigidBody)world.add("upperleg", x-0.18f, y+0.65f, z).body;
-		btRigidBody leftlowerleg = (btRigidBody)world.add("lowerleg", x-0.18f, y+0.2f, z).body;
-		btRigidBody rightupperleg = (btRigidBody)world.add("upperleg", x+0.18f, y+0.65f, z).body;
-		btRigidBody rightlowerleg = (btRigidBody)world.add("lowerleg", x+0.18f, y+0.2f, z).body;		
-		btRigidBody leftupperarm = (btRigidBody)world.add("upperarm", tmpM.setFromEulerAngles(PI2, 0, 0).trn(x-0.35f, y+1.45f, z)).body;
-		btRigidBody leftlowerarm = (btRigidBody)world.add("lowerarm", tmpM.setFromEulerAngles(PI2, 0, 0).trn(x-0.7f, y+1.45f, z)).body;
-		btRigidBody rightupperarm = (btRigidBody)world.add("upperarm", tmpM.setFromEulerAngles(-PI2, 0, 0).trn(x+0.35f, y+1.45f, z)).body;
-		btRigidBody rightlowerarm = (btRigidBody)world.add("lowerarm", tmpM.setFromEulerAngles(-PI2, 0, 0).trn(x+0.7f, y+1.45f, z)).body;
+		btRigidBody pelvis = (btRigidBody)world.add("pelvis", x, y + 1, z).body;
+		btRigidBody spine = (btRigidBody)world.add("spine", x, y + 1.2f, z).body;
+		btRigidBody head = (btRigidBody)world.add("head", x, y + 1.6f, z).body;
+		btRigidBody leftupperleg = (btRigidBody)world.add("upperleg", x - 0.18f, y + 0.65f, z).body;
+		btRigidBody leftlowerleg = (btRigidBody)world.add("lowerleg", x - 0.18f, y + 0.2f, z).body;
+		btRigidBody rightupperleg = (btRigidBody)world.add("upperleg", x + 0.18f, y + 0.65f, z).body;
+		btRigidBody rightlowerleg = (btRigidBody)world.add("lowerleg", x + 0.18f, y + 0.2f, z).body;
+		btRigidBody leftupperarm = (btRigidBody)world.add("upperarm",
+			tmpM.setFromEulerAngles(PI2, 0, 0).trn(x - 0.35f, y + 1.45f, z)).body;
+		btRigidBody leftlowerarm = (btRigidBody)world.add("lowerarm", tmpM.setFromEulerAngles(PI2, 0, 0)
+			.trn(x - 0.7f, y + 1.45f, z)).body;
+		btRigidBody rightupperarm = (btRigidBody)world.add("upperarm",
+			tmpM.setFromEulerAngles(-PI2, 0, 0).trn(x + 0.35f, y + 1.45f, z)).body;
+		btRigidBody rightlowerarm = (btRigidBody)world.add("lowerarm",
+			tmpM.setFromEulerAngles(-PI2, 0, 0).trn(x + 0.7f, y + 1.45f, z)).body;
 
 		final Matrix4 localA = new Matrix4();
 		final Matrix4 localB = new Matrix4();
 		btHingeConstraint hingeC = null;
 		btConeTwistConstraint coneC = null;
-		
+
 		// PelvisSpine
 		localA.setFromEulerAngles(0, PI2, 0).trn(0, 0.15f, 0);
 		localB.setFromEulerAngles(0, PI2, 0).trn(0, -0.15f, 0);
 		constraints.add(hingeC = new btHingeConstraint(pelvis, spine, localA, localB));
 		hingeC.setLimit(-PI4, PI2);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(hingeC, true);
-		
+
 		// SpineHead
 		localA.setFromEulerAngles(PI2, 0, 0).trn(0, 0.3f, 0);
 		localB.setFromEulerAngles(PI2, 0, 0).trn(0, -0.14f, 0);
 		constraints.add(coneC = new btConeTwistConstraint(spine, head, localA, localB));
 		coneC.setLimit(PI4, PI4, PI2);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(coneC, true);
-		
+
 		// LeftHip
-		localA.setFromEulerAngles(-PI4*5f, 0, 0).trn(-0.18f, -0.1f, 0);
-		localB.setFromEulerAngles(-PI4*5f, 0, 0).trn(0, 0.225f, 0);
+		localA.setFromEulerAngles(-PI4 * 5f, 0, 0).trn(-0.18f, -0.1f, 0);
+		localB.setFromEulerAngles(-PI4 * 5f, 0, 0).trn(0, 0.225f, 0);
 		constraints.add(coneC = new btConeTwistConstraint(pelvis, leftupperleg, localA, localB));
 		coneC.setLimit(PI4, PI4, 0);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(coneC, true);
-		
+
 		// LeftKnee
 		localA.setFromEulerAngles(0, PI2, 0).trn(0, -0.225f, 0);
 		localB.setFromEulerAngles(0, PI2, 0).trn(0, 0.185f, 0);
 		constraints.add(hingeC = new btHingeConstraint(leftupperleg, leftlowerleg, localA, localB));
 		hingeC.setLimit(0, PI2);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(hingeC, true);
-		
+
 		// RightHip
-		localA.setFromEulerAngles(-PI4*5f, 0, 0).trn(0.18f, -0.1f, 0);
-		localB.setFromEulerAngles(-PI4*5f, 0, 0).trn(0, 0.225f, 0);
+		localA.setFromEulerAngles(-PI4 * 5f, 0, 0).trn(0.18f, -0.1f, 0);
+		localB.setFromEulerAngles(-PI4 * 5f, 0, 0).trn(0, 0.225f, 0);
 		constraints.add(coneC = new btConeTwistConstraint(pelvis, rightupperleg, localA, localB));
 		coneC.setLimit(PI4, PI4, 0);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(coneC, true);
-		
+
 		// RightKnee
 		localA.setFromEulerAngles(0, PI2, 0).trn(0, -0.225f, 0);
 		localB.setFromEulerAngles(0, PI2, 0).trn(0, 0.185f, 0);
 		constraints.add(hingeC = new btHingeConstraint(rightupperleg, rightlowerleg, localA, localB));
 		hingeC.setLimit(0, PI2);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(hingeC, true);
-		
+
 		// LeftShoulder
 		localA.setFromEulerAngles(PI, 0, 0).trn(-0.2f, 0.15f, 0);
 		localB.setFromEulerAngles(PI2, 0, 0).trn(0, -0.18f, 0);
 		constraints.add(coneC = new btConeTwistConstraint(pelvis, leftupperarm, localA, localB));
 		coneC.setLimit(PI2, PI2, 0);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(coneC, true);
-		
+
 		// LeftElbow
 		localA.setFromEulerAngles(0, PI2, 0).trn(0, 0.18f, 0);
 		localB.setFromEulerAngles(0, PI2, 0).trn(0, -0.14f, 0);
 		constraints.add(hingeC = new btHingeConstraint(leftupperarm, leftlowerarm, localA, localB));
 		hingeC.setLimit(0, PI2);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(hingeC, true);
-		
+
 		// RightShoulder
 		localA.setFromEulerAngles(PI, 0, 0).trn(0.2f, 0.15f, 0);
 		localB.setFromEulerAngles(PI2, 0, 0).trn(0, -0.18f, 0);
 		constraints.add(coneC = new btConeTwistConstraint(pelvis, rightupperarm, localA, localB));
 		coneC.setLimit(PI2, PI2, 0);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(coneC, true);
-		
+
 		// RightElbow
 		localA.setFromEulerAngles(0, PI2, 0).trn(0, 0.18f, 0);
 		localB.setFromEulerAngles(0, PI2, 0).trn(0, -0.14f, 0);
@@ -244,11 +255,11 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		hingeC.setLimit(0, PI2);
 		((btDynamicsWorld)world.collisionWorld).addConstraint(hingeC, true);
 	}
-	
-	protected Model createCapsuleModel(float radius, float height) {
-		final Model result = modelBuilder.createCapsule(radius, height + radius * 2f, 16, 
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), 
-			Usage.Position | Usage.Normal);
+
+	protected Model createCapsuleModel (float radius, float height) {
+		final Model result = modelBuilder.createCapsule(radius, height + radius * 2f, 16,
+			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), Usage.Position
+				| Usage.Normal);
 		disposables.add(result);
 		return result;
 	}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java
index fa9f052..7035e19 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java
@@ -39,33 +39,33 @@ public class ShootTest extends BaseBulletTest {
 	final float BOXOFFSET_X = -2.5f;
 	final float BOXOFFSET_Y = 0.5f;
 	final float BOXOFFSET_Z = 0f;
-	
+
 	BulletEntity ground;
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
+
 		// Create the entities
-		(ground = world.add("ground", 0f, 0f, 0f))
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+		(ground = world.add("ground", 0f, 0f, 0f)).setColor(0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
-					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z).setColor(0.5f + 0.5f * (float)Math.random(),
+						0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				}
 			}
 		}
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-	
+
 	@Override
 	public void dispose () {
 		super.dispose();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
index 60a1004..5c42479 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
@@ -53,30 +53,31 @@ public class SoftBodyTest extends BaseBulletTest {
 	Model model;
 	ModelInstance instance;
 	Matrix4 tmpM = new Matrix4();
-	
+
 	@Override
 	public BulletWorld createWorld () {
 		btDefaultCollisionConfiguration collisionConfiguration = new btSoftBodyRigidBodyCollisionConfiguration();
 		btCollisionDispatcher dispatcher = new btCollisionDispatcher(collisionConfiguration);
 		btAxisSweep3 broadphase = new btAxisSweep3(Vector3.tmp.set(-1000, -1000, -1000), Vector3.tmp2.set(1000, 1000, 1000), 1024);
 		btSequentialImpulseConstraintSolver solver = new btSequentialImpulseConstraintSolver();
-		btSoftRigidDynamicsWorld dynamicsWorld = new btSoftRigidDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);
-		
+		btSoftRigidDynamicsWorld dynamicsWorld = new btSoftRigidDynamicsWorld(dispatcher, broadphase, solver,
+			collisionConfiguration);
+
 		worldInfo = new btSoftBodyWorldInfo();
 		worldInfo.setBroadphase(broadphase);
 		worldInfo.setDispatcher(dispatcher);
 		worldInfo.getSparsesdf().Initialize();
-		
+
 		return new BulletWorld(collisionConfiguration, dispatcher, broadphase, solver, dynamicsWorld);
 	}
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
-		world.add("ground", 0f, 0f, 0f)
-		.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		float x0 = -2f, y0 = 6f, z0 = -2f;
 		float x1 = 8f, y1 = 6f, z1 = 8f;
 		Vector3 patch00 = new Vector3(x0, y0, z0);
@@ -87,10 +88,12 @@ public class SoftBodyTest extends BaseBulletTest {
 		softBody.takeOwnership();
 		softBody.setTotalMass(100f);
 		((btSoftRigidDynamicsWorld)(world.collisionWorld)).addSoftBody(softBody);
-		
+
 		final int vertCount = softBody.getNodeCount();
-		final int faceCount = softBody.getFaceCount(); 
-		mesh = new Mesh(false, vertCount, faceCount*3,  new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE), new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
+		final int faceCount = softBody.getFaceCount();
+		mesh = new Mesh(false, vertCount, faceCount * 3, new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE),
+			new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE), new VertexAttribute(Usage.TextureCoordinates, 2,
+				ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
 		final int vertSize = mesh.getVertexSize() / 4;
 		mesh.getVerticesBuffer().position(0);
 		mesh.getVerticesBuffer().limit(vertCount * vertSize);
@@ -98,35 +101,35 @@ public class SoftBodyTest extends BaseBulletTest {
 		mesh.getIndicesBuffer().limit(faceCount * 3);
 		softBody.getVertices(mesh.getVerticesBuffer(), vertCount, mesh.getVertexSize(), 0);
 		softBody.getIndices(mesh.getIndicesBuffer(), faceCount);
-		
+
 		final float[] verts = new float[vertCount * vertSize];
 		final int uvOffset = mesh.getVertexAttribute(Usage.TextureCoordinates).offset / 4;
 		final int normalOffset = mesh.getVertexAttribute(Usage.Normal).offset / 4;
 		mesh.getVertices(verts);
 		for (int i = 0; i < vertCount; i++) {
-			verts[i*vertSize+normalOffset] = 0f;
-			verts[i*vertSize+normalOffset+1] = 1f;
-			verts[i*vertSize+normalOffset+2] = 0f;
-			verts[i*vertSize+uvOffset] = (verts[i*vertSize] - x0) / (x1 - x0);
-			verts[i*vertSize+uvOffset+1] = (verts[i*vertSize+2] - z0) / (z1 - z0);
+			verts[i * vertSize + normalOffset] = 0f;
+			verts[i * vertSize + normalOffset + 1] = 1f;
+			verts[i * vertSize + normalOffset + 2] = 0f;
+			verts[i * vertSize + uvOffset] = (verts[i * vertSize] - x0) / (x1 - x0);
+			verts[i * vertSize + uvOffset + 1] = (verts[i * vertSize + 2] - z0) / (z1 - z0);
 		}
 		mesh.setVertices(verts);
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
-		
-		model = ModelBuilder.createFromMesh(mesh, GL20.GL_TRIANGLES, 
-			new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f), IntAttribute.createCullFace(0)));
+
+		model = ModelBuilder.createFromMesh(mesh, GL20.GL_TRIANGLES, new Material(TextureAttribute.createDiffuse(texture),
+			ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f), IntAttribute.createCullFace(0)));
 		instance = new ModelInstance(model);
 		world.add(new BulletEntity(instance, null));
 	}
-	
+
 	@Override
 	public void dispose () {
 		((btSoftRigidDynamicsWorld)(world.collisionWorld)).removeSoftBody(softBody);
 		softBody.dispose();
 		softBody = null;
-		
+
 		super.dispose();
-				
+
 		worldInfo.dispose();
 		worldInfo = null;
 		instance = null;
@@ -136,19 +139,19 @@ public class SoftBodyTest extends BaseBulletTest {
 		texture.dispose();
 		texture = null;
 	}
-	
+
 	@Override
 	protected void renderWorld () {
 		softBody.getVertices(mesh.getVerticesBuffer(), softBody.getNodeCount(), mesh.getVertexSize(), 0);
 		softBody.getWorldTransform(instance.transform);
 		super.renderWorld();
-		
-//		modelBatch.begin(camera);
-//		world.render(modelBatch, lights);
-//		modelBatch.render(instance, lights);
-//		modelBatch.end();
+
+// modelBatch.begin(camera);
+// world.render(modelBatch, lights);
+// modelBatch.render(instance, lights);
+// modelBatch.end();
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y, 20f);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
index 3e3cb72..543a3c0 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
@@ -37,7 +37,7 @@ import com.badlogic.gdx.utils.BufferUtils;
 /** @author xoppa */
 public class SoftMeshTest extends BaseBulletTest {
 	btSoftBodyWorldInfo worldInfo;
-	btSoftBody  softBody;
+	btSoftBody softBody;
 	Model model;
 	BulletEntity entity;
 	ShortBuffer indexMap;
@@ -51,84 +51,82 @@ public class SoftMeshTest extends BaseBulletTest {
 		btCollisionDispatcher dispatcher = new btCollisionDispatcher(collisionConfiguration);
 		btAxisSweep3 broadphase = new btAxisSweep3(Vector3.tmp.set(-1000, -1000, -1000), Vector3.tmp2.set(1000, 1000, 1000), 1024);
 		btSequentialImpulseConstraintSolver solver = new btSequentialImpulseConstraintSolver();
-		btSoftRigidDynamicsWorld dynamicsWorld = new btSoftRigidDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);
-		
+		btSoftRigidDynamicsWorld dynamicsWorld = new btSoftRigidDynamicsWorld(dispatcher, broadphase, solver,
+			collisionConfiguration);
+
 		worldInfo = new btSoftBodyWorldInfo();
 		worldInfo.setBroadphase(broadphase);
 		worldInfo.setDispatcher(dispatcher);
 		worldInfo.getSparsesdf().Initialize();
-		
+
 		return new BulletWorld(collisionConfiguration, dispatcher, broadphase, solver, dynamicsWorld);
 	}
-	
+
 	@Override
 	public void create () {
 		super.create();
-		
+
 		world.maxSubSteps = 20;
-		
-		world.add("ground", 0f, 0f, 0f)
-		.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		
+
+		world.add("ground", 0f, 0f, 0f).setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(),
+			0.25f + 0.5f * (float)Math.random(), 1f);
+
 		// Note: not every model is suitable for a one on one translation with a soft body, a better model might be added later.
 		model = objLoader.loadModel(Gdx.files.internal("data/wheel.obj"));
 		MeshPart meshPart = model.nodes.get(0).parts.get(0).meshPart;
 
 		meshPart.mesh.scale(6, 6, 6);
-		
-		indexMap = BufferUtils.newShortBuffer( meshPart.numVertices);
-		
+
+		indexMap = BufferUtils.newShortBuffer(meshPart.numVertices);
+
 		positionOffset = meshPart.mesh.getVertexAttribute(Usage.Position).offset;
 		normalOffset = meshPart.mesh.getVertexAttribute(Usage.Normal).offset;
-		
-		softBody = new btSoftBody(worldInfo, meshPart.mesh.getVerticesBuffer(), meshPart.mesh.getVertexSize(), 
-			positionOffset, normalOffset, meshPart.mesh.getIndicesBuffer(), 
-			meshPart.indexOffset, meshPart.numVertices, indexMap, 0);
+
+		softBody = new btSoftBody(worldInfo, meshPart.mesh.getVerticesBuffer(), meshPart.mesh.getVertexSize(), positionOffset,
+			normalOffset, meshPart.mesh.getIndicesBuffer(), meshPart.indexOffset, meshPart.numVertices, indexMap, 0);
 		// Set mass of the first vertex to zero so its unmovable, comment out this line to make it a fully dynamic body.
 		softBody.setMass(0, 0);
 		com.badlogic.gdx.physics.bullet.softbody.Material pm = softBody.appendMaterial();
 		pm.setKLST(0.2f);
 		pm.setFlags(0);
 		softBody.generateBendingConstraints(2, pm);
-		// Be careful increasing iterations, it decreases performance (but increases accuracy). 
+		// Be careful increasing iterations, it decreases performance (but increases accuracy).
 		softBody.setConfig_piterations(7);
 		softBody.setConfig_kDF(0.2f);
 		softBody.randomizeConstraints();
 		softBody.setTotalMass(1);
 		softBody.translate(tmpV.set(1, 5, 1));
 		((btSoftRigidDynamicsWorld)(world.collisionWorld)).addSoftBody(softBody);
-		
+
 		world.add(entity = new BulletEntity(model, (btCollisionObject)null, 1, 5, 1));
 	}
-	
+
 	@Override
 	public void dispose () {
 		((btSoftRigidDynamicsWorld)(world.collisionWorld)).removeSoftBody(softBody);
 		softBody.dispose();
 		softBody = null;
 		indexMap = null;
-		
+
 		super.dispose();
-		
+
 		worldInfo.dispose();
 		worldInfo = null;
 		model.dispose();
 		model = null;
 	}
-	
+
 	@Override
 	public void render () {
 		if (world.renderMeshes) {
 			MeshPart meshPart = model.nodes.get(0).parts.get(0).meshPart;
-			softBody.getVertices(meshPart.mesh.getVerticesBuffer(), meshPart.mesh.getVertexSize(), 
-				positionOffset, normalOffset,
-				meshPart.mesh.getIndicesBuffer(), 
-				meshPart.indexOffset, meshPart.numVertices, indexMap, 0);
+			softBody.getVertices(meshPart.mesh.getVerticesBuffer(), meshPart.mesh.getVertexSize(), positionOffset, normalOffset,
+				meshPart.mesh.getIndicesBuffer(), meshPart.indexOffset, meshPart.numVertices, indexMap, 0);
 			softBody.getWorldTransform(entity.transform);
 		}
 		super.render();
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y, 20f);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/VehicleTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/VehicleTest.java
index c4ed274..1fe001a 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/VehicleTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/VehicleTest.java
@@ -47,7 +47,7 @@ public class VehicleTest extends BaseBulletTest {
 	public btVehicleTuning tuning;
 	BulletEntity chassis;
 	BulletEntity wheels[] = new BulletEntity[4];
-	
+
 	boolean downPressed;
 	boolean upPressed;
 	boolean leftPressed;
@@ -58,7 +58,7 @@ public class VehicleTest extends BaseBulletTest {
 	public void create () {
 		super.create();
 		instructions = "Tap to shoot\nArrow keys to drive\nR to reset\nLong press to toggle debug mode\nSwipe for next test";
-		
+
 		final Model chassisModel = objLoader.loadModel(Gdx.files.internal("data/car.obj"));
 		disposables.add(chassisModel);
 		chassisModel.materials.get(0).clear();
@@ -66,12 +66,15 @@ public class VehicleTest extends BaseBulletTest {
 		final Model wheelModel = objLoader.loadModel(Gdx.files.internal("data/wheel.obj"));
 		disposables.add(wheelModel);
 		wheelModel.materials.get(0).clear();
-		wheelModel.materials.get(0).set(ColorAttribute.createDiffuse(Color.BLACK), 
-			ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(128));
+		wheelModel.materials.get(0).set(ColorAttribute.createDiffuse(Color.BLACK), ColorAttribute.createSpecular(Color.WHITE),
+			FloatAttribute.createShininess(128));
 		Texture checkboard = new Texture(Gdx.files.internal("data/g3d/checkboard.png"));
-		final Model largeGroundModel = modelBuilder.createBox(1000f, 2f, 1000f, 
-			new Material(TextureAttribute.createDiffuse(checkboard), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(16f)),
-			Usage.Position | Usage.Normal | Usage.TextureCoordinates);
+		final Model largeGroundModel = modelBuilder.createBox(
+			1000f,
+			2f,
+			1000f,
+			new Material(TextureAttribute.createDiffuse(checkboard), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute
+				.createShininess(16f)), Usage.Position | Usage.Normal | Usage.TextureCoordinates);
 		largeGroundModel.manageDisposable(checkboard);
 		disposables.add(largeGroundModel);
 		world.addConstructor("largeground", new BulletConstructor(largeGroundModel, 0f));
@@ -97,37 +100,40 @@ public class VehicleTest extends BaseBulletTest {
 		vehicle = new btRaycastVehicle(tuning, (btRigidBody)chassis.body, raycaster);
 		chassis.body.setActivationState(Collision.DISABLE_DEACTIVATION);
 		((btDynamicsWorld)world.collisionWorld).addVehicle(vehicle);
-		
+
 		vehicle.setCoordinateSystem(0, 1, 2);
 
 		btWheelInfo wheelInfo;
 		Vector3 point = new Vector3();
-		Vector3 direction = new Vector3(0,-1,0);
-		Vector3 axis = new Vector3(-1,0,0);
-		wheelInfo = vehicle.addWheel(point.set(chassisHalfExtents).scl(0.9f,-0.8f,0.7f), direction, axis, wheelHalfExtents.z*0.3f, wheelHalfExtents.z, tuning, true);
-		wheelInfo = vehicle.addWheel(point.set(chassisHalfExtents).scl(-0.9f,-0.8f,0.7f), direction, axis, wheelHalfExtents.z*0.3f, wheelHalfExtents.z, tuning, true);
-		wheelInfo = vehicle.addWheel(point.set(chassisHalfExtents).scl(0.9f,-0.8f,-0.5f), direction, axis, wheelHalfExtents.z*0.3f, wheelHalfExtents.z, tuning, false);
-		wheelInfo = vehicle.addWheel(point.set(chassisHalfExtents).scl(-0.9f,-0.8f,-0.5f), direction, axis, wheelHalfExtents.z*0.3f, wheelHalfExtents.z, tuning, false);
+		Vector3 direction = new Vector3(0, -1, 0);
+		Vector3 axis = new Vector3(-1, 0, 0);
+		wheelInfo = vehicle.addWheel(point.set(chassisHalfExtents).scl(0.9f, -0.8f, 0.7f), direction, axis,
+			wheelHalfExtents.z * 0.3f, wheelHalfExtents.z, tuning, true);
+		wheelInfo = vehicle.addWheel(point.set(chassisHalfExtents).scl(-0.9f, -0.8f, 0.7f), direction, axis,
+			wheelHalfExtents.z * 0.3f, wheelHalfExtents.z, tuning, true);
+		wheelInfo = vehicle.addWheel(point.set(chassisHalfExtents).scl(0.9f, -0.8f, -0.5f), direction, axis,
+			wheelHalfExtents.z * 0.3f, wheelHalfExtents.z, tuning, false);
+		wheelInfo = vehicle.addWheel(point.set(chassisHalfExtents).scl(-0.9f, -0.8f, -0.5f), direction, axis,
+			wheelHalfExtents.z * 0.3f, wheelHalfExtents.z, tuning, false);
 	}
-	
+
 	float maxForce = 100f;
 	float currentForce = 0f;
 	float acceleration = 50f; // force/second
 	float maxAngle = 60f;
 	float currentAngle = 0f;
 	float steerSpeed = 45f; // angle/second
+
 	@Override
 	public void update () {
-		final float delta = Gdx.graphics.getDeltaTime(); 
-		float angle = currentAngle; 
+		final float delta = Gdx.graphics.getDeltaTime();
+		float angle = currentAngle;
 		if (rightPressed) {
-			if (angle > 0f)
-				angle = 0f;
+			if (angle > 0f) angle = 0f;
 			angle = MathUtils.clamp(angle - steerSpeed * delta, -maxAngle, 0f);
 		} else if (leftPressed) {
-			if (angle < 0f)
-				angle = 0f;
-			angle = MathUtils.clamp(angle + steerSpeed * delta, 0f, maxAngle);			
+			if (angle < 0f) angle = 0f;
+			angle = MathUtils.clamp(angle + steerSpeed * delta, 0f, maxAngle);
 		} else
 			angle = 0f;
 		if (angle != currentAngle) {
@@ -135,15 +141,13 @@ public class VehicleTest extends BaseBulletTest {
 			vehicle.setSteeringValue(angle * MathUtils.degreesToRadians, 0);
 			vehicle.setSteeringValue(angle * MathUtils.degreesToRadians, 1);
 		}
-		
+
 		float force = currentForce;
 		if (upPressed) {
-			if (force < 0f)
-				force = 0f;
+			if (force < 0f) force = 0f;
 			force = MathUtils.clamp(force + acceleration * delta, 0f, maxForce);
 		} else if (downPressed) {
-			if (force > 0f)
-				force = 0f;
+			if (force > 0f) force = 0f;
 			force = MathUtils.clamp(force - acceleration * delta, -maxForce, 0f);
 		} else
 			force = 0f;
@@ -152,29 +156,29 @@ public class VehicleTest extends BaseBulletTest {
 			vehicle.applyEngineForce(force, 0);
 			vehicle.applyEngineForce(force, 1);
 		}
-		
+
 		super.update();
-		
+
 		for (int i = 0; i < wheels.length; i++) {
 			vehicle.updateWheelTransform(i, true);
 			vehicle.getWheelInfo(i).getWorldTransform().getOpenGLMatrix(wheels[i].transform.val);
 		}
-		
+
 		chassis.transform.getTranslation(camera.position);
-		tmpV.set(camera.position).sub(5,0,5).y = 0f;
+		tmpV.set(camera.position).sub(5, 0, 5).y = 0f;
 		camera.position.add(tmpV.nor().scl(-6f)).y = 4.f;
 		chassis.transform.getTranslation(tmpV);
 		camera.lookAt(tmpV);
 		camera.up.set(Vector3.Y);
 		camera.update();
 	}
-	
+
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
 		shoot(x, y);
 		return true;
 	}
-	
+
 	@Override
 	public void dispose () {
 		super.dispose();
@@ -185,25 +189,41 @@ public class VehicleTest extends BaseBulletTest {
 		tuning.dispose();
 		tuning = null;
 	}
-	
+
 	@Override
 	public boolean keyDown (int keycode) {
 		switch (keycode) {
-		case Keys.DOWN: downPressed = true; break;
-		case Keys.UP: upPressed = true; break;
-		case Keys.LEFT: leftPressed = true; break;
-		case Keys.RIGHT: rightPressed = true; break;
+		case Keys.DOWN:
+			downPressed = true;
+			break;
+		case Keys.UP:
+			upPressed = true;
+			break;
+		case Keys.LEFT:
+			leftPressed = true;
+			break;
+		case Keys.RIGHT:
+			rightPressed = true;
+			break;
 		}
 		return super.keyDown(keycode);
 	}
-	
+
 	@Override
 	public boolean keyUp (int keycode) {
 		switch (keycode) {
-		case Keys.DOWN: downPressed = false; break;
-		case Keys.UP: upPressed = false; break;
-		case Keys.LEFT: leftPressed = false; break;
-		case Keys.RIGHT: rightPressed = false; break;
+		case Keys.DOWN:
+			downPressed = false;
+			break;
+		case Keys.UP:
+			upPressed = false;
+			break;
+		case Keys.LEFT:
+			leftPressed = false;
+			break;
+		case Keys.RIGHT:
+			rightPressed = false;
+			break;
 		case Keys.R:
 			chassis.body.setWorldTransform(chassis.transform.setToTranslation(0, 5, 0));
 			chassis.body.setInterpolationWorldTransform(chassis.transform);
@@ -214,4 +234,4 @@ public class VehicleTest extends BaseBulletTest {
 		}
 		return super.keyUp(keycode);
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/examples/CustomTmxMapLoader.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/examples/CustomTmxMapLoader.java
index 42f7e15..b31bc61 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/examples/CustomTmxMapLoader.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/examples/CustomTmxMapLoader.java
@@ -12,21 +12,21 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.examples;
-
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.maps.ImageResolver;
-import com.badlogic.gdx.maps.tiled.TiledMap;
-import com.badlogic.gdx.maps.tiled.TmxMapLoader;
-import com.badlogic.gdx.utils.XmlReader.Element;
-
-public class CustomTmxMapLoader extends TmxMapLoader {
-//
-//	@Override
-//	protected void loadTileSet (TiledMap map, Element element, FileHandle tmxFile, ImageResolver imageResolver) {
-//		super.loadTileSet(map, element, tmxFile, imageResolver);
-//	}
-//	
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.examples;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.maps.ImageResolver;
+import com.badlogic.gdx.maps.tiled.TiledMap;
+import com.badlogic.gdx.maps.tiled.TmxMapLoader;
+import com.badlogic.gdx.utils.XmlReader.Element;
+
+public class CustomTmxMapLoader extends TmxMapLoader {
+//
+// @Override
+// protected void loadTileSet (TiledMap map, Element element, FileHandle tmxFile, ImageResolver imageResolver) {
+// super.loadTileSet(map, element, tmxFile, imageResolver);
+// }
+//
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypePackTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypePackTest.java
index cee358c..5171848 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypePackTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypePackTest.java
@@ -34,76 +34,65 @@ import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.Array;
 
-/**
- * An advanced example of packing many glyphs into a single texture atlas, using FreeTypeFontGenerator. 
+/** An advanced example of packing many glyphs into a single texture atlas, using FreeTypeFontGenerator.
  * 
- * This example uses enum ordinals for fast access to a two-dimensional array, which stores BitmapFonts
- * by size and style. A more flexible solution might be to use an OjectMap and and IntMap instead.  
+ * This example uses enum ordinals for fast access to a two-dimensional array, which stores BitmapFonts by size and style. A more
+ * flexible solution might be to use an OjectMap and and IntMap instead.
  * 
- * @author mattdesl AKA davedes
- */
+ * @author mattdesl AKA davedes */
 public class FreeTypePackTest extends GdxTest {
-	
-	//Define font sizes here...
+
+	// Define font sizes here...
 	static enum FontSize {
-		Tiny(10),
-		Small(12),
-		Medium(16),
-		Large(20),
-		Huge(24),
-		ReallyHuge(28),
-		JustTooBig(64);
-		
+		Tiny(10), Small(12), Medium(16), Large(20), Huge(24), ReallyHuge(28), JustTooBig(64);
+
 		public final int size;
-		
-		FontSize(int size) {
+
+		FontSize (int size) {
 			this.size = size;
 		}
 	}
-	
-	//Define font styles here...
+
+	// Define font styles here...
 	static enum FontStyle {
-		Regular("data/arial.ttf"),
-		Italic("data/arial-italic.ttf");
-		
+		Regular("data/arial.ttf"), Italic("data/arial-italic.ttf");
+
 		public final String path;
-		
-		FontStyle(String path) {
+
+		FontStyle (String path) {
 			this.path = path;
 		}
 	}
-	
-	
+
 	OrthographicCamera camera;
 	SpriteBatch batch;
 	TextureRegion[] regions;
 	String text;
-	
+
 	FontMap<BitmapFont> fontMap;
-	
+
 	public static final int FONT_ATLAS_WIDTH = 1024;
 	public static final int FONT_ATLAS_HEIGHT = 512;
-	
-	//whether to use integer coords for BitmapFont...
+
+	// whether to use integer coords for BitmapFont...
 	private static final boolean INTEGER = false;
-	
-	//Our demo doesn't need any fancy characters.
-	//Note: the set in FreeTypeFontGenerator.DEFAULT_CHARS is more extensive
-	//Also note that this string must be contained of unique characters; no duplicates!
-	public static final String CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
-									+ "abcdefghijklmnopqrstuvwxyz\n1234567890" 
-									+ "\"!`?'.,;:()[]{}<>|/@\\^$-%+=#_&~*";
-	
+
+	// Our demo doesn't need any fancy characters.
+	// Note: the set in FreeTypeFontGenerator.DEFAULT_CHARS is more extensive
+	// Also note that this string must be contained of unique characters; no duplicates!
+	public static final String CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz\n1234567890"
+		+ "\"!`?'.,;:()[]{}<>|/@\\^$-%+=#_&~*";
+
 	@Override
 	public void create () {
 		camera = new OrthographicCamera();
 		batch = new SpriteBatch();
-		
+
 		long start = System.currentTimeMillis();
 		int glyphCount = createFonts();
 		long time = System.currentTimeMillis() - start;
-		text = glyphCount+" glyphs packed in "+regions.length+" page(s) in "+time+" ms";
-		
+		text = glyphCount + " glyphs packed in " + regions.length + " page(s) in " + time + " ms";
+
 	}
 
 	@Override
@@ -114,31 +103,31 @@ public class FreeTypePackTest extends GdxTest {
 		camera.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		batch.setProjectionMatrix(camera.combined);
 		batch.begin();
-		
+
 		float x = 10;
-		float y = Gdx.graphics.getHeight()-10;
-		
+		float y = Gdx.graphics.getHeight() - 10;
+
 		int renderCalls = 0;
-		
-		//NOTE: Before production release on mobile, you should cache the array from values() 
-		//inside the Enum in order to reduce allocations in the render loop.
+
+		// NOTE: Before production release on mobile, you should cache the array from values()
+		// inside the Enum in order to reduce allocations in the render loop.
 		for (FontStyle style : FontStyle.values()) {
 			for (FontSize size : FontSize.values()) {
 				BitmapFont fnt = getFont(style, size);
-				
-				fnt.draw(batch, style.name()+" "+size.size+"pt: The quick brown fox jumps over the lazy dog", x, y);
+
+				fnt.draw(batch, style.name() + " " + size.size + "pt: The quick brown fox jumps over the lazy dog", x, y);
 				y -= fnt.getLineHeight() + 10;
 			}
 			y -= 20;
 		}
-		
+
 		BitmapFont font = getFont(FontStyle.Regular, FontSize.Medium);
-		font.draw(batch, text, 10, font.getCapHeight()+10);
-		
-		//draw all glyphs in background
-		batch.setColor(1f,1f,1f,0.15f);
+		font.draw(batch, text, 10, font.getCapHeight() + 10);
+
+		// draw all glyphs in background
+		batch.setColor(1f, 1f, 1f, 0.15f);
 		batch.draw(regions[0], 0, 0);
-		batch.setColor(1f,1f,1f,1f);
+		batch.setColor(1f, 1f, 1f, 1f);
 		batch.end();
 	}
 
@@ -146,7 +135,7 @@ public class FreeTypePackTest extends GdxTest {
 	public void dispose () {
 		super.dispose();
 		for (TextureRegion r : regions)
-			r.getTexture().dispose(); //dispose the texture since we own it
+			r.getTexture().dispose(); // dispose the texture since we own it
 		batch.dispose();
 	}
 
@@ -156,87 +145,87 @@ public class FreeTypePackTest extends GdxTest {
 	}
 
 	protected int createFonts () {
-		////////////////////////////////////////////////////////////////////////////////////////////////////////
-		////////Steps to use multiple FreeTypeFontGenerators with a single texture atlas://////////////////////
-		//1. Create a new PixmapPacker big enough to fit all your desired glyphs
-		//2. Create a new FreeTypeFontGenerator for each file (i.e. font styles/families)
-		//3. Pack the data by specifying the PixmapPacker parameter to generateData
-		//Keep hold of the returned BitmapFontData for later
-		//4. Repeat for other sizes.
-		//5. Dispose the generator and repeat for other font styles/families
-		//6. Create new Texture(s) and TextureRegion(s) from the Pixmap object from pixmapPacker.getPages()
-		//7. Dispose the PixmapPacker
-		//8. Use each BitmapFontData to construct a new BitmapFont, and specify your TextureRegion(s) to the font constructor
-		//9. Dispose of the Texture upon application exit or when you are done using the font atlas
-		////////////////////////////////////////////////////////////////////////////////////////////////////////
-		
-		//create the pixmap packer
+		// //////////////////////////////////////////////////////////////////////////////////////////////////////
+		// //////Steps to use multiple FreeTypeFontGenerators with a single texture atlas://////////////////////
+		// 1. Create a new PixmapPacker big enough to fit all your desired glyphs
+		// 2. Create a new FreeTypeFontGenerator for each file (i.e. font styles/families)
+		// 3. Pack the data by specifying the PixmapPacker parameter to generateData
+		// Keep hold of the returned BitmapFontData for later
+		// 4. Repeat for other sizes.
+		// 5. Dispose the generator and repeat for other font styles/families
+		// 6. Create new Texture(s) and TextureRegion(s) from the Pixmap object from pixmapPacker.getPages()
+		// 7. Dispose the PixmapPacker
+		// 8. Use each BitmapFontData to construct a new BitmapFont, and specify your TextureRegion(s) to the font constructor
+		// 9. Dispose of the Texture upon application exit or when you are done using the font atlas
+		// //////////////////////////////////////////////////////////////////////////////////////////////////////
+
+		// create the pixmap packer
 		PixmapPacker packer = new PixmapPacker(FONT_ATLAS_WIDTH, FONT_ATLAS_HEIGHT, Format.RGBA8888, 2, false);
-		
-		//we need to load all the BitmapFontDatas before we can start loading BitmapFonts
+
+		// we need to load all the BitmapFontDatas before we can start loading BitmapFonts
 		FontMap<BitmapFontData> dataMap = new FontMap<BitmapFontData>();
-		
-		//for each style...
+
+		// for each style...
 		for (FontStyle style : FontStyle.values()) {
-			//get the file for this style
+			// get the file for this style
 			FreeTypeFontGenerator gen = new FreeTypeFontGenerator(Gdx.files.internal(style.path));
-			
-			//For each size...
+
+			// For each size...
 			for (FontSize size : FontSize.values()) {
-				//pack the glyphs into the atlas using the default chars
+				// pack the glyphs into the atlas using the default chars
 				BitmapFontData data = gen.generateData(size.size, CHARACTERS, false, packer);
-				
-				//store the info for later, when we generate the texture
+
+				// store the info for later, when we generate the texture
 				dataMap.get(style).put(size, data);
 			}
-			
-			//dispose of the generator once we're finished with this family
+
+			// dispose of the generator once we're finished with this family
 			gen.dispose();
 		}
-		
-		//The pages of pixmaps from our packer
+
+		// The pages of pixmaps from our packer
 		Array<Page> pages = packer.getPages();
-		
-		//our resulting regions
+
+		// our resulting regions
 		regions = new TextureRegion[pages.size];
-		
-		//Now generate a TextureRegion from each pixmap page
-		for (int i=0; i<regions.length; i++) {
+
+		// Now generate a TextureRegion from each pixmap page
+		for (int i = 0; i < regions.length; i++) {
 			Page page = pages.get(i);
-			
-			//create a Texture from the pixmap
+
+			// create a Texture from the pixmap
 			Texture tex = new Texture(page.getPixmap());
 			tex.setFilter(TextureFilter.Nearest, TextureFilter.Nearest);
-			
+
 			regions[i] = new TextureRegion(tex);
 		}
-		
-		//No more need for our CPU-based pixmap packer, as our textures are now on GPU
+
+		// No more need for our CPU-based pixmap packer, as our textures are now on GPU
 		packer.dispose();
-		
-		//Now we can create our fonts...
+
+		// Now we can create our fonts...
 		fontMap = new FontMap<BitmapFont>();
-		
+
 		int fontCount = 0;
-		
-		//for each style...
+
+		// for each style...
 		for (FontStyle style : FontStyle.values()) {
-			//For each size...
+			// For each size...
 			for (FontSize size : FontSize.values()) {
-				//get the data for this style/size pair
+				// get the data for this style/size pair
 				BitmapFontData data = dataMap.get(style).get(size);
-				
-				//create a BitmapFont from the data and shared texture
+
+				// create a BitmapFont from the data and shared texture
 				BitmapFont bmFont = new BitmapFont(data, regions, INTEGER);
-				
-				//place the font into our map of loaded fonts
+
+				// place the font into our map of loaded fonts
 				fontMap.get(style).put(size, bmFont);
-				
+
 				fontCount++;
 			}
 		}
-		
-		//for the demo, show how many glyphs we loaded
+
+		// for the demo, show how many glyphs we loaded
 		return fontCount * CHARACTERS.length();
 	}
 
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java
index 1fc383e..ec40cf6 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java
@@ -45,14 +45,14 @@ public class FreeTypeTest extends GdxTest {
 		}
 		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), flip);
 		FileHandle fontFile = Gdx.files.internal("data/arial.ttf");
-		
+
 		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(fontFile);
-		
+
 		FreeTypeFontParameter parameter = new FreeTypeFontParameter();
 		parameter.size = 15;
 		parameter.flip = flip;
 		parameter.genMipMaps = true;
-		
+
 		FreeTypeBitmapFontData fontData = generator.generateData(parameter);
 		ftFont = generator.generateFont(parameter);
 		generator.dispose();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/InternationalFontsTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/InternationalFontsTest.java
index 45c7d41..af5d325 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/InternationalFontsTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/InternationalFontsTest.java
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
+ ******************************************************************************/
+
 package com.badlogic.gdx.tests.extensions;
 
 import com.badlogic.gdx.Gdx;
@@ -46,22 +47,22 @@ public class InternationalFontsTest extends GdxTest {
 	@Override
 	public void create () {
 		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("data/unbom.ttf"));
-		
+
 		FreeTypeFontParameter parameter = new FreeTypeFontParameter();
 		parameter.size = 18;
-		parameter.characters =  "한국어/조선�?";
-		
+		parameter.characters = "한국어/조선�?";
+
 		koreanFont = generator.generateFont(parameter);
 		generator.dispose();
 
 		parameter.characters = FreeTypeFontGenerator.DEFAULT_CHARS;
-		
+
 		generator = new FreeTypeFontGenerator(Gdx.files.internal("data/russkij.ttf"));
 		cyrillicFont = generator.generateFont(parameter);
 		generator.dispose();
 
 		parameter.characters = "วรณยุ�?ต์";
-		
+
 		generator = new FreeTypeFontGenerator(Gdx.files.internal("data/garuda.ttf"));
 		thaiFont = generator.generateFont(parameter);
 		generator.dispose();
@@ -90,4 +91,4 @@ public class InternationalFontsTest extends GdxTest {
 		cam.setToOrtho(false, width, height);
 	}
 
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Animation3DTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Animation3DTest.java
index 8ec2eba..e7badf0 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Animation3DTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Animation3DTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.GL20;
@@ -39,188 +39,178 @@ import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.StringBuilder;
-
-public class Animation3DTest extends BaseG3dHudTest {
-	ModelInstance skydome;
-	Model floorModel;
-	ModelInstance character;
-	AnimationController animation;
-	DirectionalShadowLight shadowLight;
-	ModelBatch shadowBatch;
-	
-	Environment lights;
-
-	@Override
-	public void create () {
-		super.create();
-		lights = new Environment();
-		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
-		lights.add(
-			(shadowLight = new DirectionalShadowLight(1024, 1024, 30f, 30f, 1f, 100f)).set(0.8f, 0.8f, 0.8f, -1f, -.8f, -.2f)
-		);
-		lights.shadowMap = shadowLight;
-		inputController.rotateLeftKey = inputController.rotateRightKey = inputController.forwardKey = inputController.backwardKey = 0;
-		cam.position.set(25, 25, 25);
-		cam.lookAt(0, 0, 0);
-		cam.update();
-		modelsWindow.setVisible(false);
-		assets.load("data/g3d/skydome.g3db", Model.class);
-		assets.load("data/g3d/concrete.png", Texture.class);
-		loading = true;
-		trForward.translation.set(0,0,8f);
-		trBackward.translation.set(0,0,-8f);
-		trLeft.rotation.setFromAxis(Vector3.Y, 90);
-		trRight.rotation.setFromAxis(Vector3.Y, -90);
-		
-		ModelBuilder builder = new ModelBuilder();
-		builder.begin();
-		MeshPartBuilder part = builder.part("floor", GL20.GL_TRIANGLES, Usage.Position | Usage.TextureCoordinates | Usage.Normal, new Material());
-		for (float x = -200f; x < 200f; x += 10f) {
-			for (float z = -200f; z < 200f; z += 10f) {
-				part.rect(x, 0, z+10f, x+10f, 0, z+10f, x+10f, 0, z, x, 0, z, 0, 1, 0);
-			}
-		}
-		floorModel = builder.end();
-		
-		shadowBatch = new ModelBatch(new DepthShaderProvider());
-	}
-
-	final AnimationController.Transform trTmp = new AnimationController.Transform();
-	final AnimationController.Transform trForward = new AnimationController.Transform();
-	final AnimationController.Transform trBackward = new AnimationController.Transform();
-	final AnimationController.Transform trRight = new AnimationController.Transform();
-	final AnimationController.Transform trLeft = new AnimationController.Transform();
-	final Matrix4 tmpMatrix = new Matrix4();
-	final Vector3 tmpVector = new Vector3();
-	int status = 0;
-	final static int idle = 1;
-	final static int walk = 2;
-	final static int back = 3;
-	final static int attack = 4;
-	float angle = 0f;
-	@Override
-	public void render () {
-		if (character != null) {
-			animation.update(Gdx.graphics.getDeltaTime());
-			if (upKey) {
-				if (!animation.inAction) {
-					trTmp.idt().lerp(trForward, Gdx.graphics.getDeltaTime() / animation.current.animation.duration);
-					character.transform.mul(trTmp.toMatrix4(tmpMatrix));
-				}
-				if (status != walk) {
-					animation.animate("Walk", -1, 1f, null, 0.2f);
-					status = walk;
-				}
-			} else if (downKey) {
-				if (!animation.inAction) {
-					trTmp.idt().lerp(trBackward, Gdx.graphics.getDeltaTime() / animation.current.animation.duration);
-					character.transform.mul(trTmp.toMatrix4(tmpMatrix));
-				}
-				if (status != back) {
-					animation.animate("Walk", -1, -1f, null, 0.2f);
-					status = back;
-				}
-			} else if (status != idle) {
-					animation.animate("Idle", -1, 1f, null, 0.2f);
-					status = idle;
-			}
-			if (rightKey && (status == walk || status == back) && !animation.inAction) {
-				trTmp.idt().lerp(trRight, Gdx.graphics.getDeltaTime() / animation.current.animation.duration);
-				character.transform.mul(trTmp.toMatrix4(tmpMatrix));
-			} else if (leftKey && (status == walk || status == back) && !animation.inAction) {
-				trTmp.idt().lerp(trLeft, Gdx.graphics.getDeltaTime() / animation.current.animation.duration);
-				character.transform.mul(trTmp.toMatrix4(tmpMatrix));
-			}
-			if (spaceKey && !animation.inAction) {
-				animation.action("Attack", 1, 1f, null, 0.2f);
-			}
-		}
-		
-		if (character != null) {
-			shadowLight.begin(character.transform.getTranslation(tmpVector), cam.direction);
-			shadowBatch.begin(shadowLight.getCamera());
-			if (character != null)
-				shadowBatch.render(character);
-			shadowBatch.end();
-			shadowLight.end();
-		}
-		super.render();
-	}
-	
-	@Override
-	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
-		batch.render(instances, lights);
-		if (skydome != null)
-			batch.render(skydome);
-	}
-	
-	@Override
-	protected void getStatus (StringBuilder stringBuilder) {
-		super.getStatus(stringBuilder);
-		stringBuilder.append(" use arrow keys to walk around, space to attack.");
-	}
-	
-	@Override
-	protected void onModelClicked(final String name) {	}
-	
-	@Override
-	protected void onLoaded() {
-		if (skydome == null) {
-			skydome = new ModelInstance(assets.get("data/g3d/skydome.g3db", Model.class));
-			floorModel.materials.get(0).set(TextureAttribute.createDiffuse(assets.get("data/g3d/concrete.png", Texture.class)));
-			instances.add(new ModelInstance(floorModel));
-			assets.load("data/g3d/knight.g3db", Model.class);
-			loading = true;
-		}
-		else if (character == null) {
-			character = new ModelInstance(assets.get("data/g3d/knight.g3db", Model.class));
-			BoundingBox bbox = new BoundingBox();
-			character.calculateBoundingBox(bbox);
-			character.transform.setToRotation(Vector3.Y, 180).trn(0, -bbox.min.y, 0);
-			instances.add(character);
-			animation = new AnimationController(character);
-			animation.animate("Idle", -1, 1f, null, 0.2f);
-			status = idle;
-			for (Animation anim : character.animations)
-				Gdx.app.log("Test", anim.id);
-		}
-	}
-	
-	boolean rightKey, leftKey, upKey, downKey, spaceKey;
-	@Override
-	public boolean keyUp (int keycode) {
-		if (keycode == Keys.LEFT)
-			leftKey = false;
-		if (keycode == Keys.RIGHT)
-			rightKey = false;
-		if (keycode == Keys.UP)
-			upKey = false;
-		if (keycode == Keys.DOWN)
-			downKey = false;
-		if (keycode == Keys.SPACE)
-			spaceKey = false;
-		return super.keyUp(keycode);
-	}
-	
-	@Override
-	public boolean keyDown (int keycode) {
-		if (keycode == Keys.LEFT)
-			leftKey = true;
-		if (keycode == Keys.RIGHT)
-			rightKey = true;
-		if (keycode == Keys.UP)
-			upKey = true;
-		if (keycode == Keys.DOWN)
-			downKey = true;
-		if (keycode == Keys.SPACE)
-			spaceKey = true;
-		return super.keyDown(keycode);
-	}
-	
-	@Override
-	public void dispose () {
-		super.dispose();
-		floorModel.dispose();
-		shadowLight.dispose();
-	}
-}
\ No newline at end of file
+
+public class Animation3DTest extends BaseG3dHudTest {
+	ModelInstance skydome;
+	Model floorModel;
+	ModelInstance character;
+	AnimationController animation;
+	DirectionalShadowLight shadowLight;
+	ModelBatch shadowBatch;
+
+	Environment lights;
+
+	@Override
+	public void create () {
+		super.create();
+		lights = new Environment();
+		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
+		lights.add((shadowLight = new DirectionalShadowLight(1024, 1024, 30f, 30f, 1f, 100f))
+			.set(0.8f, 0.8f, 0.8f, -1f, -.8f, -.2f));
+		lights.shadowMap = shadowLight;
+		inputController.rotateLeftKey = inputController.rotateRightKey = inputController.forwardKey = inputController.backwardKey = 0;
+		cam.position.set(25, 25, 25);
+		cam.lookAt(0, 0, 0);
+		cam.update();
+		modelsWindow.setVisible(false);
+		assets.load("data/g3d/skydome.g3db", Model.class);
+		assets.load("data/g3d/concrete.png", Texture.class);
+		loading = true;
+		trForward.translation.set(0, 0, 8f);
+		trBackward.translation.set(0, 0, -8f);
+		trLeft.rotation.setFromAxis(Vector3.Y, 90);
+		trRight.rotation.setFromAxis(Vector3.Y, -90);
+
+		ModelBuilder builder = new ModelBuilder();
+		builder.begin();
+		MeshPartBuilder part = builder.part("floor", GL20.GL_TRIANGLES, Usage.Position | Usage.TextureCoordinates | Usage.Normal,
+			new Material());
+		for (float x = -200f; x < 200f; x += 10f) {
+			for (float z = -200f; z < 200f; z += 10f) {
+				part.rect(x, 0, z + 10f, x + 10f, 0, z + 10f, x + 10f, 0, z, x, 0, z, 0, 1, 0);
+			}
+		}
+		floorModel = builder.end();
+
+		shadowBatch = new ModelBatch(new DepthShaderProvider());
+	}
+
+	final AnimationController.Transform trTmp = new AnimationController.Transform();
+	final AnimationController.Transform trForward = new AnimationController.Transform();
+	final AnimationController.Transform trBackward = new AnimationController.Transform();
+	final AnimationController.Transform trRight = new AnimationController.Transform();
+	final AnimationController.Transform trLeft = new AnimationController.Transform();
+	final Matrix4 tmpMatrix = new Matrix4();
+	final Vector3 tmpVector = new Vector3();
+	int status = 0;
+	final static int idle = 1;
+	final static int walk = 2;
+	final static int back = 3;
+	final static int attack = 4;
+	float angle = 0f;
+
+	@Override
+	public void render () {
+		if (character != null) {
+			animation.update(Gdx.graphics.getDeltaTime());
+			if (upKey) {
+				if (!animation.inAction) {
+					trTmp.idt().lerp(trForward, Gdx.graphics.getDeltaTime() / animation.current.animation.duration);
+					character.transform.mul(trTmp.toMatrix4(tmpMatrix));
+				}
+				if (status != walk) {
+					animation.animate("Walk", -1, 1f, null, 0.2f);
+					status = walk;
+				}
+			} else if (downKey) {
+				if (!animation.inAction) {
+					trTmp.idt().lerp(trBackward, Gdx.graphics.getDeltaTime() / animation.current.animation.duration);
+					character.transform.mul(trTmp.toMatrix4(tmpMatrix));
+				}
+				if (status != back) {
+					animation.animate("Walk", -1, -1f, null, 0.2f);
+					status = back;
+				}
+			} else if (status != idle) {
+				animation.animate("Idle", -1, 1f, null, 0.2f);
+				status = idle;
+			}
+			if (rightKey && (status == walk || status == back) && !animation.inAction) {
+				trTmp.idt().lerp(trRight, Gdx.graphics.getDeltaTime() / animation.current.animation.duration);
+				character.transform.mul(trTmp.toMatrix4(tmpMatrix));
+			} else if (leftKey && (status == walk || status == back) && !animation.inAction) {
+				trTmp.idt().lerp(trLeft, Gdx.graphics.getDeltaTime() / animation.current.animation.duration);
+				character.transform.mul(trTmp.toMatrix4(tmpMatrix));
+			}
+			if (spaceKey && !animation.inAction) {
+				animation.action("Attack", 1, 1f, null, 0.2f);
+			}
+		}
+
+		if (character != null) {
+			shadowLight.begin(character.transform.getTranslation(tmpVector), cam.direction);
+			shadowBatch.begin(shadowLight.getCamera());
+			if (character != null) shadowBatch.render(character);
+			shadowBatch.end();
+			shadowLight.end();
+		}
+		super.render();
+	}
+
+	@Override
+	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
+		batch.render(instances, lights);
+		if (skydome != null) batch.render(skydome);
+	}
+
+	@Override
+	protected void getStatus (StringBuilder stringBuilder) {
+		super.getStatus(stringBuilder);
+		stringBuilder.append(" use arrow keys to walk around, space to attack.");
+	}
+
+	@Override
+	protected void onModelClicked (final String name) {
+	}
+
+	@Override
+	protected void onLoaded () {
+		if (skydome == null) {
+			skydome = new ModelInstance(assets.get("data/g3d/skydome.g3db", Model.class));
+			floorModel.materials.get(0).set(TextureAttribute.createDiffuse(assets.get("data/g3d/concrete.png", Texture.class)));
+			instances.add(new ModelInstance(floorModel));
+			assets.load("data/g3d/knight.g3db", Model.class);
+			loading = true;
+		} else if (character == null) {
+			character = new ModelInstance(assets.get("data/g3d/knight.g3db", Model.class));
+			BoundingBox bbox = new BoundingBox();
+			character.calculateBoundingBox(bbox);
+			character.transform.setToRotation(Vector3.Y, 180).trn(0, -bbox.min.y, 0);
+			instances.add(character);
+			animation = new AnimationController(character);
+			animation.animate("Idle", -1, 1f, null, 0.2f);
+			status = idle;
+			for (Animation anim : character.animations)
+				Gdx.app.log("Test", anim.id);
+		}
+	}
+
+	boolean rightKey, leftKey, upKey, downKey, spaceKey;
+
+	@Override
+	public boolean keyUp (int keycode) {
+		if (keycode == Keys.LEFT) leftKey = false;
+		if (keycode == Keys.RIGHT) rightKey = false;
+		if (keycode == Keys.UP) upKey = false;
+		if (keycode == Keys.DOWN) downKey = false;
+		if (keycode == Keys.SPACE) spaceKey = false;
+		return super.keyUp(keycode);
+	}
+
+	@Override
+	public boolean keyDown (int keycode) {
+		if (keycode == Keys.LEFT) leftKey = true;
+		if (keycode == Keys.RIGHT) rightKey = true;
+		if (keycode == Keys.UP) upKey = true;
+		if (keycode == Keys.DOWN) downKey = true;
+		if (keycode == Keys.SPACE) spaceKey = true;
+		return super.keyDown(keycode);
+	}
+
+	@Override
+	public void dispose () {
+		super.dispose();
+		floorModel.dispose();
+		shadowLight.dispose();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dHudTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dHudTest.java
index 50cf89a..6b3fe46 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dHudTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dHudTest.java
@@ -12,211 +12,212 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.InputMultiplexer;
-import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.MathUtils;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.scenes.scene2d.Actor;
-import com.badlogic.gdx.scenes.scene2d.InputEvent;
-import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.ui.CheckBox;
-import com.badlogic.gdx.scenes.scene2d.ui.Label;
-import com.badlogic.gdx.scenes.scene2d.ui.List;
-import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
-import com.badlogic.gdx.scenes.scene2d.ui.Skin;
-import com.badlogic.gdx.scenes.scene2d.ui.Window;
-import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
-import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
-import com.badlogic.gdx.utils.StringBuilder;
-
-public abstract class BaseG3dHudTest extends BaseG3dTest {
-	public final static int PREF_HUDWIDTH = 640;
-	public final static int PREF_HUDHEIGHT = 480;
-	public final static float rotationSpeed = 0.02f * 360f; // degrees per second
-	public final static float moveSpeed = 0.25f; // cycles per second
-	
-	protected Stage hud;
-	protected float hudWidth, hudHeight;
-	protected Skin skin;
-	protected Label fpsLabel;
-	protected CollapsableWindow modelsWindow;
-	protected CheckBox gridCheckBox, rotateCheckBox, moveCheckBox;
-	protected final StringBuilder stringBuilder = new StringBuilder();
-	protected final Matrix4 transform = new Matrix4();
-	protected float moveRadius = 2f;
-
-	protected  String models[] = new String[] {
-		"car.obj", "cube.obj", "scene.obj", "scene2.obj", "wheel.obj",
-		"g3d/invaders.g3dj", "g3d/head.g3db", "g3d/house.g3dj", "g3d/knight.g3dj", "g3d/knight.g3db", "g3d/ship.obj", 
-		"g3d/shapes/cube_1.0x1.0.g3dj", "g3d/shapes/cube_1.5x1.5.g3dj", "g3d/shapes/sphere.g3dj", "g3d/shapes/teapot.g3dj",
-		"g3d/shapes/torus.g3dj"
-	};
-
-	@Override
-	public void create () {
-		super.create();
-
-		createHUD();
-
-		Gdx.input.setInputProcessor(new InputMultiplexer(this, hud, inputController));
-	}
-	
-	protected void createHUD() {
-		hud = new Stage(PREF_HUDWIDTH, PREF_HUDHEIGHT, true);
-		hudWidth = hud.getWidth();
-		hudHeight = hud.getHeight();
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.InputMultiplexer;
+import com.badlogic.gdx.InputProcessor;
+import com.badlogic.gdx.graphics.g3d.Model;
+import com.badlogic.gdx.graphics.g3d.ModelInstance;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.math.MathUtils;
+import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.scenes.scene2d.Actor;
+import com.badlogic.gdx.scenes.scene2d.InputEvent;
+import com.badlogic.gdx.scenes.scene2d.Stage;
+import com.badlogic.gdx.scenes.scene2d.ui.CheckBox;
+import com.badlogic.gdx.scenes.scene2d.ui.Label;
+import com.badlogic.gdx.scenes.scene2d.ui.List;
+import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
+import com.badlogic.gdx.scenes.scene2d.ui.Skin;
+import com.badlogic.gdx.scenes.scene2d.ui.Window;
+import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
+import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
+import com.badlogic.gdx.utils.StringBuilder;
+
+public abstract class BaseG3dHudTest extends BaseG3dTest {
+	public final static int PREF_HUDWIDTH = 640;
+	public final static int PREF_HUDHEIGHT = 480;
+	public final static float rotationSpeed = 0.02f * 360f; // degrees per second
+	public final static float moveSpeed = 0.25f; // cycles per second
+
+	protected Stage hud;
+	protected float hudWidth, hudHeight;
+	protected Skin skin;
+	protected Label fpsLabel;
+	protected CollapsableWindow modelsWindow;
+	protected CheckBox gridCheckBox, rotateCheckBox, moveCheckBox;
+	protected final StringBuilder stringBuilder = new StringBuilder();
+	protected final Matrix4 transform = new Matrix4();
+	protected float moveRadius = 2f;
+
+	protected String models[] = new String[] {"car.obj", "cube.obj", "scene.obj", "scene2.obj", "wheel.obj", "g3d/invaders.g3dj",
+		"g3d/head.g3db", "g3d/house.g3dj", "g3d/knight.g3dj", "g3d/knight.g3db", "g3d/ship.obj", "g3d/shapes/cube_1.0x1.0.g3dj",
+		"g3d/shapes/cube_1.5x1.5.g3dj", "g3d/shapes/sphere.g3dj", "g3d/shapes/teapot.g3dj", "g3d/shapes/torus.g3dj"};
+
+	@Override
+	public void create () {
+		super.create();
+
+		createHUD();
+
+		Gdx.input.setInputProcessor(new InputMultiplexer(this, hud, inputController));
+	}
+
+	protected void createHUD () {
+		hud = new Stage(PREF_HUDWIDTH, PREF_HUDHEIGHT, true);
+		hudWidth = hud.getWidth();
+		hudHeight = hud.getHeight();
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
+
 		final List<String> modelsList = new List(skin);
-		modelsList.setItems(models);
-		modelsList.addListener(new ClickListener() {
-			@Override
-			public void clicked (InputEvent event, float x, float y) {
-				if (!modelsWindow.isCollapsed() && getTapCount() == 2) {
-					onModelClicked(modelsList.getSelected());
-					modelsWindow.collapse();
-				}
-			}
-		});
-		modelsWindow = addListWindow("Models", modelsList, 0, -1);
-		
-		fpsLabel = new Label("FPS: 999", skin);
-		hud.addActor(fpsLabel);
-		gridCheckBox = new CheckBox("Show grid", skin);
-		gridCheckBox.setChecked(showAxes);
-		gridCheckBox.addListener(new ChangeListener() {
-			@Override
-			public void changed (ChangeEvent event, Actor actor) {
-				showAxes = gridCheckBox.isChecked();
-			}
-		});
-		gridCheckBox.setPosition(hudWidth - gridCheckBox.getWidth(), 0);
-		hud.addActor(gridCheckBox);
-		
-		rotateCheckBox = new CheckBox("Rotate", skin);
-		rotateCheckBox.setChecked(true);
-		rotateCheckBox.setPosition(hudWidth - rotateCheckBox.getWidth(), gridCheckBox.getHeight());
-		hud.addActor(rotateCheckBox);
-		
-		moveCheckBox = new CheckBox("Move", skin);
-		moveCheckBox.setChecked(false);
-		moveCheckBox.setPosition(hudWidth - moveCheckBox.getWidth(), rotateCheckBox.getTop());
-		hud.addActor(moveCheckBox);
-	}
-	
-	protected CollapsableWindow addListWindow(String title, List list, float x, float y) {
-		CollapsableWindow window = new CollapsableWindow(title, skin);
-		window.row();
-		ScrollPane pane = new ScrollPane(list, skin);
-		pane.setFadeScrollBars(false);
-		window.add(pane);
-		window.pack();
-		window.pack();
-		if (window.getHeight() > hudHeight) {
-			window.setHeight(hudHeight);
-		}			
-		window.setX( x < 0 ? hudWidth - (window.getWidth() - (x+1)) : x );
-		window.setY( y < 0 ? hudHeight - (window.getHeight() - (y+1)) : y );
-		window.layout();
-		window.collapse();
-		hud.addActor(window);
-		pane.setScrollX(0);
-		pane.setScrollY(0);
-		return window;
-	}
-
-	protected abstract void onModelClicked(final String name);
-	
-	protected void getStatus(final StringBuilder stringBuilder) {
-		stringBuilder.append("FPS: ").append(Gdx.graphics.getFramesPerSecond());
-		if (loading)
-			stringBuilder.append(" loading...");
-	}
-	
-	protected float rotation, movement; 
-	@Override
-	public void render () {
-		transform.idt();
-		if (rotateCheckBox.isChecked())
-			transform.rotate(Vector3.Y, rotation = (rotation + rotationSpeed * Gdx.graphics.getRawDeltaTime()) % 360);
-		if (moveCheckBox.isChecked()) {
-			movement = (movement + moveSpeed * Gdx.graphics.getRawDeltaTime()) % 1f;
-			final float sm = MathUtils.sin(movement * MathUtils.PI2);
-			final float cm = MathUtils.cos(movement * MathUtils.PI2);
-			transform.trn(0, moveRadius * cm, moveRadius * sm);
-		}
-		
-		super.render();
-		
-		stringBuilder.setLength(0);
-		getStatus(stringBuilder);
-		fpsLabel.setText(stringBuilder);
-		hud.act(Gdx.graphics.getDeltaTime());
-		hud.draw();
-	}
-	
-	@Override
-	public void resize (int width, int height) {
-		super.resize(width, height);
-		hud.setViewport(PREF_HUDWIDTH, PREF_HUDHEIGHT, true);
-		hudWidth = hud.getWidth();
-		hudHeight = hud.getHeight();
-	}
-	
-	@Override
-	public void dispose () {
-		super.dispose();
-		skin.dispose();
-		skin = null;
-	}
-	
-	/** Double click title to expand/collapse */
-	public static class CollapsableWindow extends Window {
-		private boolean collapsed;
-		private float collapseHeight = 20f;
-		private float expandHeight;
-		public CollapsableWindow (String title, Skin skin) {
-			super(title, skin);
-			addListener(new ClickListener() {
-				@Override
-				public void clicked (InputEvent event, float x, float y) {
-					if (getTapCount() == 2 && getHeight() - y <= getPadTop() && y < getHeight() && x > 0 && x < getWidth())
-						toggleCollapsed();
-				}
-			});
-		}
-		public void expand() {
-			if (!collapsed) return;
-			setHeight(expandHeight);
-			setY(getY()-expandHeight+collapseHeight);
-			collapsed = false;
-		}
-		public void collapse() {
-			if (collapsed) return;
-			expandHeight = getHeight();
-			setHeight(collapseHeight);
-			setY(getY()+expandHeight-collapseHeight);
-			collapsed = true;
-			if (getStage() != null)
-				getStage().setScrollFocus(null);
-		}
-		public void toggleCollapsed() {
-			if (collapsed)
-				expand();
-			else
-				collapse();
-		}
-		public boolean isCollapsed() {
-			return collapsed;
-		}
-	}
-}
\ No newline at end of file
+		modelsList.setItems(models);
+		modelsList.addListener(new ClickListener() {
+			@Override
+			public void clicked (InputEvent event, float x, float y) {
+				if (!modelsWindow.isCollapsed() && getTapCount() == 2) {
+					onModelClicked(modelsList.getSelected());
+					modelsWindow.collapse();
+				}
+			}
+		});
+		modelsWindow = addListWindow("Models", modelsList, 0, -1);
+
+		fpsLabel = new Label("FPS: 999", skin);
+		hud.addActor(fpsLabel);
+		gridCheckBox = new CheckBox("Show grid", skin);
+		gridCheckBox.setChecked(showAxes);
+		gridCheckBox.addListener(new ChangeListener() {
+			@Override
+			public void changed (ChangeEvent event, Actor actor) {
+				showAxes = gridCheckBox.isChecked();
+			}
+		});
+		gridCheckBox.setPosition(hudWidth - gridCheckBox.getWidth(), 0);
+		hud.addActor(gridCheckBox);
+
+		rotateCheckBox = new CheckBox("Rotate", skin);
+		rotateCheckBox.setChecked(true);
+		rotateCheckBox.setPosition(hudWidth - rotateCheckBox.getWidth(), gridCheckBox.getHeight());
+		hud.addActor(rotateCheckBox);
+
+		moveCheckBox = new CheckBox("Move", skin);
+		moveCheckBox.setChecked(false);
+		moveCheckBox.setPosition(hudWidth - moveCheckBox.getWidth(), rotateCheckBox.getTop());
+		hud.addActor(moveCheckBox);
+	}
+
+	protected CollapsableWindow addListWindow (String title, List list, float x, float y) {
+		CollapsableWindow window = new CollapsableWindow(title, skin);
+		window.row();
+		ScrollPane pane = new ScrollPane(list, skin);
+		pane.setFadeScrollBars(false);
+		window.add(pane);
+		window.pack();
+		window.pack();
+		if (window.getHeight() > hudHeight) {
+			window.setHeight(hudHeight);
+		}
+		window.setX(x < 0 ? hudWidth - (window.getWidth() - (x + 1)) : x);
+		window.setY(y < 0 ? hudHeight - (window.getHeight() - (y + 1)) : y);
+		window.layout();
+		window.collapse();
+		hud.addActor(window);
+		pane.setScrollX(0);
+		pane.setScrollY(0);
+		return window;
+	}
+
+	protected abstract void onModelClicked (final String name);
+
+	protected void getStatus (final StringBuilder stringBuilder) {
+		stringBuilder.append("FPS: ").append(Gdx.graphics.getFramesPerSecond());
+		if (loading) stringBuilder.append(" loading...");
+	}
+
+	protected float rotation, movement;
+
+	@Override
+	public void render () {
+		transform.idt();
+		if (rotateCheckBox.isChecked())
+			transform.rotate(Vector3.Y, rotation = (rotation + rotationSpeed * Gdx.graphics.getRawDeltaTime()) % 360);
+		if (moveCheckBox.isChecked()) {
+			movement = (movement + moveSpeed * Gdx.graphics.getRawDeltaTime()) % 1f;
+			final float sm = MathUtils.sin(movement * MathUtils.PI2);
+			final float cm = MathUtils.cos(movement * MathUtils.PI2);
+			transform.trn(0, moveRadius * cm, moveRadius * sm);
+		}
+
+		super.render();
+
+		stringBuilder.setLength(0);
+		getStatus(stringBuilder);
+		fpsLabel.setText(stringBuilder);
+		hud.act(Gdx.graphics.getDeltaTime());
+		hud.draw();
+	}
+
+	@Override
+	public void resize (int width, int height) {
+		super.resize(width, height);
+		hud.setViewport(PREF_HUDWIDTH, PREF_HUDHEIGHT, true);
+		hudWidth = hud.getWidth();
+		hudHeight = hud.getHeight();
+	}
+
+	@Override
+	public void dispose () {
+		super.dispose();
+		skin.dispose();
+		skin = null;
+	}
+
+	/** Double click title to expand/collapse */
+	public static class CollapsableWindow extends Window {
+		private boolean collapsed;
+		private float collapseHeight = 20f;
+		private float expandHeight;
+
+		public CollapsableWindow (String title, Skin skin) {
+			super(title, skin);
+			addListener(new ClickListener() {
+				@Override
+				public void clicked (InputEvent event, float x, float y) {
+					if (getTapCount() == 2 && getHeight() - y <= getPadTop() && y < getHeight() && x > 0 && x < getWidth())
+						toggleCollapsed();
+				}
+			});
+		}
+
+		public void expand () {
+			if (!collapsed) return;
+			setHeight(expandHeight);
+			setY(getY() - expandHeight + collapseHeight);
+			collapsed = false;
+		}
+
+		public void collapse () {
+			if (collapsed) return;
+			expandHeight = getHeight();
+			setHeight(collapseHeight);
+			setY(getY() + expandHeight - collapseHeight);
+			collapsed = true;
+			if (getStage() != null) getStage().setScrollFocus(null);
+		}
+
+		public void toggleCollapsed () {
+			if (collapsed)
+				expand();
+			else
+				collapse();
+		}
+
+		public boolean isCollapsed () {
+			return collapsed;
+		}
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dTest.java
index 8a73af6..26f8f6d 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dTest.java
@@ -34,7 +34,7 @@ import com.badlogic.gdx.utils.Array;
 
 public abstract class BaseG3dTest extends GdxTest {
 	public AssetManager assets;
-	
+
 	public PerspectiveCamera cam;
 	public CameraInputController inputController;
 	public ModelBatch modelBatch;
@@ -42,36 +42,36 @@ public abstract class BaseG3dTest extends GdxTest {
 	public ModelInstance axesInstance;
 	public boolean showAxes = true;
 	public Array<ModelInstance> instances = new Array<ModelInstance>();
-	public final Color bgColor = new Color(0,0,0,1);
-	
+	public final Color bgColor = new Color(0, 0, 0, 1);
+
 	@Override
 	public void create () {
-		if (assets == null)
-			assets = new AssetManager();
-		
+		if (assets == null) assets = new AssetManager();
+
 		modelBatch = new ModelBatch();
-		
+
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(10f, 10f, 10f);
-		cam.lookAt(0,0,0);
+		cam.lookAt(0, 0, 0);
 		cam.near = 0.1f;
 		cam.far = 1000f;
 		cam.update();
-		
+
 		createAxes();
 
 		Gdx.input.setInputProcessor(inputController = new CameraInputController(cam));
 	}
-	
+
 	final float GRID_MIN = -10f;
 	final float GRID_MAX = 10f;
 	final float GRID_STEP = 1f;
-	private void createAxes() {
+
+	private void createAxes () {
 		ModelBuilder modelBuilder = new ModelBuilder();
 		modelBuilder.begin();
 		MeshPartBuilder builder = modelBuilder.part("grid", GL20.GL_LINES, Usage.Position | Usage.Color, new Material());
 		builder.setColor(Color.LIGHT_GRAY);
-		for (float t = GRID_MIN; t <= GRID_MAX; t+=GRID_STEP) {
+		for (float t = GRID_MIN; t <= GRID_MAX; t += GRID_STEP) {
 			builder.line(t, 0, GRID_MIN, t, 0, GRID_MAX);
 			builder.line(GRID_MIN, 0, t, GRID_MAX, 0, t);
 		}
@@ -85,37 +85,37 @@ public abstract class BaseG3dTest extends GdxTest {
 		axesModel = modelBuilder.end();
 		axesInstance = new ModelInstance(axesModel);
 	}
-	
-	protected abstract void render(final ModelBatch batch, final Array<ModelInstance> instances);
-	
+
+	protected abstract void render (final ModelBatch batch, final Array<ModelInstance> instances);
+
 	protected boolean loading = false;
-	protected void onLoaded() {}
-	
-	public void render(final Array<ModelInstance> instances) {
+
+	protected void onLoaded () {
+	}
+
+	public void render (final Array<ModelInstance> instances) {
 		modelBatch.begin(cam);
-		if (showAxes)
-			modelBatch.render(axesInstance);
-		if (instances != null)
-			render(modelBatch, instances);
+		if (showAxes) modelBatch.render(axesInstance);
+		if (instances != null) render(modelBatch, instances);
 		modelBatch.end();
 	}
-	
+
 	@Override
 	public void render () {
 		if (loading && assets.update()) {
 			loading = false;
 			onLoaded();
 		}
-		
+
 		inputController.update();
-		
+
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 		Gdx.gl.glClearColor(bgColor.r, bgColor.g, bgColor.b, bgColor.a);
 
 		render(instances);
 	}
-	
+
 	@Override
 	public void resize (int width, int height) {
 		super.resize(width, height);
@@ -123,7 +123,7 @@ public abstract class BaseG3dTest extends GdxTest {
 		cam.viewportHeight = height;
 		cam.update();
 	}
-	
+
 	@Override
 	public void dispose () {
 		modelBatch.dispose();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DSceneTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DSceneTest.java
index 69bf4fe..06bebe5 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DSceneTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DSceneTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.assets.AssetManager;
@@ -31,100 +31,97 @@ import com.badlogic.gdx.graphics.g3d.model.Node;
 import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.Array;
-
-public class Basic3DSceneTest extends GdxTest implements ApplicationListener {
-	public PerspectiveCamera cam;
-	public CameraInputController camController;
-	public ModelBatch modelBatch;
-	public AssetManager assets;
-	public Array<ModelInstance> instances = new Array<ModelInstance>();
-	public Environment lights;
-	public boolean loading;
-	
-	public Array<ModelInstance> blocks = new Array<ModelInstance>();
-	public Array<ModelInstance> invaders = new Array<ModelInstance>();
-	public ModelInstance ship;
-	public ModelInstance space;
-	
-	@Override
-	public void create () {
-		modelBatch = new ModelBatch();
-		lights = new Environment();
-		lights = new Environment();
-		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
-		lights.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
-		
-		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		cam.position.set(0f, 7f, 10f);
-		cam.lookAt(0,0,0);
-		cam.near = 0.1f;
-		cam.far = 300f;
-		cam.update();
-
-		camController = new CameraInputController(cam);
-		Gdx.input.setInputProcessor(camController);
-		
-		assets = new AssetManager();
-		assets.load("data/g3d/invaders.g3dj", Model.class);
-		loading = true;
-	}
-
-	private void doneLoading() {
-		Model model = assets.get("data/g3d/invaders.g3dj", Model.class);
-		for (int i = 0; i < model.nodes.size; i++) {
-			String id = model.nodes.get(i).id;
-			ModelInstance instance = new ModelInstance(model, id);
-			Node node = instance.getNode(id);
-			
-			instance.transform.set(node.globalTransform);
-			node.translation.set(0,0,0);
-			node.scale.set(1,1,1);
-			node.rotation.idt();
-			instance.calculateTransforms();
-			
-			if (id.equals("space")) {
-				space = instance;
-				continue;
-			}
-			
-			instances.add(instance);
-			
-			if (id.equals("ship"))
-				ship = instance;
-			else if (id.startsWith("block"))
-				blocks.add(instance);
-			else if (id.startsWith("invader"))
-				invaders.add(instance);
-		}
-
-		loading = false;
-	}
-	
-	@Override
-	public void render () {
-		if (loading && assets.update())
-			doneLoading();
-		camController.update();
-		
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
-
-		modelBatch.begin(cam);
-		for (ModelInstance instance : instances)
-			modelBatch.render(instance, lights);
-		if (space != null)
-			modelBatch.render(space);
-		modelBatch.end();
-	}
-	
-	@Override
-	public void dispose () {
-		modelBatch.dispose();
-		instances.clear();
-		assets.dispose();
-	}
-	
-	public boolean needsGL20 () {
-		return true;
-	}
-}
\ No newline at end of file
+
+public class Basic3DSceneTest extends GdxTest implements ApplicationListener {
+	public PerspectiveCamera cam;
+	public CameraInputController camController;
+	public ModelBatch modelBatch;
+	public AssetManager assets;
+	public Array<ModelInstance> instances = new Array<ModelInstance>();
+	public Environment lights;
+	public boolean loading;
+
+	public Array<ModelInstance> blocks = new Array<ModelInstance>();
+	public Array<ModelInstance> invaders = new Array<ModelInstance>();
+	public ModelInstance ship;
+	public ModelInstance space;
+
+	@Override
+	public void create () {
+		modelBatch = new ModelBatch();
+		lights = new Environment();
+		lights = new Environment();
+		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
+		lights.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
+
+		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		cam.position.set(0f, 7f, 10f);
+		cam.lookAt(0, 0, 0);
+		cam.near = 0.1f;
+		cam.far = 300f;
+		cam.update();
+
+		camController = new CameraInputController(cam);
+		Gdx.input.setInputProcessor(camController);
+
+		assets = new AssetManager();
+		assets.load("data/g3d/invaders.g3dj", Model.class);
+		loading = true;
+	}
+
+	private void doneLoading () {
+		Model model = assets.get("data/g3d/invaders.g3dj", Model.class);
+		for (int i = 0; i < model.nodes.size; i++) {
+			String id = model.nodes.get(i).id;
+			ModelInstance instance = new ModelInstance(model, id);
+			Node node = instance.getNode(id);
+
+			instance.transform.set(node.globalTransform);
+			node.translation.set(0, 0, 0);
+			node.scale.set(1, 1, 1);
+			node.rotation.idt();
+			instance.calculateTransforms();
+
+			if (id.equals("space")) {
+				space = instance;
+				continue;
+			}
+
+			instances.add(instance);
+
+			if (id.equals("ship"))
+				ship = instance;
+			else if (id.startsWith("block"))
+				blocks.add(instance);
+			else if (id.startsWith("invader")) invaders.add(instance);
+		}
+
+		loading = false;
+	}
+
+	@Override
+	public void render () {
+		if (loading && assets.update()) doneLoading();
+		camController.update();
+
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
+
+		modelBatch.begin(cam);
+		for (ModelInstance instance : instances)
+			modelBatch.render(instance, lights);
+		if (space != null) modelBatch.render(space);
+		modelBatch.end();
+	}
+
+	@Override
+	public void dispose () {
+		modelBatch.dispose();
+		instances.clear();
+		assets.dispose();
+	}
+
+	public boolean needsGL20 () {
+		return true;
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DTest.java
index 51fa458..b30552c 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputMultiplexer;
 import com.badlogic.gdx.graphics.Color;
@@ -33,68 +33,69 @@ import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
 import com.badlogic.gdx.tests.utils.GdxTest;
-
-public class Basic3DTest extends GdxTest {
-	public PerspectiveCamera cam;
-	public CameraInputController inputController;
-	public ModelBatch modelBatch;
-	public Model model;
-	public ModelInstance instance;
-	public Environment environment;
-	
-	@Override
-	public void create () {
-		modelBatch = new ModelBatch(new DefaultShaderProvider());
-//		modelBatch = new ModelBatch();
-		environment = new Environment();
-		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, .4f, .4f, .4f, 1f));
-		environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
-		
-		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		cam.position.set(10f, 10f, 10f);
-		cam.lookAt(0,0,0);
-		cam.near = 0.1f;
-		cam.far = 300f;
-		cam.update();
-
-		ModelBuilder modelBuilder = new ModelBuilder();
-		model = modelBuilder.createBox(5f, 5f, 5f, new Material(ColorAttribute.createDiffuse(Color.GREEN)), Usage.Position | Usage.Normal);
-		instance = new ModelInstance(model);
-		
-//		model = new G3dModelLoader(new UBJsonReader()).loadModel(Gdx.files.internal("data/g3d/knight.g3db"));
-//		instance = new ModelInstance(model);
-
-		Gdx.input.setInputProcessor(new InputMultiplexer(this, inputController = new CameraInputController(cam)));
-	}
-
-	@Override
-	public void render () {
-		inputController.update();
-		
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
-
-		modelBatch.begin(cam);
-		modelBatch.render(instance, environment);
-		modelBatch.end();
-	}
-	
-	@Override
-	public void dispose () {
-		modelBatch.dispose();
-		model.dispose();
-	}
-	
-	public boolean needsGL20 () {
-		return true;
-	}
-
-	public void resume () {
-	}
-
-	public void resize (int width, int height) {
-	}
-
-	public void pause () {
-	}
-}
\ No newline at end of file
+
+public class Basic3DTest extends GdxTest {
+	public PerspectiveCamera cam;
+	public CameraInputController inputController;
+	public ModelBatch modelBatch;
+	public Model model;
+	public ModelInstance instance;
+	public Environment environment;
+
+	@Override
+	public void create () {
+		modelBatch = new ModelBatch(new DefaultShaderProvider());
+// modelBatch = new ModelBatch();
+		environment = new Environment();
+		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, .4f, .4f, .4f, 1f));
+		environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
+
+		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		cam.position.set(10f, 10f, 10f);
+		cam.lookAt(0, 0, 0);
+		cam.near = 0.1f;
+		cam.far = 300f;
+		cam.update();
+
+		ModelBuilder modelBuilder = new ModelBuilder();
+		model = modelBuilder.createBox(5f, 5f, 5f, new Material(ColorAttribute.createDiffuse(Color.GREEN)), Usage.Position
+			| Usage.Normal);
+		instance = new ModelInstance(model);
+
+// model = new G3dModelLoader(new UBJsonReader()).loadModel(Gdx.files.internal("data/g3d/knight.g3db"));
+// instance = new ModelInstance(model);
+
+		Gdx.input.setInputProcessor(new InputMultiplexer(this, inputController = new CameraInputController(cam)));
+	}
+
+	@Override
+	public void render () {
+		inputController.update();
+
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
+
+		modelBatch.begin(cam);
+		modelBatch.render(instance, environment);
+		modelBatch.end();
+	}
+
+	@Override
+	public void dispose () {
+		modelBatch.dispose();
+		model.dispose();
+	}
+
+	public boolean needsGL20 () {
+		return true;
+	}
+
+	public void resume () {
+	}
+
+	public void resize (int width, int height) {
+	}
+
+	public void pause () {
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/FogTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/FogTest.java
index d4261e0..43f3dc1 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/FogTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/FogTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputMultiplexer;
@@ -33,82 +33,84 @@ import com.badlogic.gdx.graphics.g3d.environment.DirectionalLight;
 import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
 import com.badlogic.gdx.tests.utils.GdxTest;
-
-public class FogTest extends GdxTest implements ApplicationListener {
-	public PerspectiveCamera cam;
-	public CameraInputController inputController;
-	public ModelBatch modelBatch;
-	public Model model;
-	public ModelInstance instance;
-	public Environment environment;
-	
-	@Override
-	public void create () {
-		modelBatch = new ModelBatch();
-		environment = new Environment();
-		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
-		environment.set(new ColorAttribute(ColorAttribute.Fog, 0.13f, 0.13f, 0.13f, 1f));
-		environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
-		
-		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		cam.position.set(30f, 10f, 30f);
-		cam.lookAt(0,0,0);
-		cam.near = 0.1f;
-		cam.far = 45f;
-		cam.update();
-
-		ModelBuilder modelBuilder = new ModelBuilder();
-		model = modelBuilder.createBox(5f, 5f, 5f, new Material(ColorAttribute.createDiffuse(Color.GREEN)), Usage.Position | Usage.Normal);
-		instance = new ModelInstance(model);
-
-		Gdx.input.setInputProcessor(new InputMultiplexer(this, inputController = new CameraInputController(cam)));
-	}
-
-	@Override
-	public void render () {
-
-        animate();
-
-		inputController.update();
-		
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
-
-        Gdx.gl.glClearColor(0.13f, 0.13f, 0.13f, 1);
-
-		modelBatch.begin(cam);
-		modelBatch.render(instance, environment);
-		modelBatch.end();
-	}
-
-    float delta = 0f, dir = 1;
-    private void animate() {
-
-        delta = Gdx.graphics.getDeltaTime();
-
-        instance.transform.val[14] += delta*4*dir;
-
-        if(Math.abs(instance.transform.val[14]) > 5) {
-            dir *= -1;
-        }
-    }
-	
-	@Override
-	public void dispose () {
-		modelBatch.dispose();
-		model.dispose();
-	}
-	
-	public boolean needsGL20 () {
-		return true;
-	}
-
-	public void resume () {
-	}
-
-	public void resize (int width, int height) {
-	}
-
-	public void pause () {
-	}
-}
\ No newline at end of file
+
+public class FogTest extends GdxTest implements ApplicationListener {
+	public PerspectiveCamera cam;
+	public CameraInputController inputController;
+	public ModelBatch modelBatch;
+	public Model model;
+	public ModelInstance instance;
+	public Environment environment;
+
+	@Override
+	public void create () {
+		modelBatch = new ModelBatch();
+		environment = new Environment();
+		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
+		environment.set(new ColorAttribute(ColorAttribute.Fog, 0.13f, 0.13f, 0.13f, 1f));
+		environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
+
+		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		cam.position.set(30f, 10f, 30f);
+		cam.lookAt(0, 0, 0);
+		cam.near = 0.1f;
+		cam.far = 45f;
+		cam.update();
+
+		ModelBuilder modelBuilder = new ModelBuilder();
+		model = modelBuilder.createBox(5f, 5f, 5f, new Material(ColorAttribute.createDiffuse(Color.GREEN)), Usage.Position
+			| Usage.Normal);
+		instance = new ModelInstance(model);
+
+		Gdx.input.setInputProcessor(new InputMultiplexer(this, inputController = new CameraInputController(cam)));
+	}
+
+	@Override
+	public void render () {
+
+		animate();
+
+		inputController.update();
+
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
+
+		Gdx.gl.glClearColor(0.13f, 0.13f, 0.13f, 1);
+
+		modelBatch.begin(cam);
+		modelBatch.render(instance, environment);
+		modelBatch.end();
+	}
+
+	float delta = 0f, dir = 1;
+
+	private void animate () {
+
+		delta = Gdx.graphics.getDeltaTime();
+
+		instance.transform.val[14] += delta * 4 * dir;
+
+		if (Math.abs(instance.transform.val[14]) > 5) {
+			dir *= -1;
+		}
+	}
+
+	@Override
+	public void dispose () {
+		modelBatch.dispose();
+		model.dispose();
+	}
+
+	public boolean needsGL20 () {
+		return true;
+	}
+
+	public void resume () {
+	}
+
+	public void resize (int width, int height) {
+	}
+
+	public void pause () {
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/LightsTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/LightsTest.java
index 3e464be..5cddfd2 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/LightsTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/LightsTest.java
@@ -12,81 +12,81 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Material;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.environment.DirectionalLight;
-import com.badlogic.gdx.graphics.g3d.environment.PointLight;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.math.collision.BoundingBox;
-import com.badlogic.gdx.utils.Array;
-
-public class LightsTest extends ModelTest {
-	DirectionalLight dirLight;
-	PointLight pointLight;
-	Model lightModel;
-	Renderable pLight;
-	Vector3 center = new Vector3(), transformedCenter = new Vector3(), tmpV = new Vector3();
-	float radius = 1f;
-	
-	@Override
-	public void create () {
-		super.create();
-		environment.clear();
-		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.2f, 0.2f, 0.2f, 1.0f));
-		environment.add(dirLight = new DirectionalLight().set(0.8f, 0.2f, 0.2f, -1f, -2f, -0.5f));
-		environment.add(pointLight = new PointLight().set(0.2f, 0.8f, 0.2f, 0f, 0f, 0f, 100f));
-		
-		ModelBuilder mb = new ModelBuilder();
-		lightModel = mb.createSphere(1, 1, 1, 10, 10, new Material(ColorAttribute.createDiffuse(1, 1, 1, 1)), Usage.Position);
-		lightModel.nodes.get(0).parts.get(0).setRenderable(pLight = new Renderable());
-	}
-	
-	@Override
-	protected void onLoaded () {
-		super.onLoaded();
-		BoundingBox bounds = instances.get(0).calculateBoundingBox(new BoundingBox());
-		center.set(bounds.getCenter());
-		radius = bounds.getDimensions().len() * .5f;
-		pointLight.position.set(0,radius,0).add(transformedCenter.set(center).mul(transform));
-		pointLight.intensity = radius * radius;
-		((ColorAttribute)pLight.material.get(ColorAttribute.Diffuse)).color.set(pointLight.color);
-		final float s = 0.2f * radius;
-		pLight.worldTransform.setToScaling(s, s, s);
-	}
-
-	@Override
-	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
-		final float delta = Gdx.graphics.getDeltaTime();
-		dirLight.direction.rotate(Vector3.X, delta * 45f);
-		dirLight.direction.rotate(Vector3.Y, delta * 25f);
-		dirLight.direction.rotate(Vector3.Z, delta * 33f);
-		
-		pointLight.position.sub(transformedCenter);
-		pointLight.position.rotate(Vector3.X, delta * 50f);
-		pointLight.position.rotate(Vector3.Y, delta * 13f);
-		pointLight.position.rotate(Vector3.Z, delta * 3f);
-		pointLight.position.add(transformedCenter.set(center).mul(transform));
-		
-		pLight.worldTransform.setTranslation(pointLight.position);
-		batch.render(pLight);
-		
-		super.render(batch, instances);
-	}
-	
-	@Override
-	public void dispose () {
-		lightModel.dispose();
-		super.dispose();
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.Material;
+import com.badlogic.gdx.graphics.g3d.Model;
+import com.badlogic.gdx.graphics.g3d.ModelBatch;
+import com.badlogic.gdx.graphics.g3d.ModelInstance;
+import com.badlogic.gdx.graphics.g3d.Renderable;
+import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
+import com.badlogic.gdx.graphics.g3d.environment.DirectionalLight;
+import com.badlogic.gdx.graphics.g3d.environment.PointLight;
+import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
+import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.math.collision.BoundingBox;
+import com.badlogic.gdx.utils.Array;
+
+public class LightsTest extends ModelTest {
+	DirectionalLight dirLight;
+	PointLight pointLight;
+	Model lightModel;
+	Renderable pLight;
+	Vector3 center = new Vector3(), transformedCenter = new Vector3(), tmpV = new Vector3();
+	float radius = 1f;
+
+	@Override
+	public void create () {
+		super.create();
+		environment.clear();
+		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.2f, 0.2f, 0.2f, 1.0f));
+		environment.add(dirLight = new DirectionalLight().set(0.8f, 0.2f, 0.2f, -1f, -2f, -0.5f));
+		environment.add(pointLight = new PointLight().set(0.2f, 0.8f, 0.2f, 0f, 0f, 0f, 100f));
+
+		ModelBuilder mb = new ModelBuilder();
+		lightModel = mb.createSphere(1, 1, 1, 10, 10, new Material(ColorAttribute.createDiffuse(1, 1, 1, 1)), Usage.Position);
+		lightModel.nodes.get(0).parts.get(0).setRenderable(pLight = new Renderable());
+	}
+
+	@Override
+	protected void onLoaded () {
+		super.onLoaded();
+		BoundingBox bounds = instances.get(0).calculateBoundingBox(new BoundingBox());
+		center.set(bounds.getCenter());
+		radius = bounds.getDimensions().len() * .5f;
+		pointLight.position.set(0, radius, 0).add(transformedCenter.set(center).mul(transform));
+		pointLight.intensity = radius * radius;
+		((ColorAttribute)pLight.material.get(ColorAttribute.Diffuse)).color.set(pointLight.color);
+		final float s = 0.2f * radius;
+		pLight.worldTransform.setToScaling(s, s, s);
+	}
+
+	@Override
+	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
+		final float delta = Gdx.graphics.getDeltaTime();
+		dirLight.direction.rotate(Vector3.X, delta * 45f);
+		dirLight.direction.rotate(Vector3.Y, delta * 25f);
+		dirLight.direction.rotate(Vector3.Z, delta * 33f);
+
+		pointLight.position.sub(transformedCenter);
+		pointLight.position.rotate(Vector3.X, delta * 50f);
+		pointLight.position.rotate(Vector3.Y, delta * 13f);
+		pointLight.position.rotate(Vector3.Z, delta * 3f);
+		pointLight.position.add(transformedCenter.set(center).mul(transform));
+
+		pLight.worldTransform.setTranslation(pointLight.position);
+		batch.render(pLight);
+
+		super.render(batch, instances);
+	}
+
+	@Override
+	public void dispose () {
+		lightModel.dispose();
+		super.dispose();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MaterialTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MaterialTest.java
index bb4e24c..fa64798 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MaterialTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MaterialTest.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.tests.g3d;
 
 import com.badlogic.gdx.Gdx;
@@ -35,65 +36,65 @@ import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class MaterialTest extends GdxTest {
-	
+
 	float angleY = 0;
-	
+
 	Model model, backModel;
 	ModelInstance modelInstance;
 	ModelInstance background;
 	ModelBatch modelBatch;
-	
+
 	TextureAttribute textureAttribute;
 	ColorAttribute colorAttribute;
 	BlendingAttribute blendingAttribute;
 
 	Material material;
-	
+
 	Texture texture;
-	
+
 	Camera camera;
 
 	@Override
 	public void create () {
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), true);
-		
+
 		// Create material attributes. Each material can contain x-number of attributes.
 		textureAttribute = new TextureAttribute(TextureAttribute.Diffuse, texture);
 		colorAttribute = new ColorAttribute(ColorAttribute.Diffuse, Color.ORANGE);
 		blendingAttribute = new BlendingAttribute(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA);
-		
-		
+
 		ModelBuilder builder = new ModelBuilder();
 		model = builder.createBox(1, 1, 1, new Material(), Usage.Position | Usage.Normal | Usage.TextureCoordinates);
 		model.manageDisposable(texture);
 		modelInstance = new ModelInstance(model);
 		modelInstance.transform.rotate(Vector3.X, 45);
-		
+
 		material = modelInstance.materials.get(0);
-		
+
 		builder.begin();
-		MeshPartBuilder mpb = builder.part("back", GL20.GL_TRIANGLES, 
-			Usage.Position | Usage.TextureCoordinates, new Material(textureAttribute));
+		MeshPartBuilder mpb = builder.part("back", GL20.GL_TRIANGLES, Usage.Position | Usage.TextureCoordinates, new Material(
+			textureAttribute));
 		mpb.rect(-2, -2, -2, 2, -2, -2, 2, 2, -2, -2, 2, -2, 0, 0, 1);
 		backModel = builder.end();
 		background = new ModelInstance(backModel);
-		
+
 		modelBatch = new ModelBatch();
-		
+
 		camera = new PerspectiveCamera(45, 4, 4);
 		camera.position.set(0, 0, 3);
 		camera.direction.set(0, 0, -1);
 		camera.update();
-		
+
 		Gdx.input.setInputProcessor(this);
 	}
 
 	private float counter = 0.f;
+
 	@Override
 	public void render () {
 		counter = (counter + Gdx.graphics.getDeltaTime()) % 1.f;
 		blendingAttribute.opacity = 0.25f + Math.abs(0.5f - counter);
-		
+
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 
@@ -106,16 +107,16 @@ public class MaterialTest extends GdxTest {
 
 	@Override
 	public boolean touchUp (int screenX, int screenY, int pointer, int button) {
-		
-		if(!material.has(TextureAttribute.Diffuse))
+
+		if (!material.has(TextureAttribute.Diffuse))
 			material.set(textureAttribute);
-		else if(!material.has(ColorAttribute.Diffuse))
+		else if (!material.has(ColorAttribute.Diffuse))
 			material.set(colorAttribute);
-		else if(!material.has(BlendingAttribute.Type))
+		else if (!material.has(BlendingAttribute.Type))
 			material.set(blendingAttribute);
 		else
 			material.clear();
-		
+
 		return super.touchUp(screenX, screenY, pointer, button);
 	}
 
@@ -125,4 +126,4 @@ public class MaterialTest extends GdxTest {
 		backModel.dispose();
 		modelBatch.dispose();
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelLoaderTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelLoaderTest.java
index e1a81fe..2670de8 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelLoaderTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelLoaderTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.assets.AssetManager;
 import com.badlogic.gdx.graphics.GL20;
@@ -26,66 +26,67 @@ import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.tests.utils.GdxTest;
-
-public class ModelLoaderTest extends GdxTest {
-	AssetManager assets;
-	PerspectiveCamera camera;
-	ModelInstance instance;
-	ModelBatch modelBatch;
-	SpriteBatch spriteBatch;
-
-	@Override
-	public void create () {
-		camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		camera.position.set(0, 0, 5);
-		camera.near = 1;
-		camera.far = 100;
-		camera.update();
-		assets = new AssetManager();
-		assets.load("data/g3d/cube.g3dj", Model.class);
-		spriteBatch = new SpriteBatch();
-		modelBatch = new ModelBatch();
-//		assets.getLogger().setLevel(Logger.DEBUG);
-	}
-
-	private void doneLoading() {
-		instance = new ModelInstance(assets.get("data/g3d/cube.g3dj", Model.class));
-	}
-	
-	float counter;
-	@Override
-	public void render () {
-		if ((instance != null) && ((counter += Gdx.graphics.getDeltaTime()) >= 1f)) {
-			counter = 0f;
-			instance = null;
-			assets.unload("data/g3d/cube.g3dj");
-			assets.load("data/g3d/cube.g3dj", Model.class);
-			assets.finishLoading();
-		}
-		
-		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
-		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);
-		
-		if(assets.update()) {
-			doneLoading();
-		}
-		
-		if(instance != null) {
-			modelBatch.begin(camera);
-			modelBatch.render(instance);
-			modelBatch.end();
-			spriteBatch.begin();
-			spriteBatch.draw(assets.get("data/g3d/checkboard.png", Texture.class), 0, 0, 100, 100);
-			spriteBatch.draw(assets.get("data/g3d/Knight.png", Texture.class), 100, 0, 100, 100);
-			spriteBatch.end();
-		}
-	}
-
-	@Override
-	public void dispose () {
-		assets.dispose();
-		modelBatch.dispose();
-		spriteBatch.dispose();
-	}
-}
\ No newline at end of file
+
+public class ModelLoaderTest extends GdxTest {
+	AssetManager assets;
+	PerspectiveCamera camera;
+	ModelInstance instance;
+	ModelBatch modelBatch;
+	SpriteBatch spriteBatch;
+
+	@Override
+	public void create () {
+		camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		camera.position.set(0, 0, 5);
+		camera.near = 1;
+		camera.far = 100;
+		camera.update();
+		assets = new AssetManager();
+		assets.load("data/g3d/cube.g3dj", Model.class);
+		spriteBatch = new SpriteBatch();
+		modelBatch = new ModelBatch();
+// assets.getLogger().setLevel(Logger.DEBUG);
+	}
+
+	private void doneLoading () {
+		instance = new ModelInstance(assets.get("data/g3d/cube.g3dj", Model.class));
+	}
+
+	float counter;
+
+	@Override
+	public void render () {
+		if ((instance != null) && ((counter += Gdx.graphics.getDeltaTime()) >= 1f)) {
+			counter = 0f;
+			instance = null;
+			assets.unload("data/g3d/cube.g3dj");
+			assets.load("data/g3d/cube.g3dj", Model.class);
+			assets.finishLoading();
+		}
+
+		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
+		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);
+
+		if (assets.update()) {
+			doneLoading();
+		}
+
+		if (instance != null) {
+			modelBatch.begin(camera);
+			modelBatch.render(instance);
+			modelBatch.end();
+			spriteBatch.begin();
+			spriteBatch.draw(assets.get("data/g3d/checkboard.png", Texture.class), 0, 0, 100, 100);
+			spriteBatch.draw(assets.get("data/g3d/Knight.png", Texture.class), 100, 0, 100, 100);
+			spriteBatch.end();
+		}
+	}
+
+	@Override
+	public void dispose () {
+		assets.dispose();
+		modelBatch.dispose();
+		spriteBatch.dispose();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelTest.java
index d537482..8af8225 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.g3d.Environment;
@@ -32,103 +32,101 @@ import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.StringBuilder;
-
-public class ModelTest extends BaseG3dHudTest {
-	protected Environment environment;
-	
-	ObjectMap<ModelInstance, AnimationController> animationControllers = new ObjectMap<ModelInstance, AnimationController>(); 
-
-	@Override
-	public void create () {
-		super.create();
-		environment = new Environment();
-		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
-		environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -0.5f, -1.0f, -0.8f));
-		
-		cam.position.set(1,1,1);
-		cam.lookAt(0,0,0);
-		cam.update();
-		showAxes = true;
-		
-		onModelClicked("g3d/teapot.g3db");
-	}
-
-	private final Vector3 tmpV = new Vector3();
-	private final Quaternion tmpQ = new Quaternion();
-	private final BoundingBox bounds = new BoundingBox();
-	@Override
-	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
-		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries())
-			e.value.update(Gdx.graphics.getDeltaTime());
-		batch.render(instances, environment);
-	}
-	
-	@Override
-	protected void getStatus (StringBuilder stringBuilder) {
-		super.getStatus(stringBuilder);
-
-		for (final ModelInstance instance : instances) {
-			if (instance.animations.size > 0) {
-				stringBuilder.append(" press space or menu to switch animation");
-				break;
-			}
-		}
-	}
-	
-	protected String currentlyLoading;
-	@Override
-	protected void onModelClicked(final String name) {
-		if (name == null)
-			return;
-		
-		currentlyLoading = "data/"+name; 
-		assets.load(currentlyLoading, Model.class);
-		loading = true;
-	}
-
-	@Override
-	protected void onLoaded() {
-		if (currentlyLoading == null || currentlyLoading.isEmpty())
-			return;
-		
-		instances.clear();
-		animationControllers.clear();
+
+public class ModelTest extends BaseG3dHudTest {
+	protected Environment environment;
+
+	ObjectMap<ModelInstance, AnimationController> animationControllers = new ObjectMap<ModelInstance, AnimationController>();
+
+	@Override
+	public void create () {
+		super.create();
+		environment = new Environment();
+		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
+		environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -0.5f, -1.0f, -0.8f));
+
+		cam.position.set(1, 1, 1);
+		cam.lookAt(0, 0, 0);
+		cam.update();
+		showAxes = true;
+
+		onModelClicked("g3d/teapot.g3db");
+	}
+
+	private final Vector3 tmpV = new Vector3();
+	private final Quaternion tmpQ = new Quaternion();
+	private final BoundingBox bounds = new BoundingBox();
+
+	@Override
+	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
+		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries())
+			e.value.update(Gdx.graphics.getDeltaTime());
+		batch.render(instances, environment);
+	}
+
+	@Override
+	protected void getStatus (StringBuilder stringBuilder) {
+		super.getStatus(stringBuilder);
+
+		for (final ModelInstance instance : instances) {
+			if (instance.animations.size > 0) {
+				stringBuilder.append(" press space or menu to switch animation");
+				break;
+			}
+		}
+	}
+
+	protected String currentlyLoading;
+
+	@Override
+	protected void onModelClicked (final String name) {
+		if (name == null) return;
+
+		currentlyLoading = "data/" + name;
+		assets.load(currentlyLoading, Model.class);
+		loading = true;
+	}
+
+	@Override
+	protected void onLoaded () {
+		if (currentlyLoading == null || currentlyLoading.isEmpty()) return;
+
+		instances.clear();
+		animationControllers.clear();
 		final ModelInstance instance = new ModelInstance(assets.get(currentlyLoading, Model.class));
-		instance.transform = transform;
-		instances.add(instance);
-		if (instance.animations.size > 0)
-			animationControllers.put(instance, new AnimationController(instance));
-		currentlyLoading = null;
-		
-		instance.calculateBoundingBox(bounds);
-		cam.position.set(1,1,1).nor().scl(bounds.getDimensions().len() * 0.75f + bounds.getCenter().len());
-		cam.up.set(0,1,0);
-		cam.lookAt(0,0,0);
-		cam.far = 50f + bounds.getDimensions().len() * 2.0f;
-		cam.update();
-	}
-	
-	protected void switchAnimation() {
-		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries()) {
-			int animIndex = 0;
-			if (e.value.current != null) {
-				for (int i = 0; i < e.key.animations.size; i++) {
-					final Animation animation = e.key.animations.get(i);
-					if (e.value.current.animation == animation) {
-						animIndex = i;
-						break;
-					}
-				}
-			}
-			animIndex = (animIndex + 1) % (e.key.animations.size + 1);
-			e.value.animate((animIndex == e.key.animations.size) ? null : e.key.animations.get(animIndex).id, -1, 1f, null, 0.2f);
-		}
-	}
-	
-	@Override
-	public boolean keyUp (int keycode) {
-		if (keycode == Keys.SPACE || keycode == Keys.MENU)
-			switchAnimation();
-		return super.keyUp(keycode);
-	}
-}
\ No newline at end of file
+		instance.transform = transform;
+		instances.add(instance);
+		if (instance.animations.size > 0) animationControllers.put(instance, new AnimationController(instance));
+		currentlyLoading = null;
+
+		instance.calculateBoundingBox(bounds);
+		cam.position.set(1, 1, 1).nor().scl(bounds.getDimensions().len() * 0.75f + bounds.getCenter().len());
+		cam.up.set(0, 1, 0);
+		cam.lookAt(0, 0, 0);
+		cam.far = 50f + bounds.getDimensions().len() * 2.0f;
+		cam.update();
+	}
+
+	protected void switchAnimation () {
+		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries()) {
+			int animIndex = 0;
+			if (e.value.current != null) {
+				for (int i = 0; i < e.key.animations.size; i++) {
+					final Animation animation = e.key.animations.get(i);
+					if (e.value.current.animation == animation) {
+						animIndex = i;
+						break;
+					}
+				}
+			}
+			animIndex = (animIndex + 1) % (e.key.animations.size + 1);
+			e.value.animate((animIndex == e.key.animations.size) ? null : e.key.animations.get(animIndex).id, -1, 1f, null, 0.2f);
+		}
+	}
+
+	@Override
+	public boolean keyUp (int keycode) {
+		if (keycode == Keys.SPACE || keycode == Keys.MENU) switchAnimation();
+		return super.keyUp(keycode);
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderCollectionTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderCollectionTest.java
index 3254414..d52d4dd 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderCollectionTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderCollectionTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.Application.ApplicationType;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
@@ -47,334 +47,317 @@ import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.StringBuilder;
-
-public class ShaderCollectionTest extends BaseG3dHudTest {
-	/** Desktop only: Set this to an absolute path to load the shader files from an alternative location. */
-	final static String hotLoadFolder = null;
-	/** Desktop only: Set this to an absolute path to save the generated shader files. */
-	final static String tempFolder = "D:\\temp\\shaders"; 
-	
-	protected  String shaders[] = new String[] {
-		"<default>", "depth", "gouraud", "phong", "normal", "fur", "cubemap", "reflect", "test"
-	};
-	
-	protected String environments[] = new String[] {
-		"<none>", "debug", "environment_01", "environment_02" 
-	};
-	
-	protected String materials[] = new String[] {
-		"diffuse_green", "badlogic_normal", "brick01", "brick02", "brick03", "chesterfield", 
-		"cloth01", "cloth02", "elephant01", "elephant02", "fur01", "grass01", "metal01", "metal02",
-		"mirror01", "mirror02", "moon01", "plastic01", "stone01", "stone02", "wood01", "wood02"
-	};
-	
-	public static class TestShaderProvider extends DefaultShaderProvider {
-		public boolean error = false;
-		public String name = "default";
-		
-		public void clear() {
-			for (final Shader shader : shaders)
-				shader.dispose();
-			shaders.clear();
-		}
-		
-		public boolean revert() {
-			if (config.vertexShader == null || config.fragmentShader == null)
-				return false;
-			config.vertexShader = null;
-			config.fragmentShader = null;
-			clear();
-			return true;
-		}
-		
-		@Override
-		public Shader getShader (Renderable renderable) {
-			try {
-				return super.getShader(renderable);
-			} catch(Throwable e) {
-				if (tempFolder != null && Gdx.app.getType() == ApplicationType.Desktop)
-					Gdx.files.absolute(tempFolder).child(name+".log.txt").writeString(e.getMessage(), false);
-				if (!revert()) {
-					Gdx.app.error("ShaderCollectionTest", e.getMessage());
-					throw new GdxRuntimeException("Error creating shader, cannot revert to default shader", e);
-				}
-				error = true;
-				Gdx.app.error("ShaderTest", "Could not create shader, reverted to default shader.", e);
-				return super.getShader(renderable);
-			}
-		}
-		
-		@Override
-		protected Shader createShader (Renderable renderable) {
-			if (config.vertexShader != null && config.fragmentShader != null && tempFolder != null && Gdx.app.getType() == ApplicationType.Desktop) {
-				String prefix = DefaultShader.createPrefix(renderable, config);
-				Gdx.files.absolute(tempFolder).child(name+".vertex.glsl").writeString(prefix + config.vertexShader, false);
-				Gdx.files.absolute(tempFolder).child(name+".fragment.glsl").writeString(prefix + config.fragmentShader, false);
-			}
-			BaseShader result = new MultiPassShader(renderable, config);
-			if (tempFolder != null && Gdx.app.getType() == ApplicationType.Desktop)
-				Gdx.files.absolute(tempFolder).child(name+".log.txt").writeString(result.program.getLog(), false);
-			return result;
-		}
-	}
-	
-	protected Environment lights;
-	protected TestShaderProvider shaderProvider;
-	protected FileHandle shaderRoot;
-	protected ModelBatch shaderBatch;
-	protected CollapsableWindow shadersWindow, materialsWindow, environmentsWindow;
-	protected ObjectMap<ModelInstance, AnimationController> animationControllers = new ObjectMap<ModelInstance, AnimationController>();
-	protected String currentModel = null;
-	protected String currentMaterial = null;
-	protected boolean loadingMaterial = false;
-	Cubemap cubemap;
-
-	@Override
-	public void create () {
-		super.create();
-		lights = new Environment();
-		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.1f, 0.1f, 0.1f, 1.f));
-		lights.add(
-			new DirectionalLight().set(0.8f, 0.8f, 0.8f, -0.5f, -1.0f, -0.8f)
-		);
-		
-		shaderProvider = new TestShaderProvider();
-		shaderBatch = new ModelBatch(shaderProvider);
-		
-		cam.position.set(1,1,1);
-		cam.lookAt(0,0,0);
-		cam.update();
-		showAxes = true;
-		
-		onModelClicked("g3d/shapes/teapot.g3dj");
-		
-		shaderRoot = (hotLoadFolder != null && Gdx.app.getType() == ApplicationType.Desktop) ? 
-			Gdx.files.absolute(hotLoadFolder) : Gdx.files.internal("data/g3d/shaders");
-	}
-	
-	@Override
-	public void dispose () {
-		shaderBatch.dispose();
-		shaderBatch = null;
-		shaderProvider = null;
-		if (cubemap != null)
-			cubemap.dispose();
-		cubemap = null;
-		super.dispose();
-	}
-	
-	public void setEnvironment(String name) {
-		if (name == null)
-			return;
-		if (cubemap != null) {
-			cubemap.dispose();
-			cubemap = null;
-		}
-		if (name.equals("<none>")) {
-			if (lights.has(CubemapAttribute.EnvironmentMap)) {
-				lights.remove(CubemapAttribute.EnvironmentMap);
-				shaderProvider.clear();
-			}
-		}
-		else {
-			FileHandle root = Gdx.files.internal("data/g3d/environment");
-			cubemap = new Cubemap(root.child(name+"_PX.png"), null,//root.child(name+"_NX.png"),
-				root.child(name+"_PY.png"), root.child(name+"_NY.png"),
-				root.child(name+"_PZ.png"), root.child(name+"_NZ.png"), 
-				false); // FIXME mipmapping on desktop
-			cubemap.load(CubemapSide.NegativeX, root.child(name+"_NX.png"));
-			if (!lights.has(CubemapAttribute.EnvironmentMap))
-				shaderProvider.clear();
-			lights.set(new CubemapAttribute(CubemapAttribute.EnvironmentMap, cubemap));
-		}
-	}
-	
-	public void setMaterial(String name) {
-		if (name == null)
-			return;
-		if (currentlyLoading != null) {
-			Gdx.app.error("ModelTest", "Wait for the current model/material to be loaded.");
-			return;
-		}
-		
-		currentlyLoading = "data/g3d/materials/"+name+".g3dj";
-		loadingMaterial = true;
-		if (!name.equals(currentMaterial))
-			assets.load(currentlyLoading, Model.class);
-		loading = true;
-	}
-	
-	public void setShader(String name) {
-		shaderProvider.error = false;
-		if (name.equals("<default>")) {
-			shaderProvider.config.vertexShader = null;
-			shaderProvider.config.fragmentShader = null;
-			shaderProvider.name = "default";
-		} else {
-			ShaderLoader loader = new ShaderLoader(shaderRoot);
-			shaderProvider.config.vertexShader = loader.load(name+".glsl:VS");
-			shaderProvider.config.fragmentShader = loader.load(name+".glsl:FS");
-			shaderProvider.name = name;
-		}
-		shaderProvider.clear();
-	}
-
-	private final Vector3 tmpV = new Vector3();
-	private final Quaternion tmpQ = new Quaternion();
-	private final BoundingBox bounds = new BoundingBox();
-	@Override
-	protected void render (ModelBatch batch, Array<ModelInstance> instances) {}
-	
-	final Vector3 dirLightRotAxis = new Vector3(-1,-1,-1).nor();
-	@Override
-	public void render (Array<ModelInstance> instances) {
-		lights.directionalLights.get(0).direction.rotate(dirLightRotAxis, Gdx.graphics.getDeltaTime() * 45f);
-
-		super.render(null);
-		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries())
-			e.value.update(Gdx.graphics.getDeltaTime());
-		shaderBatch.begin(cam);
-		shaderBatch.render(instances, lights);
-		shaderBatch.end();
-	}
-	
-	@Override
-	protected void getStatus (StringBuilder stringBuilder) {
-		super.getStatus(stringBuilder);
-
-		if (shaderProvider.error)
-			stringBuilder.append(" ERROR CREATING SHADER, REVERTED TO DEFAULT");
-		else {
-			for (final ModelInstance instance : instances) {
-				if (instance.animations.size > 0) {
-					stringBuilder.append(" press space or menu to switch animation");
-					break;
-				}
-			}
-		}
-	}
-	
-	protected String currentlyLoading;
-	@Override
-	protected void onModelClicked(final String name) {
-		if (name == null)
-			return;
-		if (currentlyLoading != null) {
-			Gdx.app.error("ModelTest", "Wait for the current model/material to be loaded.");
-			return;
-		}
-		
-		currentlyLoading = "data/"+name; 
-		loadingMaterial = false;
-		if (!name.equals(currentModel))
-			assets.load(currentlyLoading, Model.class);
-		loading = true;
-	}
-	
-	@Override
-	protected void onLoaded() {
-		if (currentlyLoading == null || currentlyLoading.isEmpty())
-			return;
-		
-		if (loadingMaterial) {
-			loadingMaterial = false;
-			if (currentMaterial != null && !currentMaterial.equals(currentlyLoading))
-					assets.unload(currentMaterial);
-			currentMaterial = currentlyLoading;
-			currentlyLoading = null;
-			ModelInstance instance = instances.get(0);
-			if (instance != null) {
-				instance.materials.get(0).clear();
-				instance.materials.get(0).set(assets.get(currentMaterial, Model.class).materials.get(0));
-			}
-		} else {
-			if (currentModel != null && !currentModel.equals(currentlyLoading))
-				assets.unload(currentModel);
-			currentModel = currentlyLoading; 
-			currentlyLoading = null;
-			
-			instances.clear();
-			animationControllers.clear();
-			final ModelInstance instance = new ModelInstance(assets.get(currentModel, Model.class), transform);
-			instances.add(instance);
-			if (instance.animations.size > 0)
-				animationControllers.put(instance, new AnimationController(instance));
-			
-			instance.calculateBoundingBox(bounds);
-			cam.position.set(1,1,1).nor().scl(bounds.getDimensions().len() * 0.75f).add(bounds.getCenter());
-			cam.up.set(0,1,0);
-			cam.lookAt(inputController.target.set(bounds.getCenter()));
-			cam.far = Math.max(100f, bounds.getDimensions().len() * 2.0f);
-			cam.update();
-			moveRadius = bounds.getDimensions().len() * 0.25f;
-		}
-	}
-
-	@Override
-	protected void createHUD () {
-		super.createHUD();
-
+
+public class ShaderCollectionTest extends BaseG3dHudTest {
+	/** Desktop only: Set this to an absolute path to load the shader files from an alternative location. */
+	final static String hotLoadFolder = null;
+	/** Desktop only: Set this to an absolute path to save the generated shader files. */
+	final static String tempFolder = "D:\\temp\\shaders";
+
+	protected String shaders[] = new String[] {"<default>", "depth", "gouraud", "phong", "normal", "fur", "cubemap", "reflect",
+		"test"};
+
+	protected String environments[] = new String[] {"<none>", "debug", "environment_01", "environment_02"};
+
+	protected String materials[] = new String[] {"diffuse_green", "badlogic_normal", "brick01", "brick02", "brick03",
+		"chesterfield", "cloth01", "cloth02", "elephant01", "elephant02", "fur01", "grass01", "metal01", "metal02", "mirror01",
+		"mirror02", "moon01", "plastic01", "stone01", "stone02", "wood01", "wood02"};
+
+	public static class TestShaderProvider extends DefaultShaderProvider {
+		public boolean error = false;
+		public String name = "default";
+
+		public void clear () {
+			for (final Shader shader : shaders)
+				shader.dispose();
+			shaders.clear();
+		}
+
+		public boolean revert () {
+			if (config.vertexShader == null || config.fragmentShader == null) return false;
+			config.vertexShader = null;
+			config.fragmentShader = null;
+			clear();
+			return true;
+		}
+
+		@Override
+		public Shader getShader (Renderable renderable) {
+			try {
+				return super.getShader(renderable);
+			} catch (Throwable e) {
+				if (tempFolder != null && Gdx.app.getType() == ApplicationType.Desktop)
+					Gdx.files.absolute(tempFolder).child(name + ".log.txt").writeString(e.getMessage(), false);
+				if (!revert()) {
+					Gdx.app.error("ShaderCollectionTest", e.getMessage());
+					throw new GdxRuntimeException("Error creating shader, cannot revert to default shader", e);
+				}
+				error = true;
+				Gdx.app.error("ShaderTest", "Could not create shader, reverted to default shader.", e);
+				return super.getShader(renderable);
+			}
+		}
+
+		@Override
+		protected Shader createShader (Renderable renderable) {
+			if (config.vertexShader != null && config.fragmentShader != null && tempFolder != null
+				&& Gdx.app.getType() == ApplicationType.Desktop) {
+				String prefix = DefaultShader.createPrefix(renderable, config);
+				Gdx.files.absolute(tempFolder).child(name + ".vertex.glsl").writeString(prefix + config.vertexShader, false);
+				Gdx.files.absolute(tempFolder).child(name + ".fragment.glsl").writeString(prefix + config.fragmentShader, false);
+			}
+			BaseShader result = new MultiPassShader(renderable, config);
+			if (tempFolder != null && Gdx.app.getType() == ApplicationType.Desktop)
+				Gdx.files.absolute(tempFolder).child(name + ".log.txt").writeString(result.program.getLog(), false);
+			return result;
+		}
+	}
+
+	protected Environment lights;
+	protected TestShaderProvider shaderProvider;
+	protected FileHandle shaderRoot;
+	protected ModelBatch shaderBatch;
+	protected CollapsableWindow shadersWindow, materialsWindow, environmentsWindow;
+	protected ObjectMap<ModelInstance, AnimationController> animationControllers = new ObjectMap<ModelInstance, AnimationController>();
+	protected String currentModel = null;
+	protected String currentMaterial = null;
+	protected boolean loadingMaterial = false;
+	Cubemap cubemap;
+
+	@Override
+	public void create () {
+		super.create();
+		lights = new Environment();
+		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.1f, 0.1f, 0.1f, 1.f));
+		lights.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -0.5f, -1.0f, -0.8f));
+
+		shaderProvider = new TestShaderProvider();
+		shaderBatch = new ModelBatch(shaderProvider);
+
+		cam.position.set(1, 1, 1);
+		cam.lookAt(0, 0, 0);
+		cam.update();
+		showAxes = true;
+
+		onModelClicked("g3d/shapes/teapot.g3dj");
+
+		shaderRoot = (hotLoadFolder != null && Gdx.app.getType() == ApplicationType.Desktop) ? Gdx.files.absolute(hotLoadFolder)
+			: Gdx.files.internal("data/g3d/shaders");
+	}
+
+	@Override
+	public void dispose () {
+		shaderBatch.dispose();
+		shaderBatch = null;
+		shaderProvider = null;
+		if (cubemap != null) cubemap.dispose();
+		cubemap = null;
+		super.dispose();
+	}
+
+	public void setEnvironment (String name) {
+		if (name == null) return;
+		if (cubemap != null) {
+			cubemap.dispose();
+			cubemap = null;
+		}
+		if (name.equals("<none>")) {
+			if (lights.has(CubemapAttribute.EnvironmentMap)) {
+				lights.remove(CubemapAttribute.EnvironmentMap);
+				shaderProvider.clear();
+			}
+		} else {
+			FileHandle root = Gdx.files.internal("data/g3d/environment");
+			cubemap = new Cubemap(root.child(name + "_PX.png"), null,// root.child(name+"_NX.png"),
+				root.child(name + "_PY.png"), root.child(name + "_NY.png"), root.child(name + "_PZ.png"),
+				root.child(name + "_NZ.png"), false); // FIXME mipmapping on desktop
+			cubemap.load(CubemapSide.NegativeX, root.child(name + "_NX.png"));
+			if (!lights.has(CubemapAttribute.EnvironmentMap)) shaderProvider.clear();
+			lights.set(new CubemapAttribute(CubemapAttribute.EnvironmentMap, cubemap));
+		}
+	}
+
+	public void setMaterial (String name) {
+		if (name == null) return;
+		if (currentlyLoading != null) {
+			Gdx.app.error("ModelTest", "Wait for the current model/material to be loaded.");
+			return;
+		}
+
+		currentlyLoading = "data/g3d/materials/" + name + ".g3dj";
+		loadingMaterial = true;
+		if (!name.equals(currentMaterial)) assets.load(currentlyLoading, Model.class);
+		loading = true;
+	}
+
+	public void setShader (String name) {
+		shaderProvider.error = false;
+		if (name.equals("<default>")) {
+			shaderProvider.config.vertexShader = null;
+			shaderProvider.config.fragmentShader = null;
+			shaderProvider.name = "default";
+		} else {
+			ShaderLoader loader = new ShaderLoader(shaderRoot);
+			shaderProvider.config.vertexShader = loader.load(name + ".glsl:VS");
+			shaderProvider.config.fragmentShader = loader.load(name + ".glsl:FS");
+			shaderProvider.name = name;
+		}
+		shaderProvider.clear();
+	}
+
+	private final Vector3 tmpV = new Vector3();
+	private final Quaternion tmpQ = new Quaternion();
+	private final BoundingBox bounds = new BoundingBox();
+
+	@Override
+	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
+	}
+
+	final Vector3 dirLightRotAxis = new Vector3(-1, -1, -1).nor();
+
+	@Override
+	public void render (Array<ModelInstance> instances) {
+		lights.directionalLights.get(0).direction.rotate(dirLightRotAxis, Gdx.graphics.getDeltaTime() * 45f);
+
+		super.render(null);
+		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries())
+			e.value.update(Gdx.graphics.getDeltaTime());
+		shaderBatch.begin(cam);
+		shaderBatch.render(instances, lights);
+		shaderBatch.end();
+	}
+
+	@Override
+	protected void getStatus (StringBuilder stringBuilder) {
+		super.getStatus(stringBuilder);
+
+		if (shaderProvider.error)
+			stringBuilder.append(" ERROR CREATING SHADER, REVERTED TO DEFAULT");
+		else {
+			for (final ModelInstance instance : instances) {
+				if (instance.animations.size > 0) {
+					stringBuilder.append(" press space or menu to switch animation");
+					break;
+				}
+			}
+		}
+	}
+
+	protected String currentlyLoading;
+
+	@Override
+	protected void onModelClicked (final String name) {
+		if (name == null) return;
+		if (currentlyLoading != null) {
+			Gdx.app.error("ModelTest", "Wait for the current model/material to be loaded.");
+			return;
+		}
+
+		currentlyLoading = "data/" + name;
+		loadingMaterial = false;
+		if (!name.equals(currentModel)) assets.load(currentlyLoading, Model.class);
+		loading = true;
+	}
+
+	@Override
+	protected void onLoaded () {
+		if (currentlyLoading == null || currentlyLoading.isEmpty()) return;
+
+		if (loadingMaterial) {
+			loadingMaterial = false;
+			if (currentMaterial != null && !currentMaterial.equals(currentlyLoading)) assets.unload(currentMaterial);
+			currentMaterial = currentlyLoading;
+			currentlyLoading = null;
+			ModelInstance instance = instances.get(0);
+			if (instance != null) {
+				instance.materials.get(0).clear();
+				instance.materials.get(0).set(assets.get(currentMaterial, Model.class).materials.get(0));
+			}
+		} else {
+			if (currentModel != null && !currentModel.equals(currentlyLoading)) assets.unload(currentModel);
+			currentModel = currentlyLoading;
+			currentlyLoading = null;
+
+			instances.clear();
+			animationControllers.clear();
+			final ModelInstance instance = new ModelInstance(assets.get(currentModel, Model.class), transform);
+			instances.add(instance);
+			if (instance.animations.size > 0) animationControllers.put(instance, new AnimationController(instance));
+
+			instance.calculateBoundingBox(bounds);
+			cam.position.set(1, 1, 1).nor().scl(bounds.getDimensions().len() * 0.75f).add(bounds.getCenter());
+			cam.up.set(0, 1, 0);
+			cam.lookAt(inputController.target.set(bounds.getCenter()));
+			cam.far = Math.max(100f, bounds.getDimensions().len() * 2.0f);
+			cam.update();
+			moveRadius = bounds.getDimensions().len() * 0.25f;
+		}
+	}
+
+	@Override
+	protected void createHUD () {
+		super.createHUD();
+
 		final List<String> shadersList = new List(skin);
-		shadersList.setItems(shaders);
-		shadersList.addListener(new ClickListener() {
-			@Override
-			public void clicked (InputEvent event, float x, float y) {
-				if (!shadersWindow.isCollapsed() && getTapCount() == 2) {
-					setShader(shadersList.getSelected());
-					shadersWindow.collapse();
-				}
-			}
-		});
-		shadersWindow = addListWindow("Shaders", shadersList, -1, -1);
-		
+		shadersList.setItems(shaders);
+		shadersList.addListener(new ClickListener() {
+			@Override
+			public void clicked (InputEvent event, float x, float y) {
+				if (!shadersWindow.isCollapsed() && getTapCount() == 2) {
+					setShader(shadersList.getSelected());
+					shadersWindow.collapse();
+				}
+			}
+		});
+		shadersWindow = addListWindow("Shaders", shadersList, -1, -1);
+
 		final List<String> materialsList = new List(skin);
-		materialsList.setItems(materials);
-		materialsList.addListener(new ClickListener() {
-			@Override
-			public void clicked (InputEvent event, float x, float y) {
-				if (!materialsWindow.isCollapsed() && getTapCount() == 2) {
-					setMaterial(materialsList.getSelected());
-					materialsWindow.collapse();
-				}
-			}
-		});
-		materialsWindow = addListWindow("Materials", materialsList, modelsWindow.getWidth(), -1);
-		
+		materialsList.setItems(materials);
+		materialsList.addListener(new ClickListener() {
+			@Override
+			public void clicked (InputEvent event, float x, float y) {
+				if (!materialsWindow.isCollapsed() && getTapCount() == 2) {
+					setMaterial(materialsList.getSelected());
+					materialsWindow.collapse();
+				}
+			}
+		});
+		materialsWindow = addListWindow("Materials", materialsList, modelsWindow.getWidth(), -1);
+
 		final List<String> environmentsList = new List(skin);
-		environmentsList.setItems(environments);
-		environmentsList.addListener(new ClickListener() {
-			@Override
-			public void clicked (InputEvent event, float x, float y) {
-				if (!environmentsWindow.isCollapsed() && getTapCount() == 2) {
-					setEnvironment(environmentsList.getSelected());
-					environmentsWindow.collapse();
-				}
-			}
-		});
-		environmentsWindow = addListWindow("Environments", environmentsList, materialsWindow.getRight(), -1);
-	}
-	
-	protected void switchAnimation() {
-		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries()) {
-			int animIndex = 0;
-			if (e.value.current != null) {
-				for (int i = 0; i < e.key.animations.size; i++) {
-					final Animation animation = e.key.animations.get(i);
-					if (e.value.current.animation == animation) {
-						animIndex = i;
-						break;
-					}
-				}
-			}
-			animIndex = (animIndex + 1) % e.key.animations.size;
-			e.value.animate(e.key.animations.get(animIndex).id, -1, 1f, null, 0.2f);
-		}
-	}
-	
-	@Override
-	public boolean keyUp (int keycode) {
-		if (keycode == Keys.SPACE || keycode == Keys.MENU)
-			switchAnimation();
-		return super.keyUp(keycode);
-	}
-}
\ No newline at end of file
+		environmentsList.setItems(environments);
+		environmentsList.addListener(new ClickListener() {
+			@Override
+			public void clicked (InputEvent event, float x, float y) {
+				if (!environmentsWindow.isCollapsed() && getTapCount() == 2) {
+					setEnvironment(environmentsList.getSelected());
+					environmentsWindow.collapse();
+				}
+			}
+		});
+		environmentsWindow = addListWindow("Environments", environmentsList, materialsWindow.getRight(), -1);
+	}
+
+	protected void switchAnimation () {
+		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries()) {
+			int animIndex = 0;
+			if (e.value.current != null) {
+				for (int i = 0; i < e.key.animations.size; i++) {
+					final Animation animation = e.key.animations.get(i);
+					if (e.value.current.animation == animation) {
+						animIndex = i;
+						break;
+					}
+				}
+			}
+			animIndex = (animIndex + 1) % e.key.animations.size;
+			e.value.animate(e.key.animations.get(animIndex).id, -1, 1f, null, 0.2f);
+		}
+	}
+
+	@Override
+	public boolean keyUp (int keycode) {
+		if (keycode == Keys.SPACE || keycode == Keys.MENU) switchAnimation();
+		return super.keyUp(keycode);
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderLoader.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderLoader.java
index 5467a03..da4ab97 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderLoader.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderLoader.java
@@ -12,119 +12,117 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.util.Scanner;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.ObjectMap;
-
-public class ShaderLoader {
-	public FileHandle root;
-	
-	public ObjectMap<String, ObjectMap<String, String>> snippets = new ObjectMap<String, ObjectMap<String, String>>();
-	private Array<String> includes = new Array<String>();
-	
-	public ShaderLoader(FileHandle root) {
-		this.root = root;
-	}
-	
-	public ShaderProgram load(String vertex, String fragment) {
-		StringBuilder out = new StringBuilder();
-		load(out, vertex);
-		vertex = out.toString();
-		includes.clear();
-		out.setLength(0);
-		load(out, fragment);
-		fragment = out.toString();
-		includes.clear();
-		return new ShaderProgram(vertex, fragment);
-	}
-	
-	public String load(final String name) {
-		StringBuilder out = new StringBuilder();
-		load(out, name);
-		includes.clear();
-		return out.toString();
-	}
-	
-	protected void load(final StringBuilder out, final String name) {
-		final int idx = name.lastIndexOf(':');
-		final String fileName = idx < 0 ? name : name.substring(0, idx);
-		final String snipName = idx < 0 || (idx >= name.length() - 1) ? "" : name.substring(idx+1);
-		ObjectMap<String, String> snips = snippets.get(fileName, null);
-		if (snips == null) {
-			snips = parse(root.child(fileName));
-			snippets.put(fileName, snips);
-		}
-		String result = snips.get(snipName, null);
-		if (result == null)
-			throw new GdxRuntimeException("No snippet ["+snipName+"] in file "+root.child(fileName).path());
-		parse(out, fileName, result);
-	}
-	
-	protected void parse(final StringBuilder out, final String currentFile, final String code) {
-		String[] lines = code.split("\n");
-		int idx, jdx;
-		for (final String line : lines) {
-			if (((idx = line.indexOf("#include")) == 0) && ((idx = line.indexOf("\"", idx)) > 0) && ((jdx = line.indexOf("\"", ++idx)) > idx)) {
-				String name = line.substring(idx, jdx);
-				if (name.length() > 0) {
-					if (name.charAt(0) == ':')
-						name = currentFile + name;
-					if (!includes.contains(name, false)) {
-						includes.add(name);
-						load(out, name);
-					}
-				}
-			} else
-				out.append(line.trim()).append("\r\n");
-		}
-	}
-	
-	final static StringBuilder stringBuilder = new StringBuilder();
-	protected ObjectMap<String, String> parse(final FileHandle file) {
-		ObjectMap<String, String> result = new ObjectMap<String, String>();
-		BufferedReader reader = file.reader(1024);
-		String line;
-		String snipName = "";
-		stringBuilder.setLength(0);
-		int idx;
-		try {
-			while((line = reader.readLine()) != null) {
-				if (line.length() > 3 && line.charAt(0) == '[' && (idx = line.indexOf(']')) > 1) {
-					if (snipName.length() > 0 || stringBuilder.length() > 0)
-						result.put(snipName, stringBuilder.toString());
-					stringBuilder.setLength(0);
-					snipName = line.substring(1, idx);
-				} else
-					stringBuilder.append(line.trim()).append("\r\n");
-			}
-		} catch (IOException e) {
-			throw new GdxRuntimeException(e);
-		}
-		if (snipName.length() > 0 || stringBuilder.length() > 0)
-			result.put(snipName, stringBuilder.toString());
-		return result;
-	}
-	
-	@Override
-	public String toString () {
-		stringBuilder.setLength(0);
-		for (final ObjectMap.Entry<String, ObjectMap<String, String>> entry : snippets.entries()) {
-			stringBuilder.append(entry.key).append(": {");
-			for (final String snipname : entry.value.keys())
-				stringBuilder.append(snipname).append(", ");
-			stringBuilder.append("}\n");
-		}
-		return stringBuilder.toString();
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.util.Scanner;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.ObjectMap;
+
+public class ShaderLoader {
+	public FileHandle root;
+
+	public ObjectMap<String, ObjectMap<String, String>> snippets = new ObjectMap<String, ObjectMap<String, String>>();
+	private Array<String> includes = new Array<String>();
+
+	public ShaderLoader (FileHandle root) {
+		this.root = root;
+	}
+
+	public ShaderProgram load (String vertex, String fragment) {
+		StringBuilder out = new StringBuilder();
+		load(out, vertex);
+		vertex = out.toString();
+		includes.clear();
+		out.setLength(0);
+		load(out, fragment);
+		fragment = out.toString();
+		includes.clear();
+		return new ShaderProgram(vertex, fragment);
+	}
+
+	public String load (final String name) {
+		StringBuilder out = new StringBuilder();
+		load(out, name);
+		includes.clear();
+		return out.toString();
+	}
+
+	protected void load (final StringBuilder out, final String name) {
+		final int idx = name.lastIndexOf(':');
+		final String fileName = idx < 0 ? name : name.substring(0, idx);
+		final String snipName = idx < 0 || (idx >= name.length() - 1) ? "" : name.substring(idx + 1);
+		ObjectMap<String, String> snips = snippets.get(fileName, null);
+		if (snips == null) {
+			snips = parse(root.child(fileName));
+			snippets.put(fileName, snips);
+		}
+		String result = snips.get(snipName, null);
+		if (result == null) throw new GdxRuntimeException("No snippet [" + snipName + "] in file " + root.child(fileName).path());
+		parse(out, fileName, result);
+	}
+
+	protected void parse (final StringBuilder out, final String currentFile, final String code) {
+		String[] lines = code.split("\n");
+		int idx, jdx;
+		for (final String line : lines) {
+			if (((idx = line.indexOf("#include")) == 0) && ((idx = line.indexOf("\"", idx)) > 0)
+				&& ((jdx = line.indexOf("\"", ++idx)) > idx)) {
+				String name = line.substring(idx, jdx);
+				if (name.length() > 0) {
+					if (name.charAt(0) == ':') name = currentFile + name;
+					if (!includes.contains(name, false)) {
+						includes.add(name);
+						load(out, name);
+					}
+				}
+			} else
+				out.append(line.trim()).append("\r\n");
+		}
+	}
+
+	final static StringBuilder stringBuilder = new StringBuilder();
+
+	protected ObjectMap<String, String> parse (final FileHandle file) {
+		ObjectMap<String, String> result = new ObjectMap<String, String>();
+		BufferedReader reader = file.reader(1024);
+		String line;
+		String snipName = "";
+		stringBuilder.setLength(0);
+		int idx;
+		try {
+			while ((line = reader.readLine()) != null) {
+				if (line.length() > 3 && line.charAt(0) == '[' && (idx = line.indexOf(']')) > 1) {
+					if (snipName.length() > 0 || stringBuilder.length() > 0) result.put(snipName, stringBuilder.toString());
+					stringBuilder.setLength(0);
+					snipName = line.substring(1, idx);
+				} else
+					stringBuilder.append(line.trim()).append("\r\n");
+			}
+		} catch (IOException e) {
+			throw new GdxRuntimeException(e);
+		}
+		if (snipName.length() > 0 || stringBuilder.length() > 0) result.put(snipName, stringBuilder.toString());
+		return result;
+	}
+
+	@Override
+	public String toString () {
+		stringBuilder.setLength(0);
+		for (final ObjectMap.Entry<String, ObjectMap<String, String>> entry : snippets.entries()) {
+			stringBuilder.append(entry.key).append(": {");
+			for (final String snipname : entry.value.keys())
+				stringBuilder.append(snipname).append(", ");
+			stringBuilder.append("}\n");
+		}
+		return stringBuilder.toString();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderTest.java
index afeb79c..898e6e5 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.GL20;
@@ -36,157 +36,147 @@ import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.GdxRuntimeException;
-
-public class ShaderTest extends GdxTest {
-	public static class TestAttribute extends Attribute {
-		public final static String Alias = "Test";
-		public final static long ID = register(Alias);
-		
-		public float value;
-		
-		protected TestAttribute (final float value) {
-			super(ID);
-			this.value = value;
-		}
-
-		@Override
-		public Attribute copy () {
-			return new TestAttribute(value);
-		}
-
-		@Override
-		protected boolean equals (Attribute other) {
-			return ((TestAttribute)other).value == value;
-		}
-	}
-	
-	public static class TestShader extends BaseShader {
-		public final static String vertexShader = 
-			"attribute vec3 a_position;\n"+
-			"uniform mat4 u_projTrans;\n"+
-			"uniform mat4 u_worldTrans;\n"+
-			"uniform float u_test;\n"+
-			"varying float v_test;\n"+
-			"void main() {\n"+
-			"	v_test = u_test;\n"+
-			"	gl_Position = u_projTrans * u_worldTrans * vec4(a_position, 1.0);\n"+
-			"}\n";
-		public final static String fragmentShader = 
-			"varying float v_test;\n" +
-			"void main() {\n" +
-			"	gl_FragColor.rgb = vec3(v_test);\n" +
-			"}\n";
-		
-		protected final int u_projTrans	= register(new Uniform("u_projTrans"));
-		protected final int u_worldTrans	= register(new Uniform("u_worldTrans"));
-		protected final int u_test			= register(new Uniform("u_test"));
-		
-		protected final ShaderProgram program;
-		
-		public TestShader () {
-			super();
-			program = new ShaderProgram(vertexShader, fragmentShader);
-			if (!program.isCompiled())
-				throw new GdxRuntimeException("Couldn't compile shader " + program.getLog());
-		}
-		
-		@Override
-		public void init () {
-			super.init(program, null);
-		}
-		
-		@Override
-		public int compareTo (Shader other) {
-			return 0;
-		}
-
-		@Override
-		public boolean canRender (Renderable instance) {
-			return true;
-		}
-
-		@Override
-		public void begin (Camera camera, RenderContext context) {
-			program.begin();
-			set(u_projTrans, camera.combined);
-		}
-
-		@Override
-		public void render (Renderable renderable) {
-			set(u_worldTrans, renderable.worldTransform);
-			TestAttribute attr = (TestAttribute)renderable.material.get(TestAttribute.ID);
-			set(u_test, attr == null ? 1f : attr.value);
-			renderable.mesh.render(program, renderable.primitiveType, renderable.meshPartOffset, renderable.meshPartSize);
-		}
-
-		@Override
-		public void end () {
-			program.end();
-		}
-		
-		@Override
-		public void dispose () {
-			super.dispose();
-			program.dispose();
-		}
-	}
-	
-	public PerspectiveCamera cam;
-	public CameraInputController camController;
-	public ModelBatch modelBatch;
-	public Model model;
-	public ModelInstance instance;
-	public TestAttribute testAttribute;
-	
-	@Override
-	public void create () {
-		modelBatch = new ModelBatch(new BaseShaderProvider() {
-			@Override
-			protected Shader createShader (Renderable renderable) {
-				return new TestShader();
-			}
-		});
-
-		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		cam.position.set(10f, 10f, 10f);
-		cam.lookAt(0,0,0);
-		cam.near = 0.1f;
-		cam.far = 300f;
-		cam.update();
-
-		camController = new CameraInputController(cam);
-		Gdx.input.setInputProcessor(camController);
-		
-		Material material = new Material(new TestAttribute(1f));
-		ModelBuilder builder = new ModelBuilder();
-		model = builder.createCone(5, 5, 5, 20, material, Usage.Position);
-		instance = new ModelInstance(model);
-		testAttribute = (TestAttribute)instance.materials.get(0).get(TestAttribute.ID);
-	}
-
-	private float counter;
-	@Override
-	public void render () {
-		counter = (counter + Gdx.graphics.getDeltaTime()) % 2.f;
-		testAttribute.value = Math.abs(1f - counter); 
-			
-		camController.update();
-		
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
-
-		modelBatch.begin(cam);
-		modelBatch.render(instance);
-		modelBatch.end();
-	}
-	
-	@Override
-	public void dispose () {
-		modelBatch.dispose();
-		model.dispose();
-	}
-	
-	public boolean needsGL20 () {
-		return true;
-	}
-}
\ No newline at end of file
+
+public class ShaderTest extends GdxTest {
+	public static class TestAttribute extends Attribute {
+		public final static String Alias = "Test";
+		public final static long ID = register(Alias);
+
+		public float value;
+
+		protected TestAttribute (final float value) {
+			super(ID);
+			this.value = value;
+		}
+
+		@Override
+		public Attribute copy () {
+			return new TestAttribute(value);
+		}
+
+		@Override
+		protected boolean equals (Attribute other) {
+			return ((TestAttribute)other).value == value;
+		}
+	}
+
+	public static class TestShader extends BaseShader {
+		public final static String vertexShader = "attribute vec3 a_position;\n" + "uniform mat4 u_projTrans;\n"
+			+ "uniform mat4 u_worldTrans;\n" + "uniform float u_test;\n" + "varying float v_test;\n" + "void main() {\n"
+			+ "	v_test = u_test;\n" + "	gl_Position = u_projTrans * u_worldTrans * vec4(a_position, 1.0);\n" + "}\n";
+		public final static String fragmentShader = "varying float v_test;\n" + "void main() {\n"
+			+ "	gl_FragColor.rgb = vec3(v_test);\n" + "}\n";
+
+		protected final int u_projTrans = register(new Uniform("u_projTrans"));
+		protected final int u_worldTrans = register(new Uniform("u_worldTrans"));
+		protected final int u_test = register(new Uniform("u_test"));
+
+		protected final ShaderProgram program;
+
+		public TestShader () {
+			super();
+			program = new ShaderProgram(vertexShader, fragmentShader);
+			if (!program.isCompiled()) throw new GdxRuntimeException("Couldn't compile shader " + program.getLog());
+		}
+
+		@Override
+		public void init () {
+			super.init(program, null);
+		}
+
+		@Override
+		public int compareTo (Shader other) {
+			return 0;
+		}
+
+		@Override
+		public boolean canRender (Renderable instance) {
+			return true;
+		}
+
+		@Override
+		public void begin (Camera camera, RenderContext context) {
+			program.begin();
+			set(u_projTrans, camera.combined);
+		}
+
+		@Override
+		public void render (Renderable renderable) {
+			set(u_worldTrans, renderable.worldTransform);
+			TestAttribute attr = (TestAttribute)renderable.material.get(TestAttribute.ID);
+			set(u_test, attr == null ? 1f : attr.value);
+			renderable.mesh.render(program, renderable.primitiveType, renderable.meshPartOffset, renderable.meshPartSize);
+		}
+
+		@Override
+		public void end () {
+			program.end();
+		}
+
+		@Override
+		public void dispose () {
+			super.dispose();
+			program.dispose();
+		}
+	}
+
+	public PerspectiveCamera cam;
+	public CameraInputController camController;
+	public ModelBatch modelBatch;
+	public Model model;
+	public ModelInstance instance;
+	public TestAttribute testAttribute;
+
+	@Override
+	public void create () {
+		modelBatch = new ModelBatch(new BaseShaderProvider() {
+			@Override
+			protected Shader createShader (Renderable renderable) {
+				return new TestShader();
+			}
+		});
+
+		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		cam.position.set(10f, 10f, 10f);
+		cam.lookAt(0, 0, 0);
+		cam.near = 0.1f;
+		cam.far = 300f;
+		cam.update();
+
+		camController = new CameraInputController(cam);
+		Gdx.input.setInputProcessor(camController);
+
+		Material material = new Material(new TestAttribute(1f));
+		ModelBuilder builder = new ModelBuilder();
+		model = builder.createCone(5, 5, 5, 20, material, Usage.Position);
+		instance = new ModelInstance(model);
+		testAttribute = (TestAttribute)instance.materials.get(0).get(TestAttribute.ID);
+	}
+
+	private float counter;
+
+	@Override
+	public void render () {
+		counter = (counter + Gdx.graphics.getDeltaTime()) % 2.f;
+		testAttribute.value = Math.abs(1f - counter);
+
+		camController.update();
+
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
+
+		modelBatch.begin(cam);
+		modelBatch.render(instance);
+		modelBatch.end();
+	}
+
+	@Override
+	public void dispose () {
+		modelBatch.dispose();
+		model.dispose();
+	}
+
+	public boolean needsGL20 () {
+		return true;
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShadowMappingTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShadowMappingTest.java
index 4a2d361..33f0997 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShadowMappingTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShadowMappingTest.java
@@ -45,66 +45,66 @@ public class ShadowMappingTest extends GdxTest {
 	Environment environment;
 	DirectionalShadowLight shadowLight;
 	ModelBatch shadowBatch;
-	
+
 	@Override
 	public void create () {
 		modelBatch = new ModelBatch();
 		environment = new Environment();
 		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, .4f, .4f, .4f, 1f));
 		environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
-		environment.add(
-			(shadowLight = new DirectionalShadowLight(1024, 1024, 30f, 30f, 1f, 100f)).set(0.8f, 0.8f, 0.8f, -1f, -.8f, -.2f)
-		);
+		environment.add((shadowLight = new DirectionalShadowLight(1024, 1024, 30f, 30f, 1f, 100f)).set(0.8f, 0.8f, 0.8f, -1f, -.8f,
+			-.2f));
 		environment.shadowMap = shadowLight;
-		
+
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(0f, 7f, 10f);
-		cam.lookAt(0,0,0);
+		cam.lookAt(0, 0, 0);
 		cam.near = 1f;
 		cam.far = 50f;
 		cam.update();
 
 		ModelBuilder modelBuilder = new ModelBuilder();
 		modelBuilder.begin();
-		MeshPartBuilder mpb = modelBuilder.part("parts", GL20.GL_TRIANGLES, Usage.Position | Usage.Normal | Usage.Color, new Material(ColorAttribute.createDiffuse(Color.WHITE)));
+		MeshPartBuilder mpb = modelBuilder.part("parts", GL20.GL_TRIANGLES, Usage.Position | Usage.Normal | Usage.Color,
+			new Material(ColorAttribute.createDiffuse(Color.WHITE)));
 		mpb.setColor(1f, 1f, 1f, 1f);
 		mpb.box(0, -1.5f, 0, 10, 1, 10);
 		mpb.setColor(1f, 0f, 1f, 1f);
 		mpb.sphere(2f, 2f, 2f, 10, 10);
 		model = modelBuilder.end();
 		instance = new ModelInstance(model);
-		
+
 		shadowBatch = new ModelBatch(new DepthShaderProvider());
-		
+
 		Gdx.input.setInputProcessor(camController = new CameraInputController(cam));
 	}
 
 	@Override
 	public void render () {
 		camController.update();
-		
+
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
-		
+
 		shadowLight.begin(Vector3.Zero, cam.direction);
 		shadowBatch.begin(shadowLight.getCamera());
 		shadowBatch.render(instance);
 		shadowBatch.end();
 		shadowLight.end();
-		
+
 		Gdx.gl.glClearColor(0, 0, 0, 1);
 
 		modelBatch.begin(cam);
 		modelBatch.render(instance, environment);
 		modelBatch.end();
 	}
-	
+
 	@Override
 	public void dispose () {
 		modelBatch.dispose();
 		model.dispose();
 	}
-	
+
 	public boolean needsGL20 () {
 		return true;
 	}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/SkeletonTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/SkeletonTest.java
index 4f762e1..d32235f 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/SkeletonTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/SkeletonTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Color;
@@ -35,121 +35,119 @@ import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.Pool;
 import com.badlogic.gdx.utils.StringBuilder;
-
-public class SkeletonTest extends BaseG3dHudTest {
-	ShapeRenderer shapeRenderer;
-	ObjectMap<ModelInstance, AnimationController> animationControllers = new ObjectMap<ModelInstance, AnimationController>(); 
-	
-	@Override
-	public void create () {
-		super.create();
-		showAxes = false;
-		shapeRenderer = new ShapeRenderer();
-		shapeRenderer.setColor(Color.WHITE);
-		onModelClicked("g3d/knight.g3db");
-	}
-	
-	private final static Vector3 tmpV = new Vector3();
-	private final static Pool<Vector3> vectorPool = new Pool<Vector3>() {
-		@Override
-		protected Vector3 newObject () {
-			return new Vector3();
-		}
-	};
-	private final static Quaternion tmpQ = new Quaternion();
-	@Override
-	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
-		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries())
-			e.value.update(Gdx.graphics.getDeltaTime());
-		for (final ModelInstance instance : instances)
-			renderSkeleton(instance);
-		batch.render(instances);
-	}
-	
-	public void renderSkeleton(final ModelInstance instance) {
-		shapeRenderer.setProjectionMatrix(cam.combined);
-		shapeRenderer.begin(ShapeType.Line);
-		for (Node node : instance.nodes) {
-			shapeRenderer.setColor(node.isAnimated ? Color.RED : Color.YELLOW);
-			node.globalTransform.getTranslation(tmpV);
-			shapeRenderer.box(tmpV.x, tmpV.y, tmpV.z, 0.5f, 0.5f, 0.5f);
-			for (Node child : node.children)
-				renderSkeleton(tmpV, child);
-		}
-		shapeRenderer.end();
-	}
-	
-	public void renderSkeleton(final Vector3 from, final Node node) {
-		final Vector3 pos = vectorPool.obtain();
-		node.globalTransform.getTranslation(pos);
-		shapeRenderer.setColor(node.isAnimated ? Color.RED : Color.YELLOW);
-		shapeRenderer.box(pos.x, pos.y, pos.z, 0.5f, 0.5f, 0.5f);
-		shapeRenderer.setColor(Color.WHITE);
-		shapeRenderer.line(from.x, from.y, from.z, pos.x, pos.y, pos.z);
-		for (Node child : node.children)
-			renderSkeleton(pos, child);
-		vectorPool.free(pos);
-	}
-	
-	@Override
-	protected void getStatus (StringBuilder stringBuilder) {
-		super.getStatus(stringBuilder);
-
-		for (final ModelInstance instance : instances) {
-			if (instance.animations.size > 0) {
-				stringBuilder.append(" press space or menu to switch animation");
-				break;
-			}
-		}
-	}
-
-	protected String currentlyLoading;
-	@Override
-	protected void onModelClicked(final String name) {
-		if (name == null)
-			return;
-		
-		currentlyLoading = "data/"+name; 
-		assets.load(currentlyLoading, Model.class);
-		loading = true;
-	}
-	
-	@Override
-	protected void onLoaded() {
-		if (currentlyLoading == null || currentlyLoading.isEmpty())
-			return;
-		
-		instances.clear();
-		animationControllers.clear();
-		final ModelInstance instance = new ModelInstance(assets.get(currentlyLoading, Model.class));
-		instance.materials.get(0).set(new BlendingAttribute(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA, 0.5f));
-		instances.add(instance);
-		if (instance.animations.size > 0)
-			animationControllers.put(instance, new AnimationController(instance));
-		currentlyLoading = null;
-	}
-	
-	protected void switchAnimation() {
-		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries()) {
-			int animIndex = 0;
-			if (e.value.current != null) {
-				for (int i = 0; i < e.key.animations.size; i++) {
-					final Animation animation = e.key.animations.get(i);
-					if (e.value.current.animation == animation) {
-						animIndex = i;
-						break;
-					}
-				}
-			}
-			animIndex = (animIndex + 1) % e.key.animations.size;
-			e.value.animate(e.key.animations.get(animIndex).id, -1, 1f, null, 0.2f);
-		}
-	}
-	
-	@Override
-	public boolean keyUp (int keycode) {
-		if (keycode == Keys.SPACE || keycode == Keys.MENU)
-			switchAnimation();
-		return super.keyUp(keycode);
-	}
-}
\ No newline at end of file
+
+public class SkeletonTest extends BaseG3dHudTest {
+	ShapeRenderer shapeRenderer;
+	ObjectMap<ModelInstance, AnimationController> animationControllers = new ObjectMap<ModelInstance, AnimationController>();
+
+	@Override
+	public void create () {
+		super.create();
+		showAxes = false;
+		shapeRenderer = new ShapeRenderer();
+		shapeRenderer.setColor(Color.WHITE);
+		onModelClicked("g3d/knight.g3db");
+	}
+
+	private final static Vector3 tmpV = new Vector3();
+	private final static Pool<Vector3> vectorPool = new Pool<Vector3>() {
+		@Override
+		protected Vector3 newObject () {
+			return new Vector3();
+		}
+	};
+	private final static Quaternion tmpQ = new Quaternion();
+
+	@Override
+	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
+		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries())
+			e.value.update(Gdx.graphics.getDeltaTime());
+		for (final ModelInstance instance : instances)
+			renderSkeleton(instance);
+		batch.render(instances);
+	}
+
+	public void renderSkeleton (final ModelInstance instance) {
+		shapeRenderer.setProjectionMatrix(cam.combined);
+		shapeRenderer.begin(ShapeType.Line);
+		for (Node node : instance.nodes) {
+			shapeRenderer.setColor(node.isAnimated ? Color.RED : Color.YELLOW);
+			node.globalTransform.getTranslation(tmpV);
+			shapeRenderer.box(tmpV.x, tmpV.y, tmpV.z, 0.5f, 0.5f, 0.5f);
+			for (Node child : node.children)
+				renderSkeleton(tmpV, child);
+		}
+		shapeRenderer.end();
+	}
+
+	public void renderSkeleton (final Vector3 from, final Node node) {
+		final Vector3 pos = vectorPool.obtain();
+		node.globalTransform.getTranslation(pos);
+		shapeRenderer.setColor(node.isAnimated ? Color.RED : Color.YELLOW);
+		shapeRenderer.box(pos.x, pos.y, pos.z, 0.5f, 0.5f, 0.5f);
+		shapeRenderer.setColor(Color.WHITE);
+		shapeRenderer.line(from.x, from.y, from.z, pos.x, pos.y, pos.z);
+		for (Node child : node.children)
+			renderSkeleton(pos, child);
+		vectorPool.free(pos);
+	}
+
+	@Override
+	protected void getStatus (StringBuilder stringBuilder) {
+		super.getStatus(stringBuilder);
+
+		for (final ModelInstance instance : instances) {
+			if (instance.animations.size > 0) {
+				stringBuilder.append(" press space or menu to switch animation");
+				break;
+			}
+		}
+	}
+
+	protected String currentlyLoading;
+
+	@Override
+	protected void onModelClicked (final String name) {
+		if (name == null) return;
+
+		currentlyLoading = "data/" + name;
+		assets.load(currentlyLoading, Model.class);
+		loading = true;
+	}
+
+	@Override
+	protected void onLoaded () {
+		if (currentlyLoading == null || currentlyLoading.isEmpty()) return;
+
+		instances.clear();
+		animationControllers.clear();
+		final ModelInstance instance = new ModelInstance(assets.get(currentlyLoading, Model.class));
+		instance.materials.get(0).set(new BlendingAttribute(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA, 0.5f));
+		instances.add(instance);
+		if (instance.animations.size > 0) animationControllers.put(instance, new AnimationController(instance));
+		currentlyLoading = null;
+	}
+
+	protected void switchAnimation () {
+		for (ObjectMap.Entry<ModelInstance, AnimationController> e : animationControllers.entries()) {
+			int animIndex = 0;
+			if (e.value.current != null) {
+				for (int i = 0; i < e.key.animations.size; i++) {
+					final Animation animation = e.key.animations.get(i);
+					if (e.value.current.animation == animation) {
+						animIndex = i;
+						break;
+					}
+				}
+			}
+			animIndex = (animIndex + 1) % e.key.animations.size;
+			e.value.animate(e.key.animations.get(animIndex).id, -1, 1f, null, 0.2f);
+		}
+	}
+
+	@Override
+	public boolean keyUp (int keycode) {
+		if (keycode == Keys.SPACE || keycode == Keys.MENU) switchAnimation();
+		return super.keyUp(keycode);
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shaders/MultiPassShader.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shaders/MultiPassShader.java
index af69add..d4b34f9 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shaders/MultiPassShader.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shaders/MultiPassShader.java
@@ -12,34 +12,34 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d.shaders;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d.shaders;
+
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
-
-public class MultiPassShader extends DefaultShader {
-	public static int passes = 10;
-	
-	protected final int u_pass = register(new Uniform("u_pass"));
-	
-	public MultiPassShader (final Renderable renderable, final Config config) {
-		super(renderable, config);
-	}
-
-	@Override
-	public void render (Renderable renderable) {
-		set(u_pass, 0f);
-		super.render(renderable);
-		context.setDepthTest(GL20.GL_LESS);
-		if (has(u_pass)) {
-			context.setBlending(true, GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA);
-			for (int i = 1; i < passes; ++i) {
-				set(u_pass, (float)i/(float)passes);
-				renderable.mesh.render(program, renderable.primitiveType, renderable.meshPartOffset, renderable.meshPartSize, false);
-			}
-		}
-	}
-}
\ No newline at end of file
+
+public class MultiPassShader extends DefaultShader {
+	public static int passes = 10;
+
+	protected final int u_pass = register(new Uniform("u_pass"));
+
+	public MultiPassShader (final Renderable renderable, final Config config) {
+		super(renderable, config);
+	}
+
+	@Override
+	public void render (Renderable renderable) {
+		set(u_pass, 0f);
+		super.render(renderable);
+		context.setDepthTest(GL20.GL_LESS);
+		if (has(u_pass)) {
+			context.setBlending(true, GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA);
+			for (int i = 1; i < passes; ++i) {
+				set(u_pass, (float)i / (float)passes);
+				renderable.mesh.render(program, renderable.primitiveType, renderable.meshPartOffset, renderable.meshPartSize, false);
+			}
+		}
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/PerlinNoiseGenerator.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/PerlinNoiseGenerator.java
index 62d1282..94a5290 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/PerlinNoiseGenerator.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/PerlinNoiseGenerator.java
@@ -12,132 +12,132 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d.voxel;
-
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Pixmap.Format;
-import com.badlogic.gdx.math.MathUtils;
-
-/** Adapted from <a href="http://devmag.org.za/2009/04/25/perlin-noise/">http://devmag.org.za/2009/04/25/perlin-noise/</a>
- * @author badlogic */
-public class PerlinNoiseGenerator {
-	public static float[][] generateWhiteNoise (int width, int height) {
-		float[][] noise = new float[width][height];
-		for (int y = 0; y < height; y++) {
-			for (int x = 0; x < width; x++) {
-				noise[x][y] = MathUtils.random();
-			}
-		}
-		return noise;
-	}
-
-	public static float interpolate (float x0, float x1, float alpha) {
-		return x0 * (1 - alpha) + alpha * x1;
-	}
-
-	public static float[][] generateSmoothNoise (float[][] baseNoise, int octave) {
-		int width = baseNoise.length;
-		int height = baseNoise[0].length;
-		float[][] smoothNoise = new float[width][height];
-
-		int samplePeriod = 1 << octave; // calculates 2 ^ k
-		float sampleFrequency = 1.0f / samplePeriod;
-		for (int i = 0; i < width; i++) {
-			int sample_i0 = (i / samplePeriod) * samplePeriod;
-			int sample_i1 = (sample_i0 + samplePeriod) % width; // wrap around
-			float horizontal_blend = (i - sample_i0) * sampleFrequency;
-
-			for (int j = 0; j < height; j++) {
-				int sample_j0 = (j / samplePeriod) * samplePeriod;
-				int sample_j1 = (sample_j0 + samplePeriod) % height; // wrap around
-				float vertical_blend = (j - sample_j0) * sampleFrequency;
-				float top = interpolate(baseNoise[sample_i0][sample_j0], baseNoise[sample_i1][sample_j0], horizontal_blend);
-				float bottom = interpolate(baseNoise[sample_i0][sample_j1], baseNoise[sample_i1][sample_j1], horizontal_blend);
-				smoothNoise[i][j] = interpolate(top, bottom, vertical_blend);
-			}
-		}
-
-		return smoothNoise;
-	}
-
-	public static float[][] generatePerlinNoise (float[][] baseNoise, int octaveCount) {
-		int width = baseNoise.length;
-		int height = baseNoise[0].length;
-		float[][][] smoothNoise = new float[octaveCount][][]; // an array of 2D arrays containing
-		float persistance = 0.7f;
-
-		for (int i = 0; i < octaveCount; i++) {
-			smoothNoise[i] = generateSmoothNoise(baseNoise, i);
-		}
-
-		float[][] perlinNoise = new float[width][height]; // an array of floats initialised to 0
-
-		float amplitude = 1.0f;
-		float totalAmplitude = 0.0f;
-
-		for (int octave = octaveCount - 1; octave >= 0; octave--) {
-			amplitude *= persistance;
-			totalAmplitude += amplitude;
-
-			for (int i = 0; i < width; i++) {
-				for (int j = 0; j < height; j++) {
-					perlinNoise[i][j] += smoothNoise[octave][i][j] * amplitude;
-				}
-			}
-		}
-
-		for (int i = 0; i < width; i++) {
-			for (int j = 0; j < height; j++) {
-				perlinNoise[i][j] /= totalAmplitude;
-			}
-		}
-
-		return perlinNoise;
-	}
-
-	public static float[][] generatePerlinNoise (int width, int height, int octaveCount) {
-		float[][] baseNoise = generateWhiteNoise(width, height);
-		return generatePerlinNoise(baseNoise, octaveCount);
-	}
-
-	public static byte[] generateHeightMap(int width, int height, int min, int max, int octaveCount) {
-		float[][] baseNoise = generateWhiteNoise(width, height);
-		float[][] noise = generatePerlinNoise(baseNoise, octaveCount);
-		byte[] bytes = new byte[baseNoise.length * baseNoise[0].length];
-		int idx = 0;
-		int range = max - min;
-		for(int y = 0; y < height; y++) {
-			for(int x = 0; x < width; x++) {
-				bytes[idx++] = (byte)(noise[x][y] * range + min);
-			}
-		}
-		return bytes;
-	}
-	
-	public static Pixmap generatePixmap(int width, int height, int min, int max, int octaveCount) {
-		byte[] bytes = generateHeightMap(width, height, min, max, octaveCount);
-		Pixmap pixmap = new Pixmap(width, height, Format.RGBA8888);
-		for(int i = 0, idx = 0; i < bytes.length; i++) {
-			byte val = bytes[i];
-			pixmap.getPixels().put(idx++, val);
-			pixmap.getPixels().put(idx++, val);
-			pixmap.getPixels().put(idx++, val);
-			pixmap.getPixels().put(idx++, (byte)255);
-		}
-		return pixmap;
-	}
-	
-	public static void generateVoxels(VoxelWorld voxelWorld, int min, int max, int octaveCount) {
-		byte[] heightMap = PerlinNoiseGenerator.generateHeightMap(voxelWorld.voxelsX, voxelWorld.voxelsZ, min, max, octaveCount);
-		int idx = 0;
-		for(int z = 0; z < voxelWorld.voxelsZ; z++) {
-			for(int x = 0; x < voxelWorld.voxelsX; x++) {
-				voxelWorld.setColumn(x, heightMap[idx++], z, (byte)1);
-//				voxelWorld.set(x, heightMap[idx++], z, (byte)1);
-			}
-		}
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d.voxel;
+
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.Pixmap.Format;
+import com.badlogic.gdx.math.MathUtils;
+
+/** Adapted from <a href="http://devmag.org.za/2009/04/25/perlin-noise/">http://devmag.org.za/2009/04/25/perlin-noise/</a>
+ * @author badlogic */
+public class PerlinNoiseGenerator {
+	public static float[][] generateWhiteNoise (int width, int height) {
+		float[][] noise = new float[width][height];
+		for (int y = 0; y < height; y++) {
+			for (int x = 0; x < width; x++) {
+				noise[x][y] = MathUtils.random();
+			}
+		}
+		return noise;
+	}
+
+	public static float interpolate (float x0, float x1, float alpha) {
+		return x0 * (1 - alpha) + alpha * x1;
+	}
+
+	public static float[][] generateSmoothNoise (float[][] baseNoise, int octave) {
+		int width = baseNoise.length;
+		int height = baseNoise[0].length;
+		float[][] smoothNoise = new float[width][height];
+
+		int samplePeriod = 1 << octave; // calculates 2 ^ k
+		float sampleFrequency = 1.0f / samplePeriod;
+		for (int i = 0; i < width; i++) {
+			int sample_i0 = (i / samplePeriod) * samplePeriod;
+			int sample_i1 = (sample_i0 + samplePeriod) % width; // wrap around
+			float horizontal_blend = (i - sample_i0) * sampleFrequency;
+
+			for (int j = 0; j < height; j++) {
+				int sample_j0 = (j / samplePeriod) * samplePeriod;
+				int sample_j1 = (sample_j0 + samplePeriod) % height; // wrap around
+				float vertical_blend = (j - sample_j0) * sampleFrequency;
+				float top = interpolate(baseNoise[sample_i0][sample_j0], baseNoise[sample_i1][sample_j0], horizontal_blend);
+				float bottom = interpolate(baseNoise[sample_i0][sample_j1], baseNoise[sample_i1][sample_j1], horizontal_blend);
+				smoothNoise[i][j] = interpolate(top, bottom, vertical_blend);
+			}
+		}
+
+		return smoothNoise;
+	}
+
+	public static float[][] generatePerlinNoise (float[][] baseNoise, int octaveCount) {
+		int width = baseNoise.length;
+		int height = baseNoise[0].length;
+		float[][][] smoothNoise = new float[octaveCount][][]; // an array of 2D arrays containing
+		float persistance = 0.7f;
+
+		for (int i = 0; i < octaveCount; i++) {
+			smoothNoise[i] = generateSmoothNoise(baseNoise, i);
+		}
+
+		float[][] perlinNoise = new float[width][height]; // an array of floats initialised to 0
+
+		float amplitude = 1.0f;
+		float totalAmplitude = 0.0f;
+
+		for (int octave = octaveCount - 1; octave >= 0; octave--) {
+			amplitude *= persistance;
+			totalAmplitude += amplitude;
+
+			for (int i = 0; i < width; i++) {
+				for (int j = 0; j < height; j++) {
+					perlinNoise[i][j] += smoothNoise[octave][i][j] * amplitude;
+				}
+			}
+		}
+
+		for (int i = 0; i < width; i++) {
+			for (int j = 0; j < height; j++) {
+				perlinNoise[i][j] /= totalAmplitude;
+			}
+		}
+
+		return perlinNoise;
+	}
+
+	public static float[][] generatePerlinNoise (int width, int height, int octaveCount) {
+		float[][] baseNoise = generateWhiteNoise(width, height);
+		return generatePerlinNoise(baseNoise, octaveCount);
+	}
+
+	public static byte[] generateHeightMap (int width, int height, int min, int max, int octaveCount) {
+		float[][] baseNoise = generateWhiteNoise(width, height);
+		float[][] noise = generatePerlinNoise(baseNoise, octaveCount);
+		byte[] bytes = new byte[baseNoise.length * baseNoise[0].length];
+		int idx = 0;
+		int range = max - min;
+		for (int y = 0; y < height; y++) {
+			for (int x = 0; x < width; x++) {
+				bytes[idx++] = (byte)(noise[x][y] * range + min);
+			}
+		}
+		return bytes;
+	}
+
+	public static Pixmap generatePixmap (int width, int height, int min, int max, int octaveCount) {
+		byte[] bytes = generateHeightMap(width, height, min, max, octaveCount);
+		Pixmap pixmap = new Pixmap(width, height, Format.RGBA8888);
+		for (int i = 0, idx = 0; i < bytes.length; i++) {
+			byte val = bytes[i];
+			pixmap.getPixels().put(idx++, val);
+			pixmap.getPixels().put(idx++, val);
+			pixmap.getPixels().put(idx++, val);
+			pixmap.getPixels().put(idx++, (byte)255);
+		}
+		return pixmap;
+	}
+
+	public static void generateVoxels (VoxelWorld voxelWorld, int min, int max, int octaveCount) {
+		byte[] heightMap = PerlinNoiseGenerator.generateHeightMap(voxelWorld.voxelsX, voxelWorld.voxelsZ, min, max, octaveCount);
+		int idx = 0;
+		for (int z = 0; z < voxelWorld.voxelsZ; z++) {
+			for (int x = 0; x < voxelWorld.voxelsX; x++) {
+				voxelWorld.setColumn(x, heightMap[idx++], z, (byte)1);
+// voxelWorld.set(x, heightMap[idx++], z, (byte)1);
+			}
+		}
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelChunk.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelChunk.java
index 748b538..d078deb 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelChunk.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelChunk.java
@@ -12,296 +12,293 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d.voxel;
-
-import com.badlogic.gdx.math.Vector3;
-
-public class VoxelChunk {
-	public static final int VERTEX_SIZE = 6;
-	public final byte[] voxels;
-	public final int width;
-	public final int height;
-	public final int depth;
-	public final Vector3 offset = new Vector3();
-	private final int widthTimesHeight;
-	private final int topOffset;
-	private final int bottomOffset;
-	private final int leftOffset;
-	private final int rightOffset;
-	private final int frontOffset;
-	private final int backOffset;
-	
-	public VoxelChunk(int width, int height, int depth) {
-		this.voxels = new byte[width * height * depth];
-		this.width = width;
-		this.height = height;
-		this.depth = depth;
-		this.topOffset = width * depth;
-		this.bottomOffset = -width * depth;
-		this.leftOffset = -1;
-		this.rightOffset = 1;
-		this.frontOffset = - width;
-		this.backOffset = width;
-		this.widthTimesHeight = width * height;
-	}
-	
-	public byte get(int x, int y, int z) {
-		if(x < 0 || x >= width) return 0;
-		if(y < 0 || y >= height) return 0;
-		if(z < 0 || z >= depth) return 0;
-		return getFast(x, y, z);
-	}
-	
-	public byte getFast(int x, int y, int z) {
-		return voxels[x + z * width + y * widthTimesHeight];
-	}
-	
-	public void set(int x, int y, int z, byte voxel) {
-		if(x < 0 || x >= width) return;
-		if(y < 0 || y >= height) return;
-		if(z < 0 || z >= depth) return;
-		setFast(x, y, z, voxel);
-	}
-	
-	public void setFast(int x, int y, int z, byte voxel) {
-		voxels[x + z * width + y * widthTimesHeight] = voxel;
-	}
-	
-	/**
-	 * Creates a mesh out of the chunk, returning the number of
-	 * indices produced
-	 * @return the number of vertices produced
-	 */
-	public int calculateVertices(float[] vertices) {
-		int i = 0;
-		int vertexOffset = 0;
-		for(int y = 0; y < height; y++) {
-			for(int z = 0; z < depth; z++) {
-				for(int x = 0; x < width; x++, i++) {
-					byte voxel = voxels[i];
-					if(voxel == 0) continue;
-					
-					if(y < height - 1) {
-						if(voxels[i+topOffset] == 0) vertexOffset = createTop(offset, x, y, z, vertices, vertexOffset);
-					} else {
-						vertexOffset = createTop(offset, x, y, z, vertices, vertexOffset);
-					}
-					if(y > 0) {
-						if(voxels[i+bottomOffset] == 0) vertexOffset = createBottom(offset, x, y, z, vertices, vertexOffset);
-					} else {
-						vertexOffset = createBottom(offset, x, y, z, vertices, vertexOffset);
-					}
-					if(x > 0) {
-						if(voxels[i+leftOffset] == 0) vertexOffset = createLeft(offset, x, y, z, vertices, vertexOffset);
-					} else {
-						vertexOffset = createLeft(offset, x, y, z, vertices, vertexOffset);
-					}
-					if(x < width - 1) {
-						if(voxels[i+rightOffset] == 0) vertexOffset = createRight(offset, x, y, z, vertices, vertexOffset);
-					} else {
-						vertexOffset = createRight(offset, x, y, z, vertices, vertexOffset);
-					}
-					if(z > 0) {
-						if(voxels[i+frontOffset] == 0) vertexOffset = createFront(offset, x, y, z, vertices, vertexOffset);
-					} else {
-						vertexOffset = createFront(offset, x, y, z, vertices, vertexOffset);
-					}
-					if(z < depth - 1) {
-						if(voxels[i+backOffset] == 0) vertexOffset = createBack(offset, x, y, z, vertices, vertexOffset);
-					} else {
-						vertexOffset = createBack(offset, x, y, z, vertices, vertexOffset);
-					}
-				}
-			}
-		}
-		return vertexOffset / VERTEX_SIZE;
-	}
-	
-	public static int createTop(Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		vertices[vertexOffset++] = 0;
-		return vertexOffset;
-	}
-	
-	public static int createBottom(Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = -1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = -1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = -1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = -1;
-		vertices[vertexOffset++] = 0;
-		return vertexOffset;
-	}
-	
-	public static int createLeft(Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = -1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = -1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = -1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = -1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		return vertexOffset;
-	}
-	
-	public static int createRight(Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		vertices[vertexOffset++] = 0;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		vertices[vertexOffset++] = 0;
-		return vertexOffset;
-	}
-	
-	public static int createFront(Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 1;
-		return vertexOffset;
-	}
-	
-	public static int createBack(Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = -1;
-		
-		vertices[vertexOffset++] = offset.x + x;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = -1;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y + 1;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = -1;
-		
-		vertices[vertexOffset++] = offset.x + x + 1;
-		vertices[vertexOffset++] = offset.y + y;
-		vertices[vertexOffset++] = offset.z + z + 1;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = 0;
-		vertices[vertexOffset++] = -1;
-		return vertexOffset;
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d.voxel;
+
+import com.badlogic.gdx.math.Vector3;
+
+public class VoxelChunk {
+	public static final int VERTEX_SIZE = 6;
+	public final byte[] voxels;
+	public final int width;
+	public final int height;
+	public final int depth;
+	public final Vector3 offset = new Vector3();
+	private final int widthTimesHeight;
+	private final int topOffset;
+	private final int bottomOffset;
+	private final int leftOffset;
+	private final int rightOffset;
+	private final int frontOffset;
+	private final int backOffset;
+
+	public VoxelChunk (int width, int height, int depth) {
+		this.voxels = new byte[width * height * depth];
+		this.width = width;
+		this.height = height;
+		this.depth = depth;
+		this.topOffset = width * depth;
+		this.bottomOffset = -width * depth;
+		this.leftOffset = -1;
+		this.rightOffset = 1;
+		this.frontOffset = -width;
+		this.backOffset = width;
+		this.widthTimesHeight = width * height;
+	}
+
+	public byte get (int x, int y, int z) {
+		if (x < 0 || x >= width) return 0;
+		if (y < 0 || y >= height) return 0;
+		if (z < 0 || z >= depth) return 0;
+		return getFast(x, y, z);
+	}
+
+	public byte getFast (int x, int y, int z) {
+		return voxels[x + z * width + y * widthTimesHeight];
+	}
+
+	public void set (int x, int y, int z, byte voxel) {
+		if (x < 0 || x >= width) return;
+		if (y < 0 || y >= height) return;
+		if (z < 0 || z >= depth) return;
+		setFast(x, y, z, voxel);
+	}
+
+	public void setFast (int x, int y, int z, byte voxel) {
+		voxels[x + z * width + y * widthTimesHeight] = voxel;
+	}
+
+	/** Creates a mesh out of the chunk, returning the number of indices produced
+	 * @return the number of vertices produced */
+	public int calculateVertices (float[] vertices) {
+		int i = 0;
+		int vertexOffset = 0;
+		for (int y = 0; y < height; y++) {
+			for (int z = 0; z < depth; z++) {
+				for (int x = 0; x < width; x++, i++) {
+					byte voxel = voxels[i];
+					if (voxel == 0) continue;
+
+					if (y < height - 1) {
+						if (voxels[i + topOffset] == 0) vertexOffset = createTop(offset, x, y, z, vertices, vertexOffset);
+					} else {
+						vertexOffset = createTop(offset, x, y, z, vertices, vertexOffset);
+					}
+					if (y > 0) {
+						if (voxels[i + bottomOffset] == 0) vertexOffset = createBottom(offset, x, y, z, vertices, vertexOffset);
+					} else {
+						vertexOffset = createBottom(offset, x, y, z, vertices, vertexOffset);
+					}
+					if (x > 0) {
+						if (voxels[i + leftOffset] == 0) vertexOffset = createLeft(offset, x, y, z, vertices, vertexOffset);
+					} else {
+						vertexOffset = createLeft(offset, x, y, z, vertices, vertexOffset);
+					}
+					if (x < width - 1) {
+						if (voxels[i + rightOffset] == 0) vertexOffset = createRight(offset, x, y, z, vertices, vertexOffset);
+					} else {
+						vertexOffset = createRight(offset, x, y, z, vertices, vertexOffset);
+					}
+					if (z > 0) {
+						if (voxels[i + frontOffset] == 0) vertexOffset = createFront(offset, x, y, z, vertices, vertexOffset);
+					} else {
+						vertexOffset = createFront(offset, x, y, z, vertices, vertexOffset);
+					}
+					if (z < depth - 1) {
+						if (voxels[i + backOffset] == 0) vertexOffset = createBack(offset, x, y, z, vertices, vertexOffset);
+					} else {
+						vertexOffset = createBack(offset, x, y, z, vertices, vertexOffset);
+					}
+				}
+			}
+		}
+		return vertexOffset / VERTEX_SIZE;
+	}
+
+	public static int createTop (Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		vertices[vertexOffset++] = 0;
+		return vertexOffset;
+	}
+
+	public static int createBottom (Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = -1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = -1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = -1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = -1;
+		vertices[vertexOffset++] = 0;
+		return vertexOffset;
+	}
+
+	public static int createLeft (Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = -1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = -1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = -1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = -1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		return vertexOffset;
+	}
+
+	public static int createRight (Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		vertices[vertexOffset++] = 0;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		vertices[vertexOffset++] = 0;
+		return vertexOffset;
+	}
+
+	public static int createFront (Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 1;
+		return vertexOffset;
+	}
+
+	public static int createBack (Vector3 offset, int x, int y, int z, float[] vertices, int vertexOffset) {
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = -1;
+
+		vertices[vertexOffset++] = offset.x + x;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = -1;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y + 1;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = -1;
+
+		vertices[vertexOffset++] = offset.x + x + 1;
+		vertices[vertexOffset++] = offset.y + y;
+		vertices[vertexOffset++] = offset.z + z + 1;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = 0;
+		vertices[vertexOffset++] = -1;
+		return vertexOffset;
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelTest.java
index df2038a..37402fe 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelTest.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d.voxel;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d.voxel;
+
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
@@ -31,63 +31,64 @@ import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.utils.GdxTest;
-
-public class VoxelTest extends GdxTest {
-	SpriteBatch spriteBatch;
-	BitmapFont font;
-	ModelBatch modelBatch;
-	PerspectiveCamera camera;
-	Environment lights;
-	FirstPersonCameraController controller;
-	VoxelWorld voxelWorld;
-
-	@Override
-	public void create () {
-		spriteBatch = new SpriteBatch();
-		font = new BitmapFont();
-		modelBatch = new ModelBatch();
-		DefaultShader.defaultCullFace = GL20.GL_FRONT;
-		camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		camera.near = 0.5f;
-		camera.far = 1000;
-		controller = new FirstPersonCameraController(camera);
-		Gdx.input.setInputProcessor(controller);
-		
-		lights = new Environment();
-		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
-		lights.add(new DirectionalLight().set(1, 1, 1, 0, -1, 0));
-		
-		Texture texture = new Texture(Gdx.files.internal("data/g3d/tiles.png"));
-		TextureRegion[][] tiles = TextureRegion.split(texture, 32, 32);
-		
-		MathUtils.random.setSeed(0);
-		voxelWorld = new VoxelWorld(tiles[0], 20, 4, 20);
-		PerlinNoiseGenerator.generateVoxels(voxelWorld, 0, 63, 10);
-		float camX = voxelWorld.voxelsX / 2f;
-		float camZ = voxelWorld.voxelsZ / 2f;
-		float camY = voxelWorld.getHighest(camX, camZ) + 1.5f;
-		camera.position.set(camX, camY, camZ);
-	}
-
-	@Override
-	public void render () {
-		Gdx.gl.glClearColor(0.4f, 0.4f, 0.4f, 1f);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
-		modelBatch.begin(camera);
-		modelBatch.render(voxelWorld, lights);
-		modelBatch.end();
-		controller.update();
-		
-		spriteBatch.begin();
-		font.draw(spriteBatch, "fps: " + Gdx.graphics.getFramesPerSecond() + ", #visible chunks: " + voxelWorld.renderedChunks + "/" + voxelWorld.numChunks, 0, 20);
-		spriteBatch.end();
-	}
-	
-	@Override
-	public void resize (int width, int height) {
-		spriteBatch.getProjectionMatrix().setToOrtho2D(0, 0, width, height);
-		camera.viewportWidth = width;
-		camera.viewportHeight = height;
-		camera.update();
-	}
-}
\ No newline at end of file
+
+public class VoxelTest extends GdxTest {
+	SpriteBatch spriteBatch;
+	BitmapFont font;
+	ModelBatch modelBatch;
+	PerspectiveCamera camera;
+	Environment lights;
+	FirstPersonCameraController controller;
+	VoxelWorld voxelWorld;
+
+	@Override
+	public void create () {
+		spriteBatch = new SpriteBatch();
+		font = new BitmapFont();
+		modelBatch = new ModelBatch();
+		DefaultShader.defaultCullFace = GL20.GL_FRONT;
+		camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		camera.near = 0.5f;
+		camera.far = 1000;
+		controller = new FirstPersonCameraController(camera);
+		Gdx.input.setInputProcessor(controller);
+
+		lights = new Environment();
+		lights.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1.f));
+		lights.add(new DirectionalLight().set(1, 1, 1, 0, -1, 0));
+
+		Texture texture = new Texture(Gdx.files.internal("data/g3d/tiles.png"));
+		TextureRegion[][] tiles = TextureRegion.split(texture, 32, 32);
+
+		MathUtils.random.setSeed(0);
+		voxelWorld = new VoxelWorld(tiles[0], 20, 4, 20);
+		PerlinNoiseGenerator.generateVoxels(voxelWorld, 0, 63, 10);
+		float camX = voxelWorld.voxelsX / 2f;
+		float camZ = voxelWorld.voxelsZ / 2f;
+		float camY = voxelWorld.getHighest(camX, camZ) + 1.5f;
+		camera.position.set(camX, camY, camZ);
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(0.4f, 0.4f, 0.4f, 1f);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
+		modelBatch.begin(camera);
+		modelBatch.render(voxelWorld, lights);
+		modelBatch.end();
+		controller.update();
+
+		spriteBatch.begin();
+		font.draw(spriteBatch, "fps: " + Gdx.graphics.getFramesPerSecond() + ", #visible chunks: " + voxelWorld.renderedChunks
+			+ "/" + voxelWorld.numChunks, 0, 20);
+		spriteBatch.end();
+	}
+
+	@Override
+	public void resize (int width, int height) {
+		spriteBatch.getProjectionMatrix().setToOrtho2D(0, 0, width, height);
+		camera.viewportWidth = width;
+		camera.viewportHeight = height;
+		camera.update();
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelWorld.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelWorld.java
index b709175..71ed587 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelWorld.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/VoxelWorld.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.g3d.voxel;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.g3d.voxel;
+
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
@@ -27,175 +27,178 @@ import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Pool;
-
-public class VoxelWorld implements RenderableProvider {
-	public static final int CHUNK_SIZE_X = 16;
-	public static final int CHUNK_SIZE_Y = 16;
-	public static final int CHUNK_SIZE_Z = 16;
-	
-	public final VoxelChunk[] chunks;
-	public final Mesh[] meshes;
-	public final Material[] materials;
-	public final boolean[] dirty;
-	public final int[] numVertices;
-	public float[] vertices;
-	public final int chunksX;
-	public final int chunksY;
-	public final int chunksZ;
-	public final int voxelsX;
-	public final int voxelsY;
-	public final int voxelsZ;
-	public int renderedChunks;
-	public int numChunks;
-	private final TextureRegion[] tiles;
-	
-	public VoxelWorld(TextureRegion[] tiles, int chunksX, int chunksY, int chunksZ) {
-		this.tiles = tiles;
-		this.chunks = new VoxelChunk[chunksX * chunksY * chunksZ];
-		this.chunksX = chunksX;
-		this.chunksY = chunksY;
-		this.chunksZ = chunksZ;
-		this.numChunks = chunksX * chunksY * chunksZ;
-		this.voxelsX = chunksX * CHUNK_SIZE_X;
-		this.voxelsY = chunksY * CHUNK_SIZE_Y;
-		this.voxelsZ = chunksZ * CHUNK_SIZE_Z;
-		int i = 0;
-		for(int y = 0; y < chunksY; y++) {
-			for(int z = 0; z < chunksZ; z++) {
-				for(int x = 0; x < chunksX; x++) {
-					VoxelChunk chunk = new VoxelChunk(CHUNK_SIZE_X, CHUNK_SIZE_Y, CHUNK_SIZE_Z);
-					chunk.offset.set(x * CHUNK_SIZE_X, y * CHUNK_SIZE_Y, z * CHUNK_SIZE_Z);
-					chunks[i++] = chunk;
-				}
-			}
-		}
-		int len = CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z * 6 * 6 / 3;
-		short[] indices = new short[len];
-		short j = 0;
-		for (i = 0; i < len; i += 6, j += 4) {
-			indices[i + 0] = (short)(j + 0);
-			indices[i + 1] = (short)(j + 1);
-			indices[i + 2] = (short)(j + 2);
-			indices[i + 3] = (short)(j + 2);
-			indices[i + 4] = (short)(j + 3);
-			indices[i + 5] = (short)(j + 0);
-		}
-		this.meshes = new Mesh[chunksX * chunksY * chunksZ];
-		for(i = 0; i < meshes.length; i++) {
-			meshes[i] = new Mesh(true, 
-										CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z * 6 * 4, 
-										CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z * 36 / 3,
-										VertexAttribute.Position(), VertexAttribute.Normal());
-			meshes[i].setIndices(indices);
-		}
-		this.dirty = new boolean[chunksX * chunksY * chunksZ];
-		for(i = 0; i < dirty.length; i++) dirty[i] = true;
-		
-		this.numVertices = new int[chunksX * chunksY * chunksZ];
-		for(i = 0; i < numVertices.length; i++) numVertices[i] = 0;
-		
-		this.vertices = new float[VoxelChunk.VERTEX_SIZE * 6 * CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z];
-		this.materials = new Material[chunksX * chunksY * chunksZ];
-		for(i = 0; i < materials.length; i++) {
-			materials[i] = new Material(new ColorAttribute(ColorAttribute.Diffuse, MathUtils.random(0.5f, 1f), MathUtils.random(0.5f, 1f), MathUtils.random(0.5f, 1f), 1));
-		}
-	}
-	
-	public void set(float x, float y, float z, byte voxel) {
-		int ix = (int)x;
-		int iy = (int)y;
-		int iz = (int)z;
-		int chunkX = ix / CHUNK_SIZE_X;
-		if(chunkX < 0 || chunkX >= chunksX) return;
-		int chunkY = iy / CHUNK_SIZE_Y;
-		if(chunkY < 0 || chunkY >= chunksY) return;
-		int chunkZ = iz / CHUNK_SIZE_Z;
-		if(chunkZ < 0 || chunkZ >= chunksZ) return;
-		chunks[chunkX + chunkZ * chunksX + chunkY * chunksX * chunksZ].set(ix % CHUNK_SIZE_X, iy % CHUNK_SIZE_Y, iz % CHUNK_SIZE_Z, voxel);
-	}
-	
-	public byte get(float x, float y, float z) {
-		int ix = (int)x;
-		int iy = (int)y;
-		int iz = (int)z;
-		int chunkX = ix / CHUNK_SIZE_X;
-		if(chunkX < 0 || chunkX >= chunksX) return 0;
-		int chunkY = iy / CHUNK_SIZE_Y;
-		if(chunkY < 0 || chunkY >= chunksY) return 0;
-		int chunkZ = iz / CHUNK_SIZE_Z;
-		if(chunkZ < 0 || chunkZ >= chunksZ) return 0;
-		return chunks[chunkX + chunkZ * chunksX + chunkY * chunksX * chunksZ].get(ix % CHUNK_SIZE_X, iy % CHUNK_SIZE_Y, iz % CHUNK_SIZE_Z);
-	}
-	
-	public float getHighest (float x, float z) {
-		int ix = (int)x;
-		int iz = (int)z;
-		if(ix < 0 || ix >= voxelsX) return 0;
-		if(iz < 0 || iz >= voxelsZ) return 0;
-		// FIXME optimize
-		for(int y = voxelsY - 1; y > 0; y--) {
-			if(get(ix, y, iz) > 0) return y + 1;
-		}
-		return 0;
-	}
-	
-	public void setColumn(float x, float y, float z, byte voxel) {
-		int ix = (int)x;
-		int iy = (int)y;
-		int iz = (int)z;
-		if(ix < 0 || ix >= voxelsX) return;
-		if(iy < 0 || iy >= voxelsY) return;
-		if(iz < 0 || iz >= voxelsZ) return;
-		// FIXME optimize
-		for(; iy > 0; iy--) {
-			set(ix, iy, iz, voxel);
-		}
-	}
-	
-	public void setCube(float x, float y, float z, float width, float height, float depth, byte voxel) {
-		int ix = (int)x;
-		int iy = (int)y;
-		int iz = (int)z;
-		int iwidth = (int)width;
-		int iheight = (int)height;
-		int idepth = (int)depth;
-		int startX = Math.max(ix, 0);
-		int endX = Math.min(voxelsX, ix + iwidth);
-		int startY = Math.max(iy, 0);
-		int endY = Math.min(voxelsY, iy + iheight);
-		int startZ = Math.max(iz, 0);
-		int endZ = Math.min(voxelsZ, iz + idepth);
-		// FIXME optimize
-		for(iy = startY; iy < endY; iy++) {
-			for(iz = startZ; iz < endZ; iz++) {
-				for(ix = startX; ix < endX; ix++) {
-					set(ix, iy, iz, voxel);
-				}
-			}
-		}	
-	}
-	
-	@Override
-	public void getRenderables (Array<Renderable> renderables, Pool<Renderable> pool) {
-		renderedChunks = 0;
-		for(int i = 0; i < chunks.length; i++) {
-			VoxelChunk chunk = chunks[i];
-			Mesh mesh = meshes[i];
-			if(dirty[i]) {
-				int numVerts = chunk.calculateVertices(vertices);
-				numVertices[i] = numVerts / 4 * 6;
-				mesh.setVertices(vertices, 0, numVerts * VoxelChunk.VERTEX_SIZE);
-				dirty[i] = false;
-			}
-			if(numVertices[i] == 0) continue;
-			Renderable renderable = pool.obtain();
-			renderable.material = materials[i];
-			renderable.mesh = mesh;
-			renderable.meshPartOffset = 0;
-			renderable.meshPartSize = numVertices[i];
-			renderable.primitiveType = GL20.GL_TRIANGLES;
-			renderables.add(renderable);
-			renderedChunks++;
-		}
-	}
-}
\ No newline at end of file
+
+public class VoxelWorld implements RenderableProvider {
+	public static final int CHUNK_SIZE_X = 16;
+	public static final int CHUNK_SIZE_Y = 16;
+	public static final int CHUNK_SIZE_Z = 16;
+
+	public final VoxelChunk[] chunks;
+	public final Mesh[] meshes;
+	public final Material[] materials;
+	public final boolean[] dirty;
+	public final int[] numVertices;
+	public float[] vertices;
+	public final int chunksX;
+	public final int chunksY;
+	public final int chunksZ;
+	public final int voxelsX;
+	public final int voxelsY;
+	public final int voxelsZ;
+	public int renderedChunks;
+	public int numChunks;
+	private final TextureRegion[] tiles;
+
+	public VoxelWorld (TextureRegion[] tiles, int chunksX, int chunksY, int chunksZ) {
+		this.tiles = tiles;
+		this.chunks = new VoxelChunk[chunksX * chunksY * chunksZ];
+		this.chunksX = chunksX;
+		this.chunksY = chunksY;
+		this.chunksZ = chunksZ;
+		this.numChunks = chunksX * chunksY * chunksZ;
+		this.voxelsX = chunksX * CHUNK_SIZE_X;
+		this.voxelsY = chunksY * CHUNK_SIZE_Y;
+		this.voxelsZ = chunksZ * CHUNK_SIZE_Z;
+		int i = 0;
+		for (int y = 0; y < chunksY; y++) {
+			for (int z = 0; z < chunksZ; z++) {
+				for (int x = 0; x < chunksX; x++) {
+					VoxelChunk chunk = new VoxelChunk(CHUNK_SIZE_X, CHUNK_SIZE_Y, CHUNK_SIZE_Z);
+					chunk.offset.set(x * CHUNK_SIZE_X, y * CHUNK_SIZE_Y, z * CHUNK_SIZE_Z);
+					chunks[i++] = chunk;
+				}
+			}
+		}
+		int len = CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z * 6 * 6 / 3;
+		short[] indices = new short[len];
+		short j = 0;
+		for (i = 0; i < len; i += 6, j += 4) {
+			indices[i + 0] = (short)(j + 0);
+			indices[i + 1] = (short)(j + 1);
+			indices[i + 2] = (short)(j + 2);
+			indices[i + 3] = (short)(j + 2);
+			indices[i + 4] = (short)(j + 3);
+			indices[i + 5] = (short)(j + 0);
+		}
+		this.meshes = new Mesh[chunksX * chunksY * chunksZ];
+		for (i = 0; i < meshes.length; i++) {
+			meshes[i] = new Mesh(true, CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z * 6 * 4, CHUNK_SIZE_X * CHUNK_SIZE_Y
+				* CHUNK_SIZE_Z * 36 / 3, VertexAttribute.Position(), VertexAttribute.Normal());
+			meshes[i].setIndices(indices);
+		}
+		this.dirty = new boolean[chunksX * chunksY * chunksZ];
+		for (i = 0; i < dirty.length; i++)
+			dirty[i] = true;
+
+		this.numVertices = new int[chunksX * chunksY * chunksZ];
+		for (i = 0; i < numVertices.length; i++)
+			numVertices[i] = 0;
+
+		this.vertices = new float[VoxelChunk.VERTEX_SIZE * 6 * CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z];
+		this.materials = new Material[chunksX * chunksY * chunksZ];
+		for (i = 0; i < materials.length; i++) {
+			materials[i] = new Material(new ColorAttribute(ColorAttribute.Diffuse, MathUtils.random(0.5f, 1f), MathUtils.random(
+				0.5f, 1f), MathUtils.random(0.5f, 1f), 1));
+		}
+	}
+
+	public void set (float x, float y, float z, byte voxel) {
+		int ix = (int)x;
+		int iy = (int)y;
+		int iz = (int)z;
+		int chunkX = ix / CHUNK_SIZE_X;
+		if (chunkX < 0 || chunkX >= chunksX) return;
+		int chunkY = iy / CHUNK_SIZE_Y;
+		if (chunkY < 0 || chunkY >= chunksY) return;
+		int chunkZ = iz / CHUNK_SIZE_Z;
+		if (chunkZ < 0 || chunkZ >= chunksZ) return;
+		chunks[chunkX + chunkZ * chunksX + chunkY * chunksX * chunksZ].set(ix % CHUNK_SIZE_X, iy % CHUNK_SIZE_Y, iz % CHUNK_SIZE_Z,
+			voxel);
+	}
+
+	public byte get (float x, float y, float z) {
+		int ix = (int)x;
+		int iy = (int)y;
+		int iz = (int)z;
+		int chunkX = ix / CHUNK_SIZE_X;
+		if (chunkX < 0 || chunkX >= chunksX) return 0;
+		int chunkY = iy / CHUNK_SIZE_Y;
+		if (chunkY < 0 || chunkY >= chunksY) return 0;
+		int chunkZ = iz / CHUNK_SIZE_Z;
+		if (chunkZ < 0 || chunkZ >= chunksZ) return 0;
+		return chunks[chunkX + chunkZ * chunksX + chunkY * chunksX * chunksZ].get(ix % CHUNK_SIZE_X, iy % CHUNK_SIZE_Y, iz
+			% CHUNK_SIZE_Z);
+	}
+
+	public float getHighest (float x, float z) {
+		int ix = (int)x;
+		int iz = (int)z;
+		if (ix < 0 || ix >= voxelsX) return 0;
+		if (iz < 0 || iz >= voxelsZ) return 0;
+		// FIXME optimize
+		for (int y = voxelsY - 1; y > 0; y--) {
+			if (get(ix, y, iz) > 0) return y + 1;
+		}
+		return 0;
+	}
+
+	public void setColumn (float x, float y, float z, byte voxel) {
+		int ix = (int)x;
+		int iy = (int)y;
+		int iz = (int)z;
+		if (ix < 0 || ix >= voxelsX) return;
+		if (iy < 0 || iy >= voxelsY) return;
+		if (iz < 0 || iz >= voxelsZ) return;
+		// FIXME optimize
+		for (; iy > 0; iy--) {
+			set(ix, iy, iz, voxel);
+		}
+	}
+
+	public void setCube (float x, float y, float z, float width, float height, float depth, byte voxel) {
+		int ix = (int)x;
+		int iy = (int)y;
+		int iz = (int)z;
+		int iwidth = (int)width;
+		int iheight = (int)height;
+		int idepth = (int)depth;
+		int startX = Math.max(ix, 0);
+		int endX = Math.min(voxelsX, ix + iwidth);
+		int startY = Math.max(iy, 0);
+		int endY = Math.min(voxelsY, iy + iheight);
+		int startZ = Math.max(iz, 0);
+		int endZ = Math.min(voxelsZ, iz + idepth);
+		// FIXME optimize
+		for (iy = startY; iy < endY; iy++) {
+			for (iz = startZ; iz < endZ; iz++) {
+				for (ix = startX; ix < endX; ix++) {
+					set(ix, iy, iz, voxel);
+				}
+			}
+		}
+	}
+
+	@Override
+	public void getRenderables (Array<Renderable> renderables, Pool<Renderable> pool) {
+		renderedChunks = 0;
+		for (int i = 0; i < chunks.length; i++) {
+			VoxelChunk chunk = chunks[i];
+			Mesh mesh = meshes[i];
+			if (dirty[i]) {
+				int numVerts = chunk.calculateVertices(vertices);
+				numVertices[i] = numVerts / 4 * 6;
+				mesh.setVertices(vertices, 0, numVerts * VoxelChunk.VERTEX_SIZE);
+				dirty[i] = false;
+			}
+			if (numVertices[i] == 0) continue;
+			Renderable renderable = pool.obtain();
+			renderable.material = materials[i];
+			renderable.mesh = mesh;
+			renderable.meshPartOffset = 0;
+			renderable.meshPartSize = numVertices[i];
+			renderable.primitiveType = GL20.GL_TRIANGLES;
+			renderables.add(renderable);
+			renderedChunks++;
+		}
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTest.java
index 21c3599..edc105b 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTest.java
@@ -130,4 +130,4 @@ public class GwtTest extends GdxTest {
 	@Override
 	public void dispose () {
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/net/HttpRequestExample.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/net/HttpRequestExample.java
index 8688c21..f052feb 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/net/HttpRequestExample.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/net/HttpRequestExample.java
@@ -12,44 +12,40 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.net;
-
-import com.badlogic.gdx.ApplicationAdapter;
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Net.HttpMethods;
-import com.badlogic.gdx.Net.HttpRequest;
-import com.badlogic.gdx.Net.HttpResponse;
-import com.badlogic.gdx.Net.HttpResponseListener;
-import com.badlogic.gdx.tests.utils.GdxTest;
-
-/**
- * Demonstrates how to perform a simple HTTP request.
- * Need to add internet permission to AndroidManifest.xml.
- * @author badlogic
- *
- */
-public class HttpRequestExample extends GdxTest {
-	@Override
-	public void create() {
-		HttpRequest request = new HttpRequest(HttpMethods.GET);
-		request.setUrl("http://libgdx.badlogicgames.com/nightlies/dist/AUTHORS");
-		Gdx.net.sendHttpRequest(request, new HttpResponseListener() {
-			@Override
-			public void handleHttpResponse(HttpResponse httpResponse) {
-				Gdx.app.log("HttpRequestExample", "response: " + httpResponse.getResultAsString());
-			}
-
-			@Override
-			public void failed(Throwable t) {
-				Gdx.app.error("HttpRequestExample", "something went wrong", t);
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.net;
+
+import com.badlogic.gdx.ApplicationAdapter;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Net.HttpMethods;
+import com.badlogic.gdx.Net.HttpRequest;
+import com.badlogic.gdx.Net.HttpResponse;
+import com.badlogic.gdx.Net.HttpResponseListener;
+import com.badlogic.gdx.tests.utils.GdxTest;
+
+/** Demonstrates how to perform a simple HTTP request. Need to add internet permission to AndroidManifest.xml.
+ * @author badlogic */
+public class HttpRequestExample extends GdxTest {
+	@Override
+	public void create () {
+		HttpRequest request = new HttpRequest(HttpMethods.GET);
+		request.setUrl("http://libgdx.badlogicgames.com/nightlies/dist/AUTHORS");
+		Gdx.net.sendHttpRequest(request, new HttpResponseListener() {
+			@Override
+			public void handleHttpResponse (HttpResponse httpResponse) {
+				Gdx.app.log("HttpRequestExample", "response: " + httpResponse.getResultAsString());
+			}
+
+			@Override
+			public void failed (Throwable t) {
+				Gdx.app.error("HttpRequestExample", "something went wrong", t);
 			}
 
 			@Override
 			public void cancelled () {
 				Gdx.app.log("HttpRequestExample", "cancelled");
-			}
-		});
-	}
-}
\ No newline at end of file
+			}
+		});
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java
index e2fac33..23c5351 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java
@@ -122,12 +122,12 @@ public class NetAPITest extends GdxTest implements HttpResponseListener {
 					statusLabel.setText("Downloading data from " + httpRequest.getUrl());
 				}
 			};
-			
+
 			ClickListener cancelListener = new ClickListener() {
 				@Override
 				public void clicked (InputEvent event, float x, float y) {
 					super.clicked(event, x, y);
-					Gdx.net.cancelHttpRequest(httpRequest);					
+					Gdx.net.cancelHttpRequest(httpRequest);
 					statusLabel.setText("Cancelling request " + httpRequest.getUrl());
 				}
 			};
@@ -136,7 +136,7 @@ public class NetAPITest extends GdxTest implements HttpResponseListener {
 			btnCancel.setPosition(Gdx.graphics.getWidth() * 0.5f - btnCancel.getWidth() * 1.5f, 60f);
 			btnCancel.addListener(cancelListener);
 			stage.addActor(btnCancel);
-			
+
 			btnDownloadImage = new TextButton("GET Image", skin);
 			btnDownloadImage.setPosition(btnCancel.getX() + btnCancel.getWidth() + 10, 60f);
 			btnDownloadImage.addListener(clickListener);
@@ -183,10 +183,8 @@ public class NetAPITest extends GdxTest implements HttpResponseListener {
 			final byte[] rawImageBytes = httpResponse.getResult();
 			Gdx.app.postRunnable(new Runnable() {
 				public void run () {
-					Texture.setEnforcePotImages(false);
 					Pixmap pixmap = new Pixmap(rawImageBytes, 0, rawImageBytes.length);
 					texture = new Texture(pixmap);
-					Texture.setEnforcePotImages(true);
 				}
 			});
 		} else {
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/net/OpenBrowserExample.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/net/OpenBrowserExample.java
index 8bd2423..9753426 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/net/OpenBrowserExample.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/net/OpenBrowserExample.java
@@ -12,23 +12,19 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.net;
-
-import com.badlogic.gdx.ApplicationAdapter;
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.tests.utils.GdxTest;
-
-/**
- * Demonstrates how to open a browser and load
- * a specific URL.
- * @author badlogic
- *
- */
-public class OpenBrowserExample extends GdxTest {
-	@Override
-	public void create() {
-		Gdx.net.openURI("http://libgdx.badlogicgames.com");
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.net;
+
+import com.badlogic.gdx.ApplicationAdapter;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.tests.utils.GdxTest;
+
+/** Demonstrates how to open a browser and load a specific URL.
+ * @author badlogic */
+public class OpenBrowserExample extends GdxTest {
+	@Override
+	public void create () {
+		Gdx.net.openURI("http://libgdx.badlogicgames.com");
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/net/PingPongSocketExample.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/net/PingPongSocketExample.java
index 2a9163a..9cc4077 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/net/PingPongSocketExample.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/net/PingPongSocketExample.java
@@ -12,67 +12,61 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.tests.net;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import com.badlogic.gdx.ApplicationAdapter;
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Net.Protocol;
-import com.badlogic.gdx.net.ServerSocket;
-import com.badlogic.gdx.net.ServerSocketHints;
-import com.badlogic.gdx.net.Socket;
-import com.badlogic.gdx.net.SocketHints;
-import com.badlogic.gdx.tests.utils.GdxTest;
-
-/**
- * Demonstrates how to do very simple socket programming. Implements
- * a classic PING-PONG sequence, client connects to server, sends
- * message, server sends message back to client. Both client
- * and server run locally. We quit as soon as the client
- * received the PONG message from the server. This example
- * won't work in HTML. Messages are delimited by the new line character,
- * so we can use a {@link BufferedReader}.
- * @author badlogic
- *
- */
-public class PingPongSocketExample extends GdxTest {
-	@Override
-	public void create() {
-		// setup a server thread where we wait for incoming connections
-		// to the server
-		new Thread(new Runnable() {
-			@Override
-			public void run() {
-				ServerSocketHints hints = new ServerSocketHints();
-				ServerSocket server = Gdx.net.newServerSocket(Protocol.TCP, 9999, hints);
-				// wait for the next client connection
-				Socket client = server.accept(null);
-				// read message and send it back
-				try {
-					String message = new BufferedReader(new InputStreamReader(client.getInputStream())).readLine();
-					Gdx.app.log("PingPongSocketExample", "got client message: " + message);
-					client.getOutputStream().write("PONG\n".getBytes());
-				} catch (IOException e) {
-					Gdx.app.log("PingPongSocketExample", "an error occured", e);
-				}
-			}			
-		}).start();
-		
-		// create the client send a message, then wait for the 
-		// server to reply
-		SocketHints hints = new SocketHints();
-		Socket client = Gdx.net.newClientSocket(Protocol.TCP, "localhost", 9999, hints);
-		try {
-			client.getOutputStream().write("PING\n".getBytes());
-			String response = new BufferedReader(new InputStreamReader(client.getInputStream())).readLine();
-			Gdx.app.log("PingPongSocketExample", "got server message: " + response);
-		} catch (IOException e) {
-			Gdx.app.log("PingPongSocketExample", "an error occured", e);
-		}
-	}
-}
\ No newline at end of file
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests.net;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+import com.badlogic.gdx.ApplicationAdapter;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Net.Protocol;
+import com.badlogic.gdx.net.ServerSocket;
+import com.badlogic.gdx.net.ServerSocketHints;
+import com.badlogic.gdx.net.Socket;
+import com.badlogic.gdx.net.SocketHints;
+import com.badlogic.gdx.tests.utils.GdxTest;
+
+/** Demonstrates how to do very simple socket programming. Implements a classic PING-PONG sequence, client connects to server,
+ * sends message, server sends message back to client. Both client and server run locally. We quit as soon as the client received
+ * the PONG message from the server. This example won't work in HTML. Messages are delimited by the new line character, so we can
+ * use a {@link BufferedReader}.
+ * @author badlogic */
+public class PingPongSocketExample extends GdxTest {
+	@Override
+	public void create () {
+		// setup a server thread where we wait for incoming connections
+		// to the server
+		new Thread(new Runnable() {
+			@Override
+			public void run () {
+				ServerSocketHints hints = new ServerSocketHints();
+				ServerSocket server = Gdx.net.newServerSocket(Protocol.TCP, 9999, hints);
+				// wait for the next client connection
+				Socket client = server.accept(null);
+				// read message and send it back
+				try {
+					String message = new BufferedReader(new InputStreamReader(client.getInputStream())).readLine();
+					Gdx.app.log("PingPongSocketExample", "got client message: " + message);
+					client.getOutputStream().write("PONG\n".getBytes());
+				} catch (IOException e) {
+					Gdx.app.log("PingPongSocketExample", "an error occured", e);
+				}
+			}
+		}).start();
+
+		// create the client send a message, then wait for the
+		// server to reply
+		SocketHints hints = new SocketHints();
+		Socket client = Gdx.net.newClientSocket(Protocol.TCP, "localhost", 9999, hints);
+		try {
+			client.getOutputStream().write("PING\n".getBytes());
+			String response = new BufferedReader(new InputStreamReader(client.getInputStream())).readLine();
+			Gdx.app.log("PingPongSocketExample", "got server message: " + response);
+		} catch (IOException e) {
+			Gdx.app.log("PingPongSocketExample", "an error occured", e);
+		}
+	}
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
index 7b6a38e..b260e64 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
@@ -35,33 +35,24 @@ import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Pool;
 
-/**
- * Super Mario Brothers like very basic platformer, using a tile map build
- * via <a href="http://www.mapeditor.org/">Tiled</a> and a tileset
- * and sprites by <a href="http://www.vickiwenderlich.com/">Vicky Wenderlich</a></p>
+/** Super Mario Brothers like very basic platformer, using a tile map build via <a href="http://www.mapeditor.org/">Tiled</a> and a
+ * tileset and sprites by <a href="http://www.vickiwenderlich.com/">Vicky Wenderlich</a></p>
  * 
- * Shows simple platformer collision detection as well as on-the-fly map modifications
- * through destructable blocks!
- * @author mzechner
- *
- */
+ * Shows simple platformer collision detection as well as on-the-fly map modifications through destructable blocks!
+ * @author mzechner */
 public class SuperKoalio extends GdxTest {
-	/**
-	 * The player character, has state and state time, 
-	 */
+	/** The player character, has state and state time, */
 	static class Koala {
 		static float WIDTH;
 		static float HEIGHT;
 		static float MAX_VELOCITY = 10f;
 		static float JUMP_VELOCITY = 40f;
 		static float DAMPING = 0.87f;
-		
+
 		enum State {
-			Standing,
-			Walking,
-			Jumping
+			Standing, Walking, Jumping
 		}
-		
+
 		final Vector2 position = new Vector2();
 		final Vector2 velocity = new Vector2();
 		State state = State.Walking;
@@ -69,7 +60,7 @@ public class SuperKoalio extends GdxTest {
 		boolean facesRight = true;
 		boolean grounded = false;
 	}
-	
+
 	private TiledMap map;
 	private OrthogonalTiledMapRenderer renderer;
 	private OrthographicCamera camera;
@@ -85,34 +76,34 @@ public class SuperKoalio extends GdxTest {
 		}
 	};
 	private Array<Rectangle> tiles = new Array<Rectangle>();
-	
+
 	private static final float GRAVITY = -2.5f;
-	
+
 	@Override
 	public void create () {
 		// load the koala frames, split them, and assign them to Animations
-		koalaTexture = new Texture("data/maps/tiled/super-koalio/koalio.png"); 
+		koalaTexture = new Texture("data/maps/tiled/super-koalio/koalio.png");
 		TextureRegion[] regions = TextureRegion.split(koalaTexture, 18, 26)[0];
 		stand = new Animation(0, regions[0]);
 		jump = new Animation(0, regions[1]);
 		walk = new Animation(0.15f, regions[2], regions[3], regions[4]);
 		walk.setPlayMode(Animation.LOOP_PINGPONG);
-		
+
 		// figure out the width and height of the koala for collision
 		// detection and rendering by converting a koala frames pixel
 		// size into world units (1 unit == 16 pixels)
 		Koala.WIDTH = 1 / 16f * regions[0].getRegionWidth();
 		Koala.HEIGHT = 1 / 16f * regions[0].getRegionHeight();
-		
+
 		// load the map, set the unit scale to 1/16 (1 unit == 16 pixels)
 		map = new TmxMapLoader().load("data/maps/tiled/super-koalio/level1.tmx");
 		renderer = new OrthogonalTiledMapRenderer(map, 1 / 16f);
-		
+
 		// create an orthographic camera, shows us 30x20 units of the world
 		camera = new OrthographicCamera();
 		camera.setToOrtho(false, 30, 20);
 		camera.update();
-		
+
 		// create the Koala we want to move around the world
 		koala = new Koala();
 		koala.position.set(20, 20);
@@ -123,75 +114,76 @@ public class SuperKoalio extends GdxTest {
 		// clear the screen
 		Gdx.gl.glClearColor(0.7f, 0.7f, 1.0f, 1);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		
+
 		// get the delta time
 		float deltaTime = Gdx.graphics.getDeltaTime();
-		
+
 		// update the koala (process input, collision detection, position update)
 		updateKoala(deltaTime);
-		
+
 		// let the camera follow the koala, x-axis only
 		camera.position.x = koala.position.x;
 		camera.update();
-		
+
 		// set the tile map rendere view based on what the
 		// camera sees and render the map
 		renderer.setView(camera);
 		renderer.render();
-		
+
 		// render the koala
 		renderKoala(deltaTime);
 	}
-	
+
 	private Vector2 tmp = new Vector2();
-	private void updateKoala(float deltaTime) {
-		if(deltaTime == 0) return;
-		koala.stateTime += deltaTime;	
-		
+
+	private void updateKoala (float deltaTime) {
+		if (deltaTime == 0) return;
+		koala.stateTime += deltaTime;
+
 		// check input and apply to velocity & state
-		if((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.75f, 1)) && koala.grounded) {
+		if ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.75f, 1)) && koala.grounded) {
 			koala.velocity.y += Koala.JUMP_VELOCITY;
 			koala.state = Koala.State.Jumping;
 			koala.grounded = false;
 		}
-		
-		if(Gdx.input.isKeyPressed(Keys.LEFT) || Gdx.input.isKeyPressed(Keys.A) || isTouched(0, 0.25f)) {
+
+		if (Gdx.input.isKeyPressed(Keys.LEFT) || Gdx.input.isKeyPressed(Keys.A) || isTouched(0, 0.25f)) {
 			koala.velocity.x = -Koala.MAX_VELOCITY;
-			if(koala.grounded) koala.state = Koala.State.Walking;
+			if (koala.grounded) koala.state = Koala.State.Walking;
 			koala.facesRight = false;
 		}
-		
-		if(Gdx.input.isKeyPressed(Keys.RIGHT) || Gdx.input.isKeyPressed(Keys.D) || isTouched(0.25f, 0.5f)) {
+
+		if (Gdx.input.isKeyPressed(Keys.RIGHT) || Gdx.input.isKeyPressed(Keys.D) || isTouched(0.25f, 0.5f)) {
 			koala.velocity.x = Koala.MAX_VELOCITY;
-			if(koala.grounded) koala.state = Koala.State.Walking;
+			if (koala.grounded) koala.state = Koala.State.Walking;
 			koala.facesRight = true;
 		}
-		
+
 		// apply gravity if we are falling
 		koala.velocity.add(0, GRAVITY);
-		
+
 		// clamp the velocity to the maximum, x-axis only
-		if(Math.abs(koala.velocity.x) > Koala.MAX_VELOCITY) {
+		if (Math.abs(koala.velocity.x) > Koala.MAX_VELOCITY) {
 			koala.velocity.x = Math.signum(koala.velocity.x) * Koala.MAX_VELOCITY;
 		}
-		
+
 		// clamp the velocity to 0 if it's < 1, and set the state to standign
-		if(Math.abs(koala.velocity.x) < 1) {
+		if (Math.abs(koala.velocity.x) < 1) {
 			koala.velocity.x = 0;
-			if(koala.grounded) koala.state = Koala.State.Standing;
+			if (koala.grounded) koala.state = Koala.State.Standing;
 		}
-		
+
 		// multiply by delta time so we know how far we go
 		// in this frame
 		koala.velocity.scl(deltaTime);
-		
+
 		// perform collision detection & response, on each axis, separately
 		// if the koala is moving right, check the tiles to the right of it's
 		// right bounding box edge, otherwise check the ones to the left
 		Rectangle koalaRect = rectPool.obtain();
 		koalaRect.set(koala.position.x, koala.position.y, Koala.WIDTH, Koala.HEIGHT);
 		int startX, startY, endX, endY;
-		if(koala.velocity.x > 0) {
+		if (koala.velocity.x > 0) {
 			startX = endX = (int)(koala.position.x + Koala.WIDTH + koala.velocity.x);
 		} else {
 			startX = endX = (int)(koala.position.x + koala.velocity.x);
@@ -200,17 +192,17 @@ public class SuperKoalio extends GdxTest {
 		endY = (int)(koala.position.y + Koala.HEIGHT);
 		getTiles(startX, startY, endX, endY, tiles);
 		koalaRect.x += koala.velocity.x;
-		for(Rectangle tile: tiles) {
-			if(koalaRect.overlaps(tile)) {
+		for (Rectangle tile : tiles) {
+			if (koalaRect.overlaps(tile)) {
 				koala.velocity.x = 0;
 				break;
 			}
 		}
 		koalaRect.x = koala.position.x;
-		
+
 		// if the koala is moving upwards, check the tiles to the top of it's
 		// top bounding box edge, otherwise check the ones to the bottom
-		if(koala.velocity.y > 0) {
+		if (koala.velocity.y > 0) {
 			startY = endY = (int)(koala.position.y + Koala.HEIGHT + koala.velocity.y);
 		} else {
 			startY = endY = (int)(koala.position.y + koala.velocity.y);
@@ -219,12 +211,12 @@ public class SuperKoalio extends GdxTest {
 		endX = (int)(koala.position.x + Koala.WIDTH);
 		getTiles(startX, startY, endX, endY, tiles);
 		koalaRect.y += koala.velocity.y;
-		for(Rectangle tile: tiles) {
-			if(koalaRect.overlaps(tile)) {
+		for (Rectangle tile : tiles) {
+			if (koalaRect.overlaps(tile)) {
 				// we actually reset the koala y-position here
 				// so it is just below/above the tile we collided with
 				// this removes bouncing :)
-				if(koala.velocity.y > 0) {
+				if (koala.velocity.y > 0) {
 					koala.position.y = tile.y - Koala.HEIGHT;
 					// we hit a block jumping upwards, let's destroy it!
 					TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);
@@ -239,38 +231,38 @@ public class SuperKoalio extends GdxTest {
 			}
 		}
 		rectPool.free(koalaRect);
-		
-		// unscale the velocity by the inverse delta time and set 
+
+		// unscale the velocity by the inverse delta time and set
 		// the latest position
 		koala.position.add(koala.velocity);
-		koala.velocity.scl(1/deltaTime);
-		
+		koala.velocity.scl(1 / deltaTime);
+
 		// Apply damping to the velocity on the x-axis so we don't
 		// walk infinitely once a key was pressed
 		koala.velocity.x *= Koala.DAMPING;
-		
+
 	}
 
-	private boolean isTouched(float startX, float endX) {
+	private boolean isTouched (float startX, float endX) {
 		// check if any finge is touch the area between startX and endX
 		// startX/endX are given between 0 (left edge of the screen) and 1 (right edge of the screen)
-		for(int i = 0; i < 2; i++) {
+		for (int i = 0; i < 2; i++) {
 			float x = Gdx.input.getX() / (float)Gdx.graphics.getWidth();
-			if(Gdx.input.isTouched(i) && (x >= startX && x <= endX)) {
+			if (Gdx.input.isTouched(i) && (x >= startX && x <= endX)) {
 				return true;
 			}
 		}
 		return false;
 	}
-	
-	private void getTiles(int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {
+
+	private void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {
 		TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);
 		rectPool.freeAll(tiles);
 		tiles.clear();
-		for(int y = startY; y <= endY; y++) {
-			for(int x = startX; x <= endX; x++) {
+		for (int y = startY; y <= endY; y++) {
+			for (int x = startX; x <= endX; x++) {
 				Cell cell = layer.getCell(x, y);
-				if(cell != null) {
+				if (cell != null) {
 					Rectangle rect = rectPool.obtain();
 					rect.set(x, y, 1, 1);
 					tiles.add(rect);
@@ -278,22 +270,28 @@ public class SuperKoalio extends GdxTest {
 			}
 		}
 	}
-	
-	private void renderKoala(float deltaTime) {
+
+	private void renderKoala (float deltaTime) {
 		// based on the koala state, get the animation frame
 		TextureRegion frame = null;
-		switch(koala.state) {
-			case Standing: frame = stand.getKeyFrame(koala.stateTime); break;
-			case Walking: frame = walk.getKeyFrame(koala.stateTime); break;
-			case Jumping: frame = jump.getKeyFrame(koala.stateTime); break; 
+		switch (koala.state) {
+		case Standing:
+			frame = stand.getKeyFrame(koala.stateTime);
+			break;
+		case Walking:
+			frame = walk.getKeyFrame(koala.stateTime);
+			break;
+		case Jumping:
+			frame = jump.getKeyFrame(koala.stateTime);
+			break;
 		}
-		
+
 		// draw the koala, depending on the current velocity
 		// on the x-axis, draw the koala facing either right
 		// or left
 		Batch batch = renderer.getSpriteBatch();
 		batch.begin();
-		if(koala.facesRight) {
+		if (koala.facesRight) {
 			batch.draw(frame, koala.position.x, koala.position.y, Koala.WIDTH, Koala.HEIGHT);
 		} else {
 			batch.draw(frame, koala.position.x + Koala.WIDTH, koala.position.y, -Koala.WIDTH, Koala.HEIGHT);
