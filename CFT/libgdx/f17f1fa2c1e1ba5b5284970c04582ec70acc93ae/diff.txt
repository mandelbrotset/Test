diff --git a/extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/OuyaControllers.java b/extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/OuyaControllers.java
index 080d8f1..b6ecd18 100644
--- a/extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/OuyaControllers.java
+++ b/extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/OuyaControllers.java
@@ -183,11 +183,9 @@ public class OuyaControllers {
 		}
 
 		public void addListener (ControllerListener listener) {
-			listeners.add(listener);
 		}
 
 		public void removeListener (ControllerListener listener) {
-			listeners.removeValue(listener, true);
 		}
 
 		public String getName () {
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/.classpath b/extensions/gdx-controllers/gdx-controllers-desktop/.classpath
index f4c9643..d5f1db6 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/.classpath
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/.classpath
@@ -6,6 +6,5 @@
 	<classpathentry combineaccessrules="false" exported="true" kind="src" path="/gdx-backend-lwjgl"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/gdx-jnigen"/>
 	<classpathentry exported="true" kind="lib" path="libs/gdx-controllers-desktop-natives.jar"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/gdx-controllers"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.Ois.cpp b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.Ois.cpp
deleted file mode 100755
index ff55910..0000000
--- a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.Ois.cpp
+++ /dev/null
@@ -1,81 +0,0 @@
-#include <com.badlogic.gdx.controllers.Ois.h>
-
-//@line:60
-
-	#include <OISJoyStick.h>
-	#include <OISInputManager.h>
-	#include <sstream>
-	
-	#ifdef _WIN32
-	#include <windows.h>
-	#endif
-	JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_Ois_getWindowHandleWindowsHack(JNIEnv* env, jobject object) {
-
-
-//@line:75
-
-	#ifdef _WIN32
-		HWND joyHwnd = CreateWindow(
-			"Static",         // Class Name (using static so I don't have to register a class)
-			"JoystickWindow", // Window Name
-			WS_BORDER,        // Window Style
-			0, 0, 0, 0,       // x, y, width, height
-			0,                // parent handle
-			0,                // Menu handle
-			0,                // Instance handle
-			0);               // Additional Params
-		printf("hwnd: %d\n", joyHwnd);
-		fflush(stdout);
-		return (jlong)joyHwnd;
-	#else
-		return 0;
-	#endif
-	
-
-}
-
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_Ois_createInputManager(JNIEnv* env, jobject object, jlong hwnd) {
-
-
-//@line:94
-
-		std::ostringstream hwndStr;
-		hwndStr << hwnd;
-		OIS::ParamList params;
-		params.insert(std::make_pair("WINDOW", hwndStr.str()));
-	//	params.insert(std::make_pair("w32_joystick", "DISCL_BACKGROUND"));
-	//	params.insert(std::make_pair("w32_joystick", "DISCL_NONEXCLUSIVE"));
-		OIS::InputManager *inputManager = OIS::InputManager::createInputSystem(params);
-		return (jlong)inputManager;
-	
-
-}
-
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_Ois_getNumJoysticks(JNIEnv* env, jobject object, jlong inputManagerPtr) {
-
-
-//@line:105
-
-		OIS::InputManager* inputManager = (OIS::InputManager*)inputManagerPtr;
-	 	return inputManager->getNumberOfDevices(OIS::OISJoyStick);
-	
-
-}
-
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_Ois_createJoystick(JNIEnv* env, jobject object, jlong inputManagerPtr) {
-
-
-//@line:110
-
-		OIS::InputManager* inputManager = (OIS::InputManager*)inputManagerPtr;
-		try {
-			return (jlong)static_cast<OIS::JoyStick*>(inputManager->createInputObject(OIS::OISJoyStick, true));
-		} catch (std::exception &ex) {
-				printf("couldn't create joystick object!\n%s\n", ex.what());
-				fflush(stdout);
-				return 0;
-		}
-	
-
-}
-
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.Ois.h b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.Ois.h
deleted file mode 100755
index 94e29d0..0000000
--- a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.Ois.h
+++ /dev/null
@@ -1,45 +0,0 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_controllers_Ois */
-
-#ifndef _Included_com_badlogic_gdx_controllers_Ois
-#define _Included_com_badlogic_gdx_controllers_Ois
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_controllers_Ois
- * Method:    getWindowHandleWindowsHack
- * Signature: ()J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_Ois_getWindowHandleWindowsHack
-  (JNIEnv *, jobject);
-
-/*
- * Class:     com_badlogic_gdx_controllers_Ois
- * Method:    createInputManager
- * Signature: (J)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_Ois_createInputManager
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_controllers_Ois
- * Method:    getNumJoysticks
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_Ois_getNumJoysticks
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_controllers_Ois
- * Method:    createJoystick
- * Signature: (J)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_Ois_createJoystick
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.OisJoystick.cpp b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.OisJoystick.cpp
deleted file mode 100755
index 885db46..0000000
--- a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.OisJoystick.cpp
+++ /dev/null
@@ -1,135 +0,0 @@
-#include <com.badlogic.gdx.controllers.OisJoystick.h>
-
-//@line:102
-
-	#include <OISJoyStick.h>
-	#include <OISInputManager.h>
-	 
-	static jclass callbackClass = 0;
-	static jmethodID povMovedId = 0;
-	static jmethodID axisMovedId = 0;
-	static jmethodID sliderMovedId = 0;
-	static jmethodID buttonPressedId = 0;
-	static jmethodID buttonReleasedId = 0;
-	
-	static void initializeClasses(JNIEnv* env, jobject clazz) {
-		// we leak one global ref
-		if(callbackClass == 0) {
-			callbackClass = (jclass)env->NewGlobalRef(env->GetObjectClass(clazz));
-			povMovedId = env->GetMethodID(callbackClass, "povMoved", "(II)V");
-			axisMovedId = env->GetMethodID(callbackClass, "axisMoved", "(II)V");
-			sliderMovedId = env->GetMethodID(callbackClass, "sliderMoved", "(III)V");
-			buttonPressedId = env->GetMethodID(callbackClass, "buttonPressed", "(I)V");
-			buttonReleasedId = env->GetMethodID(callbackClass, "buttonReleased", "(I)V");
-		}
-	}
-
-	class Listener : public OIS::JoyStickListener {
-	public:
-		Listener(JNIEnv* env, jobject obj) {
-			this->env = env;
-			this->obj = obj;
-		}
-
-		JNIEnv* env;
-		jobject obj;
-
-		bool povMoved (const OIS::JoyStickEvent &event, int pov);
-		bool axisMoved (const OIS::JoyStickEvent &event, int axis);
-		bool sliderMoved (const OIS::JoyStickEvent &event, int sliderID);
-		bool buttonPressed (const OIS::JoyStickEvent &event, int button);
-		bool buttonReleased (const OIS::JoyStickEvent &event, int button);
-	};
-
-	bool Listener::buttonPressed (const OIS::JoyStickEvent &event, int buttonId) {
-		env->CallVoidMethod(obj, buttonPressedId, (jint)buttonId);
-		return true;
-	}
-
-	bool Listener::buttonReleased (const OIS::JoyStickEvent &event, int buttonId) {
-		env->CallVoidMethod(obj, buttonReleasedId, (jint)buttonId);
-		return true;
-	}
-
-	bool Listener::axisMoved (const OIS::JoyStickEvent &event, int axisId) {
-		env->CallVoidMethod(obj, axisMovedId, (jint)axisId, (jint)event.state.mAxes[axisId].abs);
-		return true;
-	}
-
-	bool Listener::povMoved (const OIS::JoyStickEvent &event, int povId) {
-		env->CallVoidMethod(obj, povMovedId, (jint)povId, (jint)event.state.mPOV[povId].direction);
-		return true;
-	}
-
-	bool Listener::sliderMoved (const OIS::JoyStickEvent &event, int sliderId) {
-		env->CallVoidMethod(obj, sliderMovedId, (jint)sliderId,
-			(jint)event.state.mSliders[sliderId].abX, (jint)event.state.mSliders[sliderId].abY);
-		return true;
-	}
-	 JNIEXPORT void JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_initialize(JNIEnv* env, jobject object, jobject joystick) {
-
-
-//@line:169
-
-		initializeClasses(env, joystick);
-	
-
-}
-
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_updateJni(JNIEnv* env, jobject object, jlong joystickPtr, jobject callback) {
-
-
-//@line:173
-
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		Listener listener(env, callback);
-		joystick->setEventCallback(&listener);
-		joystick->capture();
-	
-
-}
-
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_getAxesCountJni(JNIEnv* env, jobject object, jlong joystickPtr) {
-
-
-//@line:180
-
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		return joystick->getNumberOfComponents(OIS::OIS_Axis);
-	
-
-}
-
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_getButtonCountJni(JNIEnv* env, jobject object, jlong joystickPtr) {
-
-
-//@line:185
-
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		return joystick->getNumberOfComponents(OIS::OIS_Button);
-	
-
-}
-
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_getPovCountJni(JNIEnv* env, jobject object, jlong joystickPtr) {
-
-
-//@line:190
-
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		return joystick->getNumberOfComponents(OIS::OIS_POV);
-	
-
-}
-
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_getSliderCountJni(JNIEnv* env, jobject object, jlong joystickPtr) {
-
-
-//@line:195
-
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		return joystick->getNumberOfComponents(OIS::OIS_Slider);
-	 
-
-}
-
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.OisJoystick.h b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.OisJoystick.h
deleted file mode 100755
index 9f29a6b..0000000
--- a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.OisJoystick.h
+++ /dev/null
@@ -1,76 +0,0 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_controllers_OisJoystick */
-
-#ifndef _Included_com_badlogic_gdx_controllers_OisJoystick
-#define _Included_com_badlogic_gdx_controllers_OisJoystick
-#ifdef __cplusplus
-extern "C" {
-#endif
-#undef com_badlogic_gdx_controllers_OisJoystick_MIN_AXIS
-#define com_badlogic_gdx_controllers_OisJoystick_MIN_AXIS -32768L
-#undef com_badlogic_gdx_controllers_OisJoystick_MAX_AXIS
-#define com_badlogic_gdx_controllers_OisJoystick_MAX_AXIS 32767L
-/*
- * Class:     com_badlogic_gdx_controllers_OisJoystick
- * Method:    initialize
- * Signature: (Lcom/badlogic/gdx/controllers/OisJoystick;)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_initialize
-  (JNIEnv *, jobject, jobject);
-
-/*
- * Class:     com_badlogic_gdx_controllers_OisJoystick
- * Method:    updateJni
- * Signature: (JLcom/badlogic/gdx/controllers/OisJoystick;)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_updateJni
-  (JNIEnv *, jobject, jlong, jobject);
-
-/*
- * Class:     com_badlogic_gdx_controllers_OisJoystick
- * Method:    getAxesCountJni
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_getAxesCountJni
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_controllers_OisJoystick
- * Method:    getButtonCountJni
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_getButtonCountJni
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_controllers_OisJoystick
- * Method:    getPovCountJni
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_getPovCountJni
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_controllers_OisJoystick
- * Method:    getSliderCountJni
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_OisJoystick_getSliderCountJni
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
-/* Header for class com_badlogic_gdx_controllers_OisJoystick_OisPov */
-
-#ifndef _Included_com_badlogic_gdx_controllers_OisJoystick_OisPov
-#define _Included_com_badlogic_gdx_controllers_OisJoystick_OisPov
-#ifdef __cplusplus
-extern "C" {
-#endif
-#ifdef __cplusplus
-}
-#endif
-#endif
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.Ois.cpp b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.Ois.cpp
new file mode 100755
index 0000000..9de6d12
--- /dev/null
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.Ois.cpp
@@ -0,0 +1,81 @@
+#include <com.badlogic.gdx.controllers.desktop.ois.Ois.h>
+
+//@line:63
+
+	#include <OISJoyStick.h>
+	#include <OISInputManager.h>
+	#include <sstream>
+	
+	#ifdef _WIN32
+	#include <windows.h>
+	#endif
+	JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_Ois_getWindowHandleWindowsHack(JNIEnv* env, jobject object) {
+
+
+//@line:78
+
+	#ifdef _WIN32
+		HWND joyHwnd = CreateWindow(
+			"Static",         // Class Name (using static so I don't have to register a class)
+			"JoystickWindow", // Window Name
+			WS_BORDER,        // Window Style
+			0, 0, 0, 0,       // x, y, width, height
+			0,                // parent handle
+			0,                // Menu handle
+			0,                // Instance handle
+			0);               // Additional Params
+		printf("hwnd: %d\n", joyHwnd);
+		fflush(stdout);
+		return (jlong)joyHwnd;
+	#else
+		return 0;
+	#endif
+	
+
+}
+
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_Ois_createInputManager(JNIEnv* env, jobject object, jlong hwnd) {
+
+
+//@line:97
+
+		std::ostringstream hwndStr;
+		hwndStr << hwnd;
+		OIS::ParamList params;
+		params.insert(std::make_pair("WINDOW", hwndStr.str()));
+	//	params.insert(std::make_pair("w32_joystick", "DISCL_BACKGROUND"));
+	//	params.insert(std::make_pair("w32_joystick", "DISCL_NONEXCLUSIVE"));
+		OIS::InputManager *inputManager = OIS::InputManager::createInputSystem(params);
+		return (jlong)inputManager;
+	
+
+}
+
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_Ois_getNumJoysticks(JNIEnv* env, jobject object, jlong inputManagerPtr) {
+
+
+//@line:108
+
+		OIS::InputManager* inputManager = (OIS::InputManager*)inputManagerPtr;
+	 	return inputManager->getNumberOfDevices(OIS::OISJoyStick);
+	
+
+}
+
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_Ois_createJoystick(JNIEnv* env, jobject object, jlong inputManagerPtr) {
+
+
+//@line:113
+
+		OIS::InputManager* inputManager = (OIS::InputManager*)inputManagerPtr;
+		try {
+			return (jlong)static_cast<OIS::JoyStick*>(inputManager->createInputObject(OIS::OISJoyStick, true));
+		} catch (std::exception &ex) {
+				printf("couldn't create joystick object!\n%s\n", ex.what());
+				fflush(stdout);
+				return 0;
+		}
+	
+
+}
+
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.Ois.h b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.Ois.h
new file mode 100755
index 0000000..9a77854
--- /dev/null
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.Ois.h
@@ -0,0 +1,45 @@
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_controllers_desktop_ois_Ois */
+
+#ifndef _Included_com_badlogic_gdx_controllers_desktop_ois_Ois
+#define _Included_com_badlogic_gdx_controllers_desktop_ois_Ois
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_Ois
+ * Method:    getWindowHandleWindowsHack
+ * Signature: ()J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_Ois_getWindowHandleWindowsHack
+  (JNIEnv *, jobject);
+
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_Ois
+ * Method:    createInputManager
+ * Signature: (J)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_Ois_createInputManager
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_Ois
+ * Method:    getNumJoysticks
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_Ois_getNumJoysticks
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_Ois
+ * Method:    createJoystick
+ * Signature: (J)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_Ois_createJoystick
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.OisJoystick.cpp b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.OisJoystick.cpp
new file mode 100755
index 0000000..cd89a86
--- /dev/null
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.OisJoystick.cpp
@@ -0,0 +1,135 @@
+#include <com.badlogic.gdx.controllers.desktop.ois.OisJoystick.h>
+
+//@line:122
+
+	#include <OISJoyStick.h>
+	#include <OISInputManager.h>
+	 
+	static jclass callbackClass = 0;
+	static jmethodID povMovedId = 0;
+	static jmethodID axisMovedId = 0;
+	static jmethodID sliderMovedId = 0;
+	static jmethodID buttonPressedId = 0;
+	static jmethodID buttonReleasedId = 0;
+	
+	static void initializeClasses(JNIEnv* env, jobject clazz) {
+		// we leak one global ref
+		if(callbackClass == 0) {
+			callbackClass = (jclass)env->NewGlobalRef(env->GetObjectClass(clazz));
+			povMovedId = env->GetMethodID(callbackClass, "povMoved", "(II)V");
+			axisMovedId = env->GetMethodID(callbackClass, "axisMoved", "(II)V");
+			sliderMovedId = env->GetMethodID(callbackClass, "sliderMoved", "(III)V");
+			buttonPressedId = env->GetMethodID(callbackClass, "buttonPressed", "(I)V");
+			buttonReleasedId = env->GetMethodID(callbackClass, "buttonReleased", "(I)V");
+		}
+	}
+
+	class Listener : public OIS::JoyStickListener {
+	public:
+		Listener(JNIEnv* env, jobject obj) {
+			this->env = env;
+			this->obj = obj;
+		}
+
+		JNIEnv* env;
+		jobject obj;
+
+		bool povMoved (const OIS::JoyStickEvent &event, int pov);
+		bool axisMoved (const OIS::JoyStickEvent &event, int axis);
+		bool sliderMoved (const OIS::JoyStickEvent &event, int sliderID);
+		bool buttonPressed (const OIS::JoyStickEvent &event, int button);
+		bool buttonReleased (const OIS::JoyStickEvent &event, int button);
+	};
+
+	bool Listener::buttonPressed (const OIS::JoyStickEvent &event, int buttonId) {
+		env->CallVoidMethod(obj, buttonPressedId, (jint)buttonId);
+		return true;
+	}
+
+	bool Listener::buttonReleased (const OIS::JoyStickEvent &event, int buttonId) {
+		env->CallVoidMethod(obj, buttonReleasedId, (jint)buttonId);
+		return true;
+	}
+
+	bool Listener::axisMoved (const OIS::JoyStickEvent &event, int axisId) {
+		env->CallVoidMethod(obj, axisMovedId, (jint)axisId, (jint)event.state.mAxes[axisId].abs);
+		return true;
+	}
+
+	bool Listener::povMoved (const OIS::JoyStickEvent &event, int povId) {
+		env->CallVoidMethod(obj, povMovedId, (jint)povId, (jint)event.state.mPOV[povId].direction);
+		return true;
+	}
+
+	bool Listener::sliderMoved (const OIS::JoyStickEvent &event, int sliderId) {
+		env->CallVoidMethod(obj, sliderMovedId, (jint)sliderId,
+			(jint)event.state.mSliders[sliderId].abX, (jint)event.state.mSliders[sliderId].abY);
+		return true;
+	}
+	 JNIEXPORT void JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_initialize(JNIEnv* env, jobject object, jobject joystick) {
+
+
+//@line:189
+
+		initializeClasses(env, joystick);
+	
+
+}
+
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_updateJni(JNIEnv* env, jobject object, jlong joystickPtr, jobject callback) {
+
+
+//@line:193
+
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		Listener listener(env, callback);
+		joystick->setEventCallback(&listener);
+		joystick->capture();
+	
+
+}
+
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_getAxesCountJni(JNIEnv* env, jobject object, jlong joystickPtr) {
+
+
+//@line:200
+
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		return joystick->getNumberOfComponents(OIS::OIS_Axis);
+	
+
+}
+
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_getButtonCountJni(JNIEnv* env, jobject object, jlong joystickPtr) {
+
+
+//@line:205
+
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		return joystick->getNumberOfComponents(OIS::OIS_Button);
+	
+
+}
+
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_getPovCountJni(JNIEnv* env, jobject object, jlong joystickPtr) {
+
+
+//@line:210
+
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		return joystick->getNumberOfComponents(OIS::OIS_POV);
+	
+
+}
+
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_getSliderCountJni(JNIEnv* env, jobject object, jlong joystickPtr) {
+
+
+//@line:215
+
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		return joystick->getNumberOfComponents(OIS::OIS_Slider);
+	 
+
+}
+
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.OisJoystick.h b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.OisJoystick.h
new file mode 100755
index 0000000..d40332f
--- /dev/null
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/jni/com.badlogic.gdx.controllers.desktop.ois.OisJoystick.h
@@ -0,0 +1,76 @@
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_controllers_desktop_ois_OisJoystick */
+
+#ifndef _Included_com_badlogic_gdx_controllers_desktop_ois_OisJoystick
+#define _Included_com_badlogic_gdx_controllers_desktop_ois_OisJoystick
+#ifdef __cplusplus
+extern "C" {
+#endif
+#undef com_badlogic_gdx_controllers_desktop_ois_OisJoystick_MIN_AXIS
+#define com_badlogic_gdx_controllers_desktop_ois_OisJoystick_MIN_AXIS -32768L
+#undef com_badlogic_gdx_controllers_desktop_ois_OisJoystick_MAX_AXIS
+#define com_badlogic_gdx_controllers_desktop_ois_OisJoystick_MAX_AXIS 32767L
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_OisJoystick
+ * Method:    initialize
+ * Signature: (Lcom/badlogic/gdx/controllers/desktop/ois/OisJoystick;)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_initialize
+  (JNIEnv *, jobject, jobject);
+
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_OisJoystick
+ * Method:    updateJni
+ * Signature: (JLcom/badlogic/gdx/controllers/desktop/ois/OisJoystick;)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_updateJni
+  (JNIEnv *, jobject, jlong, jobject);
+
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_OisJoystick
+ * Method:    getAxesCountJni
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_getAxesCountJni
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_OisJoystick
+ * Method:    getButtonCountJni
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_getButtonCountJni
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_OisJoystick
+ * Method:    getPovCountJni
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_getPovCountJni
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_controllers_desktop_ois_OisJoystick
+ * Method:    getSliderCountJni
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_getSliderCountJni
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
+/* Header for class com_badlogic_gdx_controllers_desktop_ois_OisJoystick_OisPov */
+
+#ifndef _Included_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_OisPov
+#define _Included_com_badlogic_gdx_controllers_desktop_ois_OisJoystick_OisPov
+#ifdef __cplusplus
+extern "C" {
+#endif
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar b/extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar
index e3473d1..fee96f3 100755
Binary files a/extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar and b/extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar differ
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllerManager.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllerManager.java
deleted file mode 100644
index c0790f4..0000000
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllerManager.java
+++ /dev/null
@@ -1,26 +0,0 @@
-
-package com.badlogic.gdx.controllers;
-
-import com.badlogic.gdx.utils.Array;
-
-/** @author Nathan Sweet */
-public class DesktopControllerManager implements ControllerManager {
-	final Array<Controller> controllers = new Array();
-	final Array<ControllerListener> listeners = new Array();
-
-	public DesktopControllerManager () {
-		new OisControllers(this);
-	}
-
-	public Array<Controller> getControllers () {
-		return controllers;
-	}
-
-	public void addListener (ControllerListener listener) {
-		listeners.add(listener);
-	}
-
-	public void removeListener (ControllerListener listener) {
-		listeners.removeValue(listener, true);
-	}
-}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllers.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllers.java
index 78ba02e..b81e559 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllers.java
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllers.java
@@ -14,44 +14,12 @@ import org.lwjgl.opengl.Display;
 import com.badlogic.gdx.ApplicationAdapter;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglFrame;
+import com.badlogic.gdx.controllers.desktop.ois.Ois;
+import com.badlogic.gdx.controllers.desktop.ois.OisCallback;
+import com.badlogic.gdx.controllers.desktop.ois.OisJoystick;
+import com.badlogic.gdx.controllers.desktop.ois.OisJoystick.OisPov;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
 public class DesktopControllers {
-	
-	
-	
-
-	public static void main (String[] args) throws Exception {
-		DesktopControllersBuild.main(null);
-		new SharedLibraryLoader("libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
-
-		ApplicationAdapter app = new ApplicationAdapter() {
-			Ois ois;
-			
-			@Override
-			public void create () {
-				this.ois = new Ois();
-			}
-			
-			public void render() {
-				ois.update();
-				
-			}
-		};
-
-		new LwjglApplication(app);
-//		new LwjglFrame(app, "Controllers", 200, 200, false);
-		
-//		final JFrame frame = new JFrame("FrameDemo");
-//		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-//		frame.pack();
-//		frame.setVisible(true);
-//		SwingUtilities.invokeLater(new Runnable() {
-//			@Override
-//			public void run () {
-//				OisWrapper.initialize(getWindowId(frame));
-//			}
-//		});
-	}
 }
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/Ois.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/Ois.java
deleted file mode 100755
index 04486d2..0000000
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/Ois.java
+++ /dev/null
@@ -1,119 +0,0 @@
-
-package com.badlogic.gdx.controllers;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-
-import org.lwjgl.opengl.Display;
-
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.SharedLibraryLoader;
-
-/** JNI wrapper for the object-oriented input system
- * @author mzechner
- * @author Nathan Sweet */
-public class Ois {
-	private long inputManager;
-	private Array<OisJoystick> joysticks = new Array<OisJoystick>();
-	
-	public Ois() {
-		// hack doesn't work :/
-//		if(System.getProperty("os.name").toLowerCase().contains("windows")) {
-//			inputManager = createInputManager(getWindowHandleWindowsHack());
-//		} else {
-			inputManager = createInputManager(getWindowHandle());
-//		}
-		
-		int numJoysticks = getNumJoysticks(inputManager);
-		for(int i = 0; i < numJoysticks; i++) {
-			joysticks.add(new OisJoystick(createJoystick(inputManager)));
-		}
-	}
-
-	public void update() {
-		for(OisJoystick joystick: joysticks) {
-			joystick.update();
-		}
-	}
-	
-	/**
-	 * Retrieves the window handle needed by Ois
-	 * @return the window handle
-	 */
-	private long getWindowHandle () {
-		try {
-			Method getImplementation = Display.class.getDeclaredMethod("getImplementation", new Class[0]);
-			getImplementation.setAccessible(true);
-			Object display = getImplementation.invoke(null, (Object[])null);
-			String fieldName = System.getProperty("os.name").toLowerCase().contains("windows") ? "hwnd" : "parent_window";
-			Field field = display.getClass().getDeclaredField(fieldName);
-			field.setAccessible(true);
-			return (Long)field.get(display);
-		} catch (Exception ex) {
-			throw new GdxRuntimeException("Unable to get window handle.", ex);
-		}
-	}
-	
-	// @off
-	/*JNI
-	#include <OISJoyStick.h>
-	#include <OISInputManager.h>
-	#include <sstream>
-	
-	#ifdef _WIN32
-	#include <windows.h>
-	#endif
-	*/
-	
-	/**
-	 * Used on Windows32 with LwjglFrame to work around the cooperation
-	 * level problem. Returns 0 on other platforms.
-	 * @return the HWND for the invisible window, to be passed to {@link #createInputManager(long)}
-	 */
-	private native long getWindowHandleWindowsHack(); /*
-	#ifdef _WIN32
-		HWND joyHwnd = CreateWindow(
-			"Static",         // Class Name (using static so I don't have to register a class)
-			"JoystickWindow", // Window Name
-			WS_BORDER,        // Window Style
-			0, 0, 0, 0,       // x, y, width, height
-			0,                // parent handle
-			0,                // Menu handle
-			0,                // Instance handle
-			0);               // Additional Params
-		printf("hwnd: %d\n", joyHwnd);
-		fflush(stdout);
-		return (jlong)joyHwnd;
-	#else
-		return 0;
-	#endif
-	*/
-
-	private native long createInputManager (long hwnd); /*
-		std::ostringstream hwndStr;
-		hwndStr << hwnd;
-		OIS::ParamList params;
-		params.insert(std::make_pair("WINDOW", hwndStr.str()));
-	//	params.insert(std::make_pair("w32_joystick", "DISCL_BACKGROUND"));
-	//	params.insert(std::make_pair("w32_joystick", "DISCL_NONEXCLUSIVE"));
-		OIS::InputManager *inputManager = OIS::InputManager::createInputSystem(params);
-		return (jlong)inputManager;
-	*/
-	
-	private native int getNumJoysticks(long inputManagerPtr); /*
-		OIS::InputManager* inputManager = (OIS::InputManager*)inputManagerPtr;
-	 	return inputManager->getNumberOfDevices(OIS::OISJoyStick);
-	*/
-	
-	private native long createJoystick(long inputManagerPtr); /*
-		OIS::InputManager* inputManager = (OIS::InputManager*)inputManagerPtr;
-		try {
-			return (jlong)static_cast<OIS::JoyStick*>(inputManager->createInputObject(OIS::OISJoyStick, true));
-		} catch (std::exception &ex) {
-				printf("couldn't create joystick object!\n%s\n", ex.what());
-				fflush(stdout);
-				return 0;
-		}
-	*/
-}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/OisControllers.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/OisControllers.java
deleted file mode 100644
index e45f3d9..0000000
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/OisControllers.java
+++ /dev/null
@@ -1,74 +0,0 @@
-
-package com.badlogic.gdx.controllers;
-
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Pool;
-
-public class OisControllers {
-	private final Ois ois = new Ois();
-	final OisController[] controllers;
-	final Array<Event> eventQueue = new Array();
-	final Pool<Event> eventPool = new Pool<Event>(16, 1000) {
-		protected Event newObject () {
-			return new Event();
-		}
-	};
-
-	public OisControllers (DesktopControllerManager manager) {
-		Array<OisJoystick> joysticks = ois.getJoysticks();
-		controllers = new OisController[joysticks.size];
-		for (int i = 0, n = joysticks.size; i < n; i++) {
-			OisJoystick joystick = joysticks.get(i);
-			controllers = new OisController(joystick);
-		}
-	}
-
-	static public class OisController implements Controller {
-		private OisJoystick joystick;
-
-		public OisController (OisJoystick joystick) {
-			this.joystick = joystick;
-		}
-
-		public void setAccelerometerSensitivity (float sensitivity) {
-		}
-
-		public int getControlCount (ControlType type) {
-			switch (type) {
-			case button:
-				return joystick.getButtonCount();
-			case axis:
-				return joystick.getAxisCount();
-			case slider:
-				return joystick.getSliderCount();
-			case pov:
-				return joystick.getPovCount();
-			}
-			return 0;
-		}
-
-		public void addListener (ControllerListener listener) {
-		}
-
-		public void removeListener (ControllerListener listener) {
-		}
-
-		public String getName () {
-			return name;
-		}
-
-		public String toString () {
-			return name;
-		}
-	}
-
-	static class Event {
-		static final int BUTTON_DOWN = 0;
-		static final int BUTTON_UP = 1;
-		static final int AXIS = 2;
-
-		int type;
-		OisController controller;
-		float axisValue;
-	}
-}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/OisJoystick.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/OisJoystick.java
deleted file mode 100755
index 5adef67..0000000
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/OisJoystick.java
+++ /dev/null
@@ -1,199 +0,0 @@
-
-package com.badlogic.gdx.controllers;
-
-public class OisJoystick {
-	static private final int MIN_AXIS = -32768, MAX_AXIS = 32767;
-
-	static public enum OisPov {
-		Centered, North, South, East, West, NorthEast, SouthEast, NorthWest, SouthWest
-	}
-
-	private long joystickPtr;
-	private boolean[] buttons;
-	private float[] axes;
-	private int[] povs;
-	private boolean[] slidersX, slidersY;
-
-	public OisJoystick (long joystickPtr) {
-		this.joystickPtr = joystickPtr;
-		initialize(this);
-		buttons = new boolean[getButtonCount()];
-		axes = new float[getAxisCount()];
-		povs = new int[getPovCount()];
-		slidersX = new boolean[getSliderCount()];
-		slidersY = new boolean[getSliderCount()];
-	}
-
-	private void buttonPressed (int buttonIndex) {
-		buttons[buttonIndex] = true;
-	}
-
-	private void buttonReleased (int buttonIndex) {
-		buttons[buttonIndex] = false;
-	}
-
-	private void axisMoved (int axisIndex, int value) {
-		axes[axisIndex] = ((value - MIN_AXIS) << 1) / (float)(MAX_AXIS - MIN_AXIS) - 1; // -1 to 1
-	}
-
-	private void povMoved (int povIndex, int value) {
-		povs[povIndex] = value;
-	}
-
-	private void sliderMoved (int sliderIndex, int x, int y) {
-		slidersX[sliderIndex] = x == 1;
-		slidersY[sliderIndex] = y == 1;
-	}
-
-	public void update () {
-		updateJni(joystickPtr, this);
-	}
-
-	public int getAxisCount () {
-		return getAxesCountJni(joystickPtr);
-	}
-
-	public int getButtonCount () {
-		return getButtonCountJni(joystickPtr);
-	}
-
-	public int getPovCount () {
-		return getPovCountJni(joystickPtr);
-	}
-
-	public int getSliderCount () {
-		return getSliderCountJni(joystickPtr);
-	}
-
-	public float getAxis (int axis) {
-		return axes[axis];
-	}
-
-	public OisPov getPov (int pov) {
-		switch (povs[pov]) {
-		case 0x00000000:
-			return OisPov.Centered;
-		case 0x00000001:
-			return OisPov.North;
-		case 0x00000010:
-			return OisPov.South;
-		case 0x00000100:
-			return OisPov.East;
-		case 0x00001000:
-			return OisPov.West;
-		case 0x00000101:
-			return OisPov.NorthEast;
-		case 0x00000110:
-			return OisPov.SouthEast;
-		case 0x00001001:
-			return OisPov.NorthWest;
-		case 0x00001010:
-			return OisPov.SouthWest;
-		default:
-			throw new RuntimeException("Unexpected POV value reported by OIS: " + povs[pov]);
-		}
-	}
-
-	public boolean isButtonPressed (int button) {
-		return buttons[button];
-	}
-
-	// @off
-	/*JNI
-	#include <OISJoyStick.h>
-	#include <OISInputManager.h>
-	 
-	static jclass callbackClass = 0;
-	static jmethodID povMovedId = 0;
-	static jmethodID axisMovedId = 0;
-	static jmethodID sliderMovedId = 0;
-	static jmethodID buttonPressedId = 0;
-	static jmethodID buttonReleasedId = 0;
-	
-	static void initializeClasses(JNIEnv* env, jobject clazz) {
-		// we leak one global ref
-		if(callbackClass == 0) {
-			callbackClass = (jclass)env->NewGlobalRef(env->GetObjectClass(clazz));
-			povMovedId = env->GetMethodID(callbackClass, "povMoved", "(II)V");
-			axisMovedId = env->GetMethodID(callbackClass, "axisMoved", "(II)V");
-			sliderMovedId = env->GetMethodID(callbackClass, "sliderMoved", "(III)V");
-			buttonPressedId = env->GetMethodID(callbackClass, "buttonPressed", "(I)V");
-			buttonReleasedId = env->GetMethodID(callbackClass, "buttonReleased", "(I)V");
-		}
-	}
-
-	class Listener : public OIS::JoyStickListener {
-	public:
-		Listener(JNIEnv* env, jobject obj) {
-			this->env = env;
-			this->obj = obj;
-		}
-
-		JNIEnv* env;
-		jobject obj;
-
-		bool povMoved (const OIS::JoyStickEvent &event, int pov);
-		bool axisMoved (const OIS::JoyStickEvent &event, int axis);
-		bool sliderMoved (const OIS::JoyStickEvent &event, int sliderID);
-		bool buttonPressed (const OIS::JoyStickEvent &event, int button);
-		bool buttonReleased (const OIS::JoyStickEvent &event, int button);
-	};
-
-	bool Listener::buttonPressed (const OIS::JoyStickEvent &event, int buttonId) {
-		env->CallVoidMethod(obj, buttonPressedId, (jint)buttonId);
-		return true;
-	}
-
-	bool Listener::buttonReleased (const OIS::JoyStickEvent &event, int buttonId) {
-		env->CallVoidMethod(obj, buttonReleasedId, (jint)buttonId);
-		return true;
-	}
-
-	bool Listener::axisMoved (const OIS::JoyStickEvent &event, int axisId) {
-		env->CallVoidMethod(obj, axisMovedId, (jint)axisId, (jint)event.state.mAxes[axisId].abs);
-		return true;
-	}
-
-	bool Listener::povMoved (const OIS::JoyStickEvent &event, int povId) {
-		env->CallVoidMethod(obj, povMovedId, (jint)povId, (jint)event.state.mPOV[povId].direction);
-		return true;
-	}
-
-	bool Listener::sliderMoved (const OIS::JoyStickEvent &event, int sliderId) {
-		env->CallVoidMethod(obj, sliderMovedId, (jint)sliderId,
-			(jint)event.state.mSliders[sliderId].abX, (jint)event.state.mSliders[sliderId].abY);
-		return true;
-	}
-	 */
-	
-	private native void initialize(OisJoystick joystick); /*
-		initializeClasses(env, joystick);
-	*/
-	
-	private native void updateJni(long joystickPtr, OisJoystick callback); /*
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		Listener listener(env, callback);
-		joystick->setEventCallback(&listener);
-		joystick->capture();
-	*/
-	
-	private native int getAxesCountJni (long joystickPtr); /*
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		return joystick->getNumberOfComponents(OIS::OIS_Axis);
-	*/
-	
-	private native int getButtonCountJni (long joystickPtr); /*
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		return joystick->getNumberOfComponents(OIS::OIS_Button);
-	*/
-	
-	private native int getPovCountJni (long joystickPtr); /*
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		return joystick->getNumberOfComponents(OIS::OIS_POV);
-	*/
-	
-	private native int getSliderCountJni (long joystickPtr); /*
-		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
-		return joystick->getNumberOfComponents(OIS::OIS_Slider);
-	 */
-}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/Ois.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/Ois.java
new file mode 100755
index 0000000..b3a95a1
--- /dev/null
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/Ois.java
@@ -0,0 +1,123 @@
+
+package com.badlogic.gdx.controllers.desktop.ois;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+
+import org.lwjgl.opengl.Display;
+
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.SharedLibraryLoader;
+
+/** JNI wrapper for the object-oriented input system
+ * @author mzechner
+ * @author Nathan Sweet */
+public class Ois {
+	private long inputManager;
+	private Array<OisJoystick> joysticks = new Array<OisJoystick>();
+	
+	public Ois() {
+		// hack doesn't work :/
+//		if(System.getProperty("os.name").toLowerCase().contains("windows")) {
+//			inputManager = createInputManager(getWindowHandleWindowsHack());
+//		} else {
+			inputManager = createInputManager(getWindowHandle());
+//		}
+		
+		int numJoysticks = getNumJoysticks(inputManager);
+		for(int i = 0; i < numJoysticks; i++) {
+			joysticks.add(new OisJoystick(createJoystick(inputManager)));
+		}
+	}
+	
+	public Array<OisJoystick> getJoysticks() {
+		return joysticks;
+	}
+	
+	public void update() {
+		for(OisJoystick joystick: joysticks) {
+			joystick.update();
+		}
+	}
+	
+	/**
+	 * Retrieves the window handle needed by Ois
+	 * @return the window handle
+	 */
+	private long getWindowHandle () {
+		try {
+			Method getImplementation = Display.class.getDeclaredMethod("getImplementation", new Class[0]);
+			getImplementation.setAccessible(true);
+			Object display = getImplementation.invoke(null, (Object[])null);
+			String fieldName = System.getProperty("os.name").toLowerCase().contains("windows") ? "hwnd" : "parent_window";
+			Field field = display.getClass().getDeclaredField(fieldName);
+			field.setAccessible(true);
+			return (Long)field.get(display);
+		} catch (Exception ex) {
+			throw new GdxRuntimeException("Unable to get window handle.", ex);
+		}
+	}
+	
+	// @off
+	/*JNI
+	#include <OISJoyStick.h>
+	#include <OISInputManager.h>
+	#include <sstream>
+	
+	#ifdef _WIN32
+	#include <windows.h>
+	#endif
+	*/
+	
+	/**
+	 * Used on Windows32 with LwjglFrame to work around the cooperation
+	 * level problem. Returns 0 on other platforms.
+	 * @return the HWND for the invisible window, to be passed to {@link #createInputManager(long)}
+	 */
+	private native long getWindowHandleWindowsHack(); /*
+	#ifdef _WIN32
+		HWND joyHwnd = CreateWindow(
+			"Static",         // Class Name (using static so I don't have to register a class)
+			"JoystickWindow", // Window Name
+			WS_BORDER,        // Window Style
+			0, 0, 0, 0,       // x, y, width, height
+			0,                // parent handle
+			0,                // Menu handle
+			0,                // Instance handle
+			0);               // Additional Params
+		printf("hwnd: %d\n", joyHwnd);
+		fflush(stdout);
+		return (jlong)joyHwnd;
+	#else
+		return 0;
+	#endif
+	*/
+
+	private native long createInputManager (long hwnd); /*
+		std::ostringstream hwndStr;
+		hwndStr << hwnd;
+		OIS::ParamList params;
+		params.insert(std::make_pair("WINDOW", hwndStr.str()));
+	//	params.insert(std::make_pair("w32_joystick", "DISCL_BACKGROUND"));
+	//	params.insert(std::make_pair("w32_joystick", "DISCL_NONEXCLUSIVE"));
+		OIS::InputManager *inputManager = OIS::InputManager::createInputSystem(params);
+		return (jlong)inputManager;
+	*/
+	
+	private native int getNumJoysticks(long inputManagerPtr); /*
+		OIS::InputManager* inputManager = (OIS::InputManager*)inputManagerPtr;
+	 	return inputManager->getNumberOfDevices(OIS::OISJoyStick);
+	*/
+	
+	private native long createJoystick(long inputManagerPtr); /*
+		OIS::InputManager* inputManager = (OIS::InputManager*)inputManagerPtr;
+		try {
+			return (jlong)static_cast<OIS::JoyStick*>(inputManager->createInputObject(OIS::OISJoyStick, true));
+		} catch (std::exception &ex) {
+				printf("couldn't create joystick object!\n%s\n", ex.what());
+				fflush(stdout);
+				return 0;
+		}
+	*/
+}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisCallback.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisCallback.java
new file mode 100755
index 0000000..2b00c5f
--- /dev/null
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisCallback.java
@@ -0,0 +1,11 @@
+package com.badlogic.gdx.controllers.desktop.ois;
+
+import com.badlogic.gdx.controllers.desktop.ois.OisJoystick.OisPov;
+
+public interface OisCallback {
+	public void povMoved(OisJoystick joystick, int pov, OisPov direction);
+	public void axisMoved(OisJoystick joystick, int axis, float value);
+	public void sliderMoved(OisJoystick joystick, int slider, boolean x, boolean y);
+	public void buttonPressed(OisJoystick joystick, int button);
+	public void buttonReleased(OisJoystick joystick, int button);
+}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisJoystick.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisJoystick.java
new file mode 100755
index 0000000..3896c52
--- /dev/null
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisJoystick.java
@@ -0,0 +1,219 @@
+
+package com.badlogic.gdx.controllers.desktop.ois;
+
+public class OisJoystick {
+	static private final int MIN_AXIS = -32768, MAX_AXIS = 32767;
+
+	static public enum OisPov {
+		Centered, North, South, East, West, NorthEast, SouthEast, NorthWest, SouthWest
+	}
+
+	private long joystickPtr;
+	private boolean[] buttons;
+	private float[] axes;
+	private int[] povs;
+	private boolean[] slidersX, slidersY;
+	private OisCallback callback;
+
+	public OisJoystick (long joystickPtr) {
+		this.joystickPtr = joystickPtr;
+		initialize(this);
+		buttons = new boolean[getButtonCount()];
+		axes = new float[getAxisCount()];
+		povs = new int[getPovCount()];
+		slidersX = new boolean[getSliderCount()];
+		slidersY = new boolean[getSliderCount()];
+	}
+
+	public void setCallback(OisCallback callback) {
+		this.callback = callback;
+	}
+	
+	private void buttonPressed (int buttonIndex) {
+		buttons[buttonIndex] = true;
+		if(callback != null) {
+			callback.buttonPressed(this, buttonIndex);
+		}
+	}
+
+	private void buttonReleased (int buttonIndex) {
+		buttons[buttonIndex] = false;
+		if(callback != null) {
+			callback.buttonReleased(this, buttonIndex);
+		}
+	}
+
+	private void axisMoved (int axisIndex, int value) {
+		axes[axisIndex] = ((value - MIN_AXIS) << 1) / (float)(MAX_AXIS - MIN_AXIS) - 1; // -1 to 1
+		if(callback != null) {
+			callback.axisMoved(this, axisIndex, axes[axisIndex]);
+		}
+	}
+
+	private void povMoved (int povIndex, int value) {
+		povs[povIndex] = value;
+		if(callback != null) {
+			callback.povMoved(this, povIndex, getPov(value));
+		}
+	}
+
+	private void sliderMoved (int sliderIndex, int x, int y) {
+		slidersX[sliderIndex] = x == 1;
+		slidersY[sliderIndex] = y == 1;
+		if(callback != null) {
+			callback.sliderMoved(this, sliderIndex, x == 1, y == 1);
+		}
+	}
+
+	public void update () {
+		updateJni(joystickPtr, this);
+	}
+
+	public int getAxisCount () {
+		return getAxesCountJni(joystickPtr);
+	}
+
+	public int getButtonCount () {
+		return getButtonCountJni(joystickPtr);
+	}
+
+	public int getPovCount () {
+		return getPovCountJni(joystickPtr);
+	}
+
+	public int getSliderCount () {
+		return getSliderCountJni(joystickPtr);
+	}
+
+	public float getAxis (int axis) {
+		return axes[axis];
+	}
+
+	public OisPov getPov (int pov) {
+		switch (povs[pov]) {
+		case 0x00000000:
+			return OisPov.Centered;
+		case 0x00000001:
+			return OisPov.North;
+		case 0x00000010:
+			return OisPov.South;
+		case 0x00000100:
+			return OisPov.East;
+		case 0x00001000:
+			return OisPov.West;
+		case 0x00000101:
+			return OisPov.NorthEast;
+		case 0x00000110:
+			return OisPov.SouthEast;
+		case 0x00001001:
+			return OisPov.NorthWest;
+		case 0x00001010:
+			return OisPov.SouthWest;
+		default:
+			throw new RuntimeException("Unexpected POV value reported by OIS: " + povs[pov]);
+		}
+	}
+
+	public boolean isButtonPressed (int button) {
+		return buttons[button];
+	}
+
+	// @off
+	/*JNI
+	#include <OISJoyStick.h>
+	#include <OISInputManager.h>
+	 
+	static jclass callbackClass = 0;
+	static jmethodID povMovedId = 0;
+	static jmethodID axisMovedId = 0;
+	static jmethodID sliderMovedId = 0;
+	static jmethodID buttonPressedId = 0;
+	static jmethodID buttonReleasedId = 0;
+	
+	static void initializeClasses(JNIEnv* env, jobject clazz) {
+		// we leak one global ref
+		if(callbackClass == 0) {
+			callbackClass = (jclass)env->NewGlobalRef(env->GetObjectClass(clazz));
+			povMovedId = env->GetMethodID(callbackClass, "povMoved", "(II)V");
+			axisMovedId = env->GetMethodID(callbackClass, "axisMoved", "(II)V");
+			sliderMovedId = env->GetMethodID(callbackClass, "sliderMoved", "(III)V");
+			buttonPressedId = env->GetMethodID(callbackClass, "buttonPressed", "(I)V");
+			buttonReleasedId = env->GetMethodID(callbackClass, "buttonReleased", "(I)V");
+		}
+	}
+
+	class Listener : public OIS::JoyStickListener {
+	public:
+		Listener(JNIEnv* env, jobject obj) {
+			this->env = env;
+			this->obj = obj;
+		}
+
+		JNIEnv* env;
+		jobject obj;
+
+		bool povMoved (const OIS::JoyStickEvent &event, int pov);
+		bool axisMoved (const OIS::JoyStickEvent &event, int axis);
+		bool sliderMoved (const OIS::JoyStickEvent &event, int sliderID);
+		bool buttonPressed (const OIS::JoyStickEvent &event, int button);
+		bool buttonReleased (const OIS::JoyStickEvent &event, int button);
+	};
+
+	bool Listener::buttonPressed (const OIS::JoyStickEvent &event, int buttonId) {
+		env->CallVoidMethod(obj, buttonPressedId, (jint)buttonId);
+		return true;
+	}
+
+	bool Listener::buttonReleased (const OIS::JoyStickEvent &event, int buttonId) {
+		env->CallVoidMethod(obj, buttonReleasedId, (jint)buttonId);
+		return true;
+	}
+
+	bool Listener::axisMoved (const OIS::JoyStickEvent &event, int axisId) {
+		env->CallVoidMethod(obj, axisMovedId, (jint)axisId, (jint)event.state.mAxes[axisId].abs);
+		return true;
+	}
+
+	bool Listener::povMoved (const OIS::JoyStickEvent &event, int povId) {
+		env->CallVoidMethod(obj, povMovedId, (jint)povId, (jint)event.state.mPOV[povId].direction);
+		return true;
+	}
+
+	bool Listener::sliderMoved (const OIS::JoyStickEvent &event, int sliderId) {
+		env->CallVoidMethod(obj, sliderMovedId, (jint)sliderId,
+			(jint)event.state.mSliders[sliderId].abX, (jint)event.state.mSliders[sliderId].abY);
+		return true;
+	}
+	 */
+	
+	private native void initialize(OisJoystick joystick); /*
+		initializeClasses(env, joystick);
+	*/
+	
+	private native void updateJni(long joystickPtr, OisJoystick callback); /*
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		Listener listener(env, callback);
+		joystick->setEventCallback(&listener);
+		joystick->capture();
+	*/
+	
+	private native int getAxesCountJni (long joystickPtr); /*
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		return joystick->getNumberOfComponents(OIS::OIS_Axis);
+	*/
+	
+	private native int getButtonCountJni (long joystickPtr); /*
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		return joystick->getNumberOfComponents(OIS::OIS_Button);
+	*/
+	
+	private native int getPovCountJni (long joystickPtr); /*
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		return joystick->getNumberOfComponents(OIS::OIS_POV);
+	*/
+	
+	private native int getSliderCountJni (long joystickPtr); /*
+		OIS::JoyStick* joystick = (OIS::JoyStick*)joystickPtr;
+		return joystick->getNumberOfComponents(OIS::OIS_Slider);
+	 */
+}
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java
new file mode 100755
index 0000000..9b07e23
--- /dev/null
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java
@@ -0,0 +1,67 @@
+package com.badlogic.gdx.controllers.desktop.ois;
+
+import com.badlogic.gdx.ApplicationAdapter;
+import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
+import com.badlogic.gdx.controllers.DesktopControllersBuild;
+import com.badlogic.gdx.controllers.desktop.ois.OisJoystick.OisPov;
+import com.badlogic.gdx.utils.SharedLibraryLoader;
+
+public class OisTest {
+	public static void main (String[] args) throws Exception {
+		DesktopControllersBuild.main(null);
+		new SharedLibraryLoader("libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
+
+		ApplicationAdapter app = new ApplicationAdapter() {
+			Ois ois;
+			
+			@Override
+			public void create () {
+				this.ois = new Ois();
+				ois.getJoysticks().get(0).setCallback(new OisCallback() {
+					@Override
+					public void sliderMoved (OisJoystick joystick, int slider, boolean x, boolean y) {
+						System.out.println("slider " + slider + " moved, " + x + ", " + y);
+					}
+					
+					@Override
+					public void povMoved (OisJoystick joystick, int pov, OisPov direction) {
+						System.out.println("pov " + pov + " moved, " + direction);
+					}
+					
+					@Override
+					public void buttonReleased (OisJoystick joystick, int button) {
+						System.out.println("button " + button + " released");
+					}
+					
+					@Override
+					public void buttonPressed (OisJoystick joystick, int button) {
+						System.out.println("button " + button + " pressed");
+					}
+					
+					@Override
+					public void axisMoved (OisJoystick joystick, int axis, float value) {
+						System.out.println("axis " + axis + " moved, " + value);
+					}
+				});
+			}
+			
+			public void render() {
+				ois.update();
+			}
+		};
+
+		new LwjglApplication(app);
+//		new LwjglFrame(app, "Controllers", 200, 200, false);
+		
+//		final JFrame frame = new JFrame("FrameDemo");
+//		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+//		frame.pack();
+//		frame.setVisible(true);
+//		SwingUtilities.invokeLater(new Runnable() {
+//			@Override
+//			public void run () {
+//				OisWrapper.initialize(getWindowId(frame));
+//			}
+//		});
+	}
+}
